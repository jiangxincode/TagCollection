!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ANY_SOURCE	openmpi/ompi/mpi/cxx/constants.h	/^static const int ANY_SOURCE = MPI_ANY_SOURCE;$/;"	v
ANY_TAG	openmpi/ompi/mpi/cxx/constants.h	/^static const int ANY_TAG = MPI_ANY_TAG;$/;"	v
APPNUM	openmpi/ompi/mpi/cxx/constants.h	/^static const int APPNUM = MPI_APPNUM;$/;"	v
ARGVS_NULL	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const char***      ARGVS_NULL;$/;"	x
ARGV_NULL	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const char**       ARGV_NULL;$/;"	x
Abort	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Abort(int errorcode);$/;"	p	class:Comm	access:public	signature:(int errorcode)
Abort	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Abort(int errorcode) $/;"	f	class:MPI::Comm	signature:(int errorcode)
Accept	openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Accept(const char* port_name, const Info& info, int root)$/;"	p	class:Intracomm	access:public	signature:(const char* port_name, const Info& info, int root) const
Accept	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Accept(const char* port_name, $/;"	f	class:MPI::Intracomm	signature:(const char* port_name, const MPI::Info& info, int root) const
Accumulate	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Accumulate(const void* origin_addr, int origin_count, $/;"	p	class:Win	access:public	signature:(const void* origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype, const MPI::Op& op) const
Accumulate	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Accumulate(const void* origin_addr, int origin_count,$/;"	f	class:MPI::Win	signature:(const void* origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype, const MPI::Op& op) const
Add_error_class	openmpi/ompi/mpi/cxx/functions.h	/^Add_error_class();$/;"	p	signature:()
Add_error_class	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Add_error_class()$/;"	f	class:MPI	signature:()
Add_error_code	openmpi/ompi/mpi/cxx/functions.h	/^Add_error_code(int errorclass);$/;"	p	signature:(int errorclass)
Add_error_code	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Add_error_code(int errorclass)$/;"	f	class:MPI	signature:(int errorclass)
Add_error_string	openmpi/ompi/mpi/cxx/functions.h	/^Add_error_string(int errorcode, const char* string);$/;"	p	signature:(int errorcode, const char* string)
Add_error_string	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Add_error_string(int errorcode, const char* string)$/;"	f	class:MPI	signature:(int errorcode, const char* string)
Aint	openmpi/ompi/mpi/cxx/mpicxx.h	/^  typedef MPI_Aint Aint;$/;"	t	namespace:MPI
Allgather	openmpi/ompi/mpi/cxx/comm.h	/^  Allgather(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype) const
Allgather	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Allgather(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype) const
Allgatherv	openmpi/ompi/mpi/cxx/comm.h	/^  Allgatherv(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, const int recvcounts[], const int displs[], const Datatype & recvtype) const
Allgatherv	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Allgatherv(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, const int recvcounts[], const int displs[], const MPI::Datatype & recvtype) const
Alloc_mem	openmpi/ompi/mpi/cxx/functions.h	/^Alloc_mem(Aint size, const Info& info);$/;"	p	signature:(Aint size, const Info& info)
Alloc_mem	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Alloc_mem(MPI::Aint size, const MPI::Info& info) $/;"	f	class:MPI	signature:(MPI::Aint size, const MPI::Info& info)
Allreduce	openmpi/ompi/mpi/cxx/comm.h	/^  Allreduce(const void *sendbuf, void *recvbuf, int count,$/;"	p	class:Comm	access:public	signature:(const void *sendbuf, void *recvbuf, int count, const Datatype & datatype, const Op & op) const
Allreduce	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Allreduce(const void *sendbuf, void *recvbuf, int count,$/;"	f	class:MPI::Comm	signature:(const void *sendbuf, void *recvbuf, int count, const MPI::Datatype & datatype, const MPI::Op& op) const
Alltoall	openmpi/ompi/mpi/cxx/comm.h	/^  Alltoall(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype) const
Alltoall	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Alltoall(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype) const
Alltoallv	openmpi/ompi/mpi/cxx/comm.h	/^  Alltoallv(const void *sendbuf, const int sendcounts[], $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const Datatype & sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], const Datatype & recvtype) const
Alltoallv	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Alltoallv(const void *sendbuf, const int sendcounts[], $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI::Datatype & sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], const MPI::Datatype & recvtype) const
Alltoallw	openmpi/ompi/mpi/cxx/comm.h	/^  Alltoallw(const void *sendbuf, const int sendcounts[],$/;"	p	class:Comm	access:public	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const Datatype recvtypes[]) const
Alltoallw	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Alltoallw(const void *sendbuf, const int sendcounts[],$/;"	f	class:MPI::Comm	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI::Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const MPI::Datatype recvtypes[]) const
Attach_buffer	openmpi/ompi/mpi/cxx/functions.h	/^Attach_buffer(void* buffer, int size);$/;"	p	signature:(void* buffer, int size)
Attach_buffer	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Attach_buffer(void* buffer, int size)$/;"	f	class:MPI	signature:(void* buffer, int size)
BAND	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Op BAND;$/;"	x
BOOL	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype BOOL;$/;"	x
BOR	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Op BOR;$/;"	x
BOTTOM	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern void* const BOTTOM;$/;"	x
BSEND_OVERHEAD	openmpi/ompi/mpi/cxx/constants.h	/^static const int BSEND_OVERHEAD = MPI_BSEND_OVERHEAD;$/;"	v
BXOR	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Op BXOR;$/;"	x
BYTE	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype BYTE;$/;"	x
Barrier	openmpi/ompi/mpi/cxx/comm.h	/^  Barrier() const;$/;"	p	class:Comm	access:public	signature:() const
Barrier	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Barrier() const$/;"	f	class:MPI::Comm	signature:() const
Bcast	openmpi/ompi/mpi/cxx/comm.h	/^  Bcast(void *buffer, int count, $/;"	p	class:Comm	access:public	signature:(void *buffer, int count, const Datatype& datatype, int root) const
Bcast	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Bcast(void *buffer, int count, $/;"	f	class:MPI::Comm	signature:(void *buffer, int count, const MPI::Datatype& datatype, int root) const
Bsend	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Bsend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Bsend	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Bsend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Bsend_init	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Bsend_init(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Bsend_init	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Bsend_init(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
CART	openmpi/ompi/mpi/cxx/constants.h	/^static const int CART = MPI_CART;$/;"	v
CHAR	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype CHAR;$/;"	x
CHARACTER	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype CHARACTER;$/;"	x
COMBINER_CONTIGUOUS	openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_CONTIGUOUS = MPI_COMBINER_CONTIGUOUS;$/;"	v
COMBINER_DARRAY	openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_DARRAY = MPI_COMBINER_DARRAY;$/;"	v
COMBINER_DUP	openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_DUP = MPI_COMBINER_DUP;$/;"	v
COMBINER_F90_COMPLEX	openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_F90_COMPLEX = MPI_COMBINER_F90_COMPLEX;$/;"	v
COMBINER_F90_INTEGER	openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_F90_INTEGER = MPI_COMBINER_F90_INTEGER;$/;"	v
COMBINER_F90_REAL	openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_F90_REAL = MPI_COMBINER_F90_REAL;$/;"	v
COMBINER_HINDEXED	openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_HINDEXED = MPI_COMBINER_HINDEXED;$/;"	v
COMBINER_HINDEXED_INTEGER	openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_HINDEXED_INTEGER = MPI_COMBINER_HINDEXED_INTEGER;$/;"	v
COMBINER_HVECTOR	openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_HVECTOR = MPI_COMBINER_HVECTOR;$/;"	v
COMBINER_HVECTOR_INTEGER	openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_HVECTOR_INTEGER = MPI_COMBINER_HVECTOR_INTEGER;$/;"	v
COMBINER_INDEXED	openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_INDEXED = MPI_COMBINER_INDEXED;$/;"	v
COMBINER_INDEXED_BLOCK	openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_INDEXED_BLOCK = MPI_COMBINER_INDEXED_BLOCK;$/;"	v
COMBINER_NAMED	openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_NAMED = MPI_COMBINER_NAMED;$/;"	v
COMBINER_RESIZED	openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_RESIZED = MPI_COMBINER_RESIZED;$/;"	v
COMBINER_STRUCT	openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_STRUCT = MPI_COMBINER_STRUCT;$/;"	v
COMBINER_STRUCT_INTEGER	openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_STRUCT_INTEGER = MPI_COMBINER_STRUCT_INTEGER;$/;"	v
COMBINER_SUBARRAY	openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_SUBARRAY = MPI_COMBINER_SUBARRAY;$/;"	v
COMBINER_VECTOR	openmpi/ompi/mpi/cxx/constants.h	/^static const int COMBINER_VECTOR = MPI_COMBINER_VECTOR;$/;"	v
COMM_NULL	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern Comm_Null          COMM_NULL;$/;"	x
COMM_SELF	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern Intracomm COMM_SELF;$/;"	x
COMM_WORLD	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern Intracomm COMM_WORLD;$/;"	x
COMPLEX	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype COMPLEX;$/;"	x
CONGRUENT	openmpi/ompi/mpi/cxx/constants.h	/^static const int CONGRUENT = MPI_CONGRUENT;$/;"	v
Call_errhandler	openmpi/ompi/mpi/cxx/comm.h	/^  void Call_errhandler(int errorcode) const;$/;"	p	class:Comm	access:public	signature:(int errorcode) const
Call_errhandler	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Call_errhandler(int errorcode) const$/;"	f	class:MPI::Comm	signature:(int errorcode) const
Call_errhandler	openmpi/ompi/mpi/cxx/file.h	/^  void Call_errhandler(int errorcode) const;$/;"	p	class:File	access:public	signature:(int errorcode) const
Call_errhandler	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Call_errhandler(int errorcode) const$/;"	f	class:MPI::File	signature:(int errorcode) const
Call_errhandler	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Call_errhandler(int errorcode) const;$/;"	p	class:Win	access:public	signature:(int errorcode) const
Call_errhandler	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Call_errhandler(int errorcode) const$/;"	f	class:MPI::Win	signature:(int errorcode) const
Cancel	openmpi/ompi/mpi/cxx/request.h	/^  virtual void Cancel(void) const;$/;"	p	class:Request	access:public	signature:(void) const
Cancel	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Cancel(void) const$/;"	f	class:MPI::Request	signature:(void) const
Cancel_function	openmpi/ompi/mpi/cxx/request.h	/^    typedef int Cancel_function(void *, bool);$/;"	t	class:Grequest	access:public
Cartcomm	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Cartcomm;$/;"	x
Cartcomm	openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm() { }$/;"	f	class:Cartcomm	access:public	signature:()
Cartcomm	openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm(const Cartcomm& data) : Intracomm(data.mpi_comm) { }$/;"	f	class:Cartcomm	access:public	signature:(const Cartcomm& data)
Cartcomm	openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm(const Comm_Null& data) : Intracomm(data) { }$/;"	f	class:Cartcomm	access:public	signature:(const Comm_Null& data)
Cartcomm	openmpi/ompi/mpi/cxx/topology.h	/^  inline Cartcomm(const MPI_Comm& data);$/;"	p	class:Cartcomm	access:public	signature:(const MPI_Comm& data)
Cartcomm	openmpi/ompi/mpi/cxx/topology.h	/^class Cartcomm : public Intracomm {$/;"	c	inherits:Intracomm
Cartcomm	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Cartcomm(const MPI_Comm& data) {$/;"	f	class:MPI::Cartcomm	signature:(const MPI_Comm& data)
Cartcomm::Cartcomm	openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm() { }$/;"	f	class:Cartcomm	access:public	signature:()
Cartcomm::Cartcomm	openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm(const Cartcomm& data) : Intracomm(data.mpi_comm) { }$/;"	f	class:Cartcomm	access:public	signature:(const Cartcomm& data)
Cartcomm::Cartcomm	openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm(const Comm_Null& data) : Intracomm(data) { }$/;"	f	class:Cartcomm	access:public	signature:(const Comm_Null& data)
Cartcomm::Cartcomm	openmpi/ompi/mpi/cxx/topology.h	/^  inline Cartcomm(const MPI_Comm& data);$/;"	p	class:Cartcomm	access:public	signature:(const MPI_Comm& data)
Cartcomm::Clone	openmpi/ompi/mpi/cxx/topology.h	/^  virtual Cartcomm& Clone() const;$/;"	p	class:Cartcomm	access:public	signature:() const
Cartcomm::Dup	openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm Dup() const;$/;"	p	class:Cartcomm	access:public	signature:() const
Cartcomm::Get_cart_rank	openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Get_cart_rank(const int coords[]) const;$/;"	p	class:Cartcomm	access:public	signature:(const int coords[]) const
Cartcomm::Get_coords	openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_coords(int rank, int maxdims, int coords[]) const;$/;"	p	class:Cartcomm	access:public	signature:(int rank, int maxdims, int coords[]) const
Cartcomm::Get_dim	openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Get_dim() const;$/;"	p	class:Cartcomm	access:public	signature:() const
Cartcomm::Get_topo	openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_topo(int maxdims, int dims[], bool periods[],$/;"	p	class:Cartcomm	access:public	signature:(int maxdims, int dims[], bool periods[], int coords[]) const
Cartcomm::Map	openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Map(int ndims, const int dims[], const bool periods[]) const;$/;"	p	class:Cartcomm	access:public	signature:(int ndims, const int dims[], const bool periods[]) const
Cartcomm::Shift	openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Shift(int direction, int disp,$/;"	p	class:Cartcomm	access:public	signature:(int direction, int disp, int &rank_source, int &rank_dest) const
Cartcomm::Sub	openmpi/ompi/mpi/cxx/topology.h	/^  virtual Cartcomm Sub(const bool remain_dims[]) const;$/;"	p	class:Cartcomm	access:public	signature:(const bool remain_dims[]) const
Cartcomm::operator =	openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm& operator=(const Cartcomm& data) {$/;"	f	class:Cartcomm	access:public	signature:(const Cartcomm& data)
Cartcomm::operator =	openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm& operator=(const Comm_Null& data) {$/;"	f	class:Cartcomm	access:public	signature:(const Comm_Null& data)
Cartcomm::operator =	openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm& operator=(const MPI_Comm& data) {$/;"	f	class:Cartcomm	access:public	signature:(const MPI_Comm& data)
Clone	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Comm& Clone() const = 0;$/;"	p	class:Comm	access:public	signature:() const
Clone	openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Intercomm& Clone() const;$/;"	p	class:Intercomm	access:public	signature:() const
Clone	openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Clone() const$/;"	f	class:MPI::Intercomm	signature:() const
Clone	openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intracomm& Clone() const;$/;"	p	class:Intracomm	access:public	signature:() const
Clone	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Clone() const$/;"	f	class:MPI::Intracomm	signature:() const
Clone	openmpi/ompi/mpi/cxx/topology.h	/^  virtual Cartcomm& Clone() const;$/;"	p	class:Cartcomm	access:public	signature:() const
Clone	openmpi/ompi/mpi/cxx/topology.h	/^  virtual Graphcomm& Clone() const;$/;"	p	class:Graphcomm	access:public	signature:() const
Clone	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Clone() const$/;"	f	class:MPI::Cartcomm	signature:() const
Clone	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Clone() const$/;"	f	class:MPI::Graphcomm	signature:() const
Close	openmpi/ompi/mpi/cxx/file.h	/^  void Close();$/;"	p	class:File	access:public	signature:()
Close_port	openmpi/ompi/mpi/cxx/functions.h	/^Close_port(const char* port_name);$/;"	p	signature:(const char* port_name)
Close_port	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Close_port(const char* port_name) $/;"	f	class:MPI	signature:(const char* port_name)
Comm	openmpi/ompi/mpi/cxx/comm.h	/^  Comm();$/;"	p	class:Comm	access:public	signature:()
Comm	openmpi/ompi/mpi/cxx/comm.h	/^  Comm(MPI_Comm data) : Comm_Null(data) { }$/;"	f	class:Comm	access:public	signature:(MPI_Comm data)
Comm	openmpi/ompi/mpi/cxx/comm.h	/^  Comm(const Comm& data) : Comm_Null(data.mpi_comm) { }$/;"	f	class:Comm	access:public	signature:(const Comm& data)
Comm	openmpi/ompi/mpi/cxx/comm.h	/^  Comm(const Comm_Null& data);$/;"	p	class:Comm	access:public	signature:(const Comm_Null& data)
Comm	openmpi/ompi/mpi/cxx/comm.h	/^class Comm : public Comm_Null {$/;"	c	inherits:Comm_Null
Comm	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Comm;$/;"	x
Comm::Abort	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Abort(int errorcode);$/;"	p	class:Comm	access:public	signature:(int errorcode)
Comm::Allgather	openmpi/ompi/mpi/cxx/comm.h	/^  Allgather(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype) const
Comm::Allgatherv	openmpi/ompi/mpi/cxx/comm.h	/^  Allgatherv(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, const int recvcounts[], const int displs[], const Datatype & recvtype) const
Comm::Allreduce	openmpi/ompi/mpi/cxx/comm.h	/^  Allreduce(const void *sendbuf, void *recvbuf, int count,$/;"	p	class:Comm	access:public	signature:(const void *sendbuf, void *recvbuf, int count, const Datatype & datatype, const Op & op) const
Comm::Alltoall	openmpi/ompi/mpi/cxx/comm.h	/^  Alltoall(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype) const
Comm::Alltoallv	openmpi/ompi/mpi/cxx/comm.h	/^  Alltoallv(const void *sendbuf, const int sendcounts[], $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const Datatype & sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], const Datatype & recvtype) const
Comm::Alltoallw	openmpi/ompi/mpi/cxx/comm.h	/^  Alltoallw(const void *sendbuf, const int sendcounts[],$/;"	p	class:Comm	access:public	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const Datatype recvtypes[]) const
Comm::Barrier	openmpi/ompi/mpi/cxx/comm.h	/^  Barrier() const;$/;"	p	class:Comm	access:public	signature:() const
Comm::Bcast	openmpi/ompi/mpi/cxx/comm.h	/^  Bcast(void *buffer, int count, $/;"	p	class:Comm	access:public	signature:(void *buffer, int count, const Datatype& datatype, int root) const
Comm::Bsend	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Bsend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Bsend_init	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Bsend_init(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Call_errhandler	openmpi/ompi/mpi/cxx/comm.h	/^  void Call_errhandler(int errorcode) const;$/;"	p	class:Comm	access:public	signature:(int errorcode) const
Comm::Clone	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Comm& Clone() const = 0;$/;"	p	class:Comm	access:public	signature:() const
Comm::Comm	openmpi/ompi/mpi/cxx/comm.h	/^  Comm();$/;"	p	class:Comm	access:public	signature:()
Comm::Comm	openmpi/ompi/mpi/cxx/comm.h	/^  Comm(MPI_Comm data) : Comm_Null(data) { }$/;"	f	class:Comm	access:public	signature:(MPI_Comm data)
Comm::Comm	openmpi/ompi/mpi/cxx/comm.h	/^  Comm(const Comm& data) : Comm_Null(data.mpi_comm) { }$/;"	f	class:Comm	access:public	signature:(const Comm& data)
Comm::Comm	openmpi/ompi/mpi/cxx/comm.h	/^  Comm(const Comm_Null& data);$/;"	p	class:Comm	access:public	signature:(const Comm_Null& data)
Comm::Compare	openmpi/ompi/mpi/cxx/comm.h	/^  static int Compare(const Comm & comm1, const Comm & comm2);$/;"	p	class:Comm	access:public	signature:(const Comm & comm1, const Comm & comm2)
Comm::Copy_attr_function	openmpi/ompi/mpi/cxx/comm.h	/^  typedef int Copy_attr_function(const Comm& oldcomm, int comm_keyval,$/;"	t	class:Comm	access:public
Comm::Create_errhandler	openmpi/ompi/mpi/cxx/comm.h	/^  static Errhandler Create_errhandler(Comm::Errhandler_function* function);$/;"	p	class:Comm	access:public	signature:(Comm::Errhandler_function* function)
Comm::Create_keyval	openmpi/ompi/mpi/cxx/comm.h	/^  static int Create_keyval(Copy_attr_function* comm_copy_attr_fn,$/;"	p	class:Comm	access:public	signature:(Copy_attr_function* comm_copy_attr_fn, Delete_attr_function* comm_delete_attr_fn, void* extra_state)
Comm::Create_keyval	openmpi/ompi/mpi/cxx/comm.h	/^  static int Create_keyval(Copy_attr_function* comm_copy_attr_fn,$/;"	p	class:Comm	access:public	signature:(Copy_attr_function* comm_copy_attr_fn, MPI_Comm_delete_attr_function* comm_delete_attr_fn, void* extra_state)
Comm::Create_keyval	openmpi/ompi/mpi/cxx/comm.h	/^  static int Create_keyval(MPI_Comm_copy_attr_function* comm_copy_attr_fn,$/;"	p	class:Comm	access:public	signature:(MPI_Comm_copy_attr_function* comm_copy_attr_fn, Delete_attr_function* comm_delete_attr_fn, void* extra_state)
Comm::Create_keyval	openmpi/ompi/mpi/cxx/comm.h	/^  static int Create_keyval(MPI_Comm_copy_attr_function* comm_copy_attr_fn,$/;"	p	class:Comm	access:public	signature:(MPI_Comm_copy_attr_function* comm_copy_attr_fn, MPI_Comm_delete_attr_function* comm_delete_attr_fn, void* extra_state)
Comm::DUP_FN	openmpi/ompi/mpi/cxx/comm.h	/^  static int DUP_FN(const Comm& oldcomm, int comm_keyval,$/;"	p	class:Comm	access:public	signature:(const Comm& oldcomm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, bool& flag)
Comm::Delete_attr	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Delete_attr(int comm_keyval);$/;"	p	class:Comm	access:public	signature:(int comm_keyval)
Comm::Delete_attr_function	openmpi/ompi/mpi/cxx/comm.h	/^  typedef int Delete_attr_function(Comm& comm, int comm_keyval, $/;"	t	class:Comm	access:public
Comm::Disconnect	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Disconnect();$/;"	p	class:Comm	access:public	signature:()
Comm::Errhandler_function	openmpi/ompi/mpi/cxx/comm.h	/^  typedef void Errhandler_function(Comm&, int*, ...);$/;"	t	class:Comm	access:public
Comm::Free	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Free(void);$/;"	p	class:Comm	access:public	signature:(void)
Comm::Free_keyval	openmpi/ompi/mpi/cxx/comm.h	/^  static void Free_keyval(int& comm_keyval);$/;"	p	class:Comm	access:public	signature:(int& comm_keyval)
Comm::Gather	openmpi/ompi/mpi/cxx/comm.h	/^  Gather(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype, int root) const
Comm::Gatherv	openmpi/ompi/mpi/cxx/comm.h	/^  Gatherv(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, const int recvcounts[], const int displs[], const Datatype & recvtype, int root) const
Comm::Get_attr	openmpi/ompi/mpi/cxx/comm.h	/^  virtual bool Get_attr(int comm_keyval, void* attribute_val) const;$/;"	p	class:Comm	access:public	signature:(int comm_keyval, void* attribute_val) const
Comm::Get_errhandler	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Errhandler Get_errhandler() const;$/;"	p	class:Comm	access:public	signature:() const
Comm::Get_group	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Group Get_group() const;$/;"	p	class:Comm	access:public	signature:() const
Comm::Get_name	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Get_name(char * comm_name, int& resultlen) const;$/;"	p	class:Comm	access:public	signature:(char * comm_name, int& resultlen) const
Comm::Get_parent	openmpi/ompi/mpi/cxx/comm.h	/^  static Intercomm Get_parent();$/;"	p	class:Comm	access:public	signature:()
Comm::Get_rank	openmpi/ompi/mpi/cxx/comm.h	/^  virtual int Get_rank() const;$/;"	p	class:Comm	access:public	signature:() const
Comm::Get_size	openmpi/ompi/mpi/cxx/comm.h	/^  virtual int Get_size() const;$/;"	p	class:Comm	access:public	signature:() const
Comm::Get_topology	openmpi/ompi/mpi/cxx/comm.h	/^  virtual int Get_topology() const;$/;"	p	class:Comm	access:public	signature:() const
Comm::Ibsend	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Ibsend(const void *buf, int count, const$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Iprobe	openmpi/ompi/mpi/cxx/comm.h	/^  virtual bool Iprobe(int source, int tag) const;$/;"	p	class:Comm	access:public	signature:(int source, int tag) const
Comm::Iprobe	openmpi/ompi/mpi/cxx/comm.h	/^  virtual bool Iprobe(int source, int tag, Status & status) const;$/;"	p	class:Comm	access:public	signature:(int source, int tag, Status & status) const
Comm::Irecv	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Irecv(void *buf, int count,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int source, int tag) const
Comm::Irsend	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Irsend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Is_inter	openmpi/ompi/mpi/cxx/comm.h	/^  virtual bool Is_inter() const;$/;"	p	class:Comm	access:public	signature:() const
Comm::Isend	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Isend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Issend	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Issend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Join	openmpi/ompi/mpi/cxx/comm.h	/^  static Intercomm Join(const int fd);$/;"	p	class:Comm	access:public	signature:(const int fd)
Comm::NULL_COPY_FN	openmpi/ompi/mpi/cxx/comm.h	/^  static int NULL_COPY_FN(const Comm& oldcomm, int comm_keyval,$/;"	p	class:Comm	access:public	signature:(const Comm& oldcomm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, bool& flag)
Comm::NULL_DELETE_FN	openmpi/ompi/mpi/cxx/comm.h	/^  static int NULL_DELETE_FN(Comm& comm, int comm_keyval, void* attribute_val,$/;"	p	class:Comm	access:public	signature:(Comm& comm, int comm_keyval, void* attribute_val, void* extra_state)
Comm::Probe	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Probe(int source, int tag) const;$/;"	p	class:Comm	access:public	signature:(int source, int tag) const
Comm::Probe	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Probe(int source, int tag, Status & status) const;$/;"	p	class:Comm	access:public	signature:(int source, int tag, Status & status) const
Comm::Recv	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Recv(void *buf, int count, const Datatype & datatype,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int source, int tag) const
Comm::Recv	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Recv(void *buf, int count, const Datatype & datatype,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int source, int tag, Status & status) const
Comm::Recv_init	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Recv_init(void *buf, int count,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int source, int tag) const
Comm::Reduce	openmpi/ompi/mpi/cxx/comm.h	/^  Reduce(const void *sendbuf, void *recvbuf, int count, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, void *recvbuf, int count, const Datatype & datatype, const Op & op, int root) const
Comm::Reduce_scatter	openmpi/ompi/mpi/cxx/comm.h	/^  Reduce_scatter(const void *sendbuf, void *recvbuf, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, void *recvbuf, int recvcounts[], const Datatype & datatype, const Op & op) const
Comm::Rsend	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Rsend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Rsend_init	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Rsend_init(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Scatter	openmpi/ompi/mpi/cxx/comm.h	/^  Scatter(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype, int root) const
Comm::Scatterv	openmpi/ompi/mpi/cxx/comm.h	/^  Scatterv(const void *sendbuf, const int sendcounts[], $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, const int sendcounts[], const int displs[], const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype, int root) const
Comm::Send	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Send(const void *buf, int count, $/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Send_init	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Send_init(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Sendrecv	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Sendrecv(const void *sendbuf, int sendcount,$/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, int dest, int sendtag, void *recvbuf, int recvcount, const Datatype & recvtype, int source, int recvtag) const
Comm::Sendrecv	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Sendrecv(const void *sendbuf, int sendcount,$/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, int dest, int sendtag, void *recvbuf, int recvcount, const Datatype & recvtype, int source, int recvtag, Status & status) const
Comm::Sendrecv_replace	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Sendrecv_replace(void *buf, int count,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int dest, int sendtag, int source, int recvtag) const
Comm::Sendrecv_replace	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Sendrecv_replace(void *buf, int count,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int dest, int sendtag, int source, int recvtag, Status & status) const
Comm::Set_attr	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Set_attr(int comm_keyval, const void* attribute_val) const;$/;"	p	class:Comm	access:public	signature:(int comm_keyval, const void* attribute_val) const
Comm::Set_errhandler	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Set_errhandler(const Errhandler& errhandler);$/;"	p	class:Comm	access:public	signature:(const Errhandler& errhandler)
Comm::Set_name	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Set_name(const char* comm_name);$/;"	p	class:Comm	access:public	signature:(const char* comm_name)
Comm::Ssend	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Ssend(const void *buf, int count, $/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::Ssend_init	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Ssend_init(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Comm::cxx_extra_states_lock	openmpi/ompi/mpi/cxx/comm.h	/^    static opal_mutex_t cxx_extra_states_lock;$/;"	m	class:Comm	access:public
Comm::do_create_keyval	openmpi/ompi/mpi/cxx/comm.h	/^  static int do_create_keyval(MPI_Comm_copy_attr_function* c_copy_fn,$/;"	p	class:Comm	access:protected	signature:(MPI_Comm_copy_attr_function* c_copy_fn, MPI_Comm_delete_attr_function* c_delete_fn, Copy_attr_function* cxx_copy_fn, Delete_attr_function* cxx_delete_fn, void* extra_state, int &keyval)
Comm::keyval_intercept_data_t	openmpi/ompi/mpi/cxx/comm.h	/^    struct keyval_intercept_data_t {$/;"	s	class:Comm	access:public
Comm::keyval_intercept_data_t::c_copy_fn	openmpi/ompi/mpi/cxx/comm.h	/^        MPI_Comm_copy_attr_function *c_copy_fn;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
Comm::keyval_intercept_data_t::c_delete_fn	openmpi/ompi/mpi/cxx/comm.h	/^        MPI_Comm_delete_attr_function *c_delete_fn;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
Comm::keyval_intercept_data_t::cxx_copy_fn	openmpi/ompi/mpi/cxx/comm.h	/^        Copy_attr_function* cxx_copy_fn;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
Comm::keyval_intercept_data_t::cxx_delete_fn	openmpi/ompi/mpi/cxx/comm.h	/^        Delete_attr_function* cxx_delete_fn;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
Comm::keyval_intercept_data_t::extra_state	openmpi/ompi/mpi/cxx/comm.h	/^        void *extra_state;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
CommType	openmpi/ompi/mpi/cxx/mpicxx.h	/^enum CommType { eIntracomm, eIntercomm, eCartcomm, eGraphcomm};$/;"	g
Comm_Null	openmpi/ompi/mpi/cxx/comm.h	/^  inline Comm_Null() : mpi_comm(MPI_COMM_NULL) { }$/;"	f	class:Comm_Null	access:public	signature:()
Comm_Null	openmpi/ompi/mpi/cxx/comm.h	/^  inline Comm_Null(MPI_Comm data) : mpi_comm(data) { }$/;"	f	class:Comm_Null	access:public	signature:(MPI_Comm data)
Comm_Null	openmpi/ompi/mpi/cxx/comm.h	/^  inline Comm_Null(const Comm_Null& data) : mpi_comm(data.mpi_comm) { }$/;"	f	class:Comm_Null	access:public	signature:(const Comm_Null& data)
Comm_Null	openmpi/ompi/mpi/cxx/comm.h	/^class Comm_Null {$/;"	c
Comm_Null	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Comm_Null;$/;"	x
Comm_Null::Comm_Null	openmpi/ompi/mpi/cxx/comm.h	/^  inline Comm_Null() : mpi_comm(MPI_COMM_NULL) { }$/;"	f	class:Comm_Null	access:public	signature:()
Comm_Null::Comm_Null	openmpi/ompi/mpi/cxx/comm.h	/^  inline Comm_Null(MPI_Comm data) : mpi_comm(data) { }$/;"	f	class:Comm_Null	access:public	signature:(MPI_Comm data)
Comm_Null::Comm_Null	openmpi/ompi/mpi/cxx/comm.h	/^  inline Comm_Null(const Comm_Null& data) : mpi_comm(data.mpi_comm) { }$/;"	f	class:Comm_Null	access:public	signature:(const Comm_Null& data)
Comm_Null::mpi_comm	openmpi/ompi/mpi/cxx/comm.h	/^  MPI_Comm mpi_comm;$/;"	m	class:Comm_Null	access:protected
Comm_Null::operator !=	openmpi/ompi/mpi/cxx/comm.h	/^  inline bool operator!=(const Comm_Null& data) const {$/;"	f	class:Comm_Null	access:public	signature:(const Comm_Null& data) const
Comm_Null::operator ==	openmpi/ompi/mpi/cxx/comm.h	/^  inline bool operator==(const Comm_Null& data) const {$/;"	f	class:Comm_Null	access:public	signature:(const Comm_Null& data) const
Comm_Null::operator MPI_Comm	openmpi/ompi/mpi/cxx/comm.h	/^  inline operator MPI_Comm() const { return mpi_comm; }$/;"	f	class:Comm_Null	access:public	signature:() const
Comm_Null::~Comm_Null	openmpi/ompi/mpi/cxx/comm.h	/^  virtual inline ~Comm_Null() { }$/;"	f	class:Comm_Null	access:public	signature:()
Commit	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Commit();$/;"	p	class:Datatype	access:public	signature:()
Commit	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Commit() $/;"	f	class:MPI::Datatype	signature:()
Compare	openmpi/ompi/mpi/cxx/comm.h	/^  static int Compare(const Comm & comm1, const Comm & comm2);$/;"	p	class:Comm	access:public	signature:(const Comm & comm1, const Comm & comm2)
Compare	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Compare(const MPI::Comm & comm1,$/;"	f	class:MPI::Comm	signature:(const MPI::Comm & comm1, const MPI::Comm & comm2)
Compare	openmpi/ompi/mpi/cxx/group.h	/^  static int Compare(const Group& group1, const Group& group2);$/;"	p	class:Group	access:public	signature:(const Group& group1, const Group& group2)
Compare	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Compare(const MPI::Group& group1, const MPI::Group& group2)$/;"	f	class:MPI::Group	signature:(const MPI::Group& group1, const MPI::Group& group2)
Complete	openmpi/ompi/mpi/cxx/request.h	/^    virtual void Complete();$/;"	p	class:Grequest	access:public	signature:()
Complete	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Grequest::Complete()$/;"	f	class:MPI::Grequest	signature:()
Complete	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Complete() const;$/;"	p	class:Win	access:public	signature:() const
Complete	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Complete() const $/;"	f	class:MPI::Win	signature:() const
Compute_dims	openmpi/ompi/mpi/cxx/functions.h	/^Compute_dims(int nnodes, int ndims, int dims[]);$/;"	p	signature:(int nnodes, int ndims, int dims[])
Compute_dims	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Compute_dims(int nnodes, int ndims, int dims[])$/;"	f	class:MPI	signature:(int nnodes, int ndims, int dims[])
Connect	openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Connect(const char* port_name, const Info& info, int root)$/;"	p	class:Intracomm	access:public	signature:(const char* port_name, const Info& info, int root) const
Connect	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Connect(const char* port_name,$/;"	f	class:MPI::Intracomm	signature:(const char* port_name, const MPI::Info& info, int root) const
Copy_attr_function	openmpi/ompi/mpi/cxx/comm.h	/^  typedef int Copy_attr_function(const Comm& oldcomm, int comm_keyval,$/;"	t	class:Comm	access:public
Copy_attr_function	openmpi/ompi/mpi/cxx/datatype.h	/^  typedef int Copy_attr_function(const Datatype& oldtype,$/;"	t	class:Datatype	access:public
Copy_attr_function	openmpi/ompi/mpi/cxx/win.h	/^  typedef int Copy_attr_function(const Win& oldwin, int win_keyval, $/;"	t	class:Win	access:public
Create	openmpi/ompi/mpi/cxx/info.h	/^  static Info Create();$/;"	p	class:Info	access:public	signature:()
Create	openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Create()$/;"	f	class:MPI::Info	signature:()
Create	openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Intercomm Create(const Group& group) const;$/;"	p	class:Intercomm	access:public	signature:(const Group& group) const
Create	openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Create(const Group& group) const$/;"	f	class:MPI::Intercomm	signature:(const Group& group) const
Create	openmpi/ompi/mpi/cxx/intracomm.h	/^  Create(const Group& group) const;$/;"	p	class:Intracomm	access:public	signature:(const Group& group) const
Create	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Create(const MPI::Group& group) const$/;"	f	class:MPI::Intracomm	signature:(const MPI::Group& group) const
Create	openmpi/ompi/mpi/cxx/win.h	/^  static  Win Create(const void* base, MPI::Aint size, int disp_unit, $/;"	p	class:Win	access:public	signature:(const void* base, MPI::Aint size, int disp_unit, const MPI::Info& info, const MPI::Intracomm& comm)
Create	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create(const void* base, MPI::Aint size, $/;"	f	class:MPI::Win	signature:(const void* base, MPI::Aint size, int disp_unit, const MPI::Info& info, const MPI::Intracomm& comm)
Create_cart	openmpi/ompi/mpi/cxx/intracomm.h	/^  Create_cart(int ndims, const int dims[],$/;"	p	class:Intracomm	access:public	signature:(int ndims, const int dims[], const bool periods[], bool reorder) const
Create_cart	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Create_cart(int ndims, const int dims[],$/;"	f	class:MPI::Intracomm	signature:(int ndims, const int dims[], const bool periods[], bool reorder) const
Create_contiguous	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_contiguous(int count) const;$/;"	p	class:Datatype	access:public	signature:(int count) const
Create_contiguous	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_contiguous(int count) const$/;"	f	class:MPI::Datatype	signature:(int count) const
Create_darray	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_darray(int size, int rank, int ndims,$/;"	p	class:Datatype	access:public	signature:(int size, int rank, int ndims, const int array_of_gsizes[], const int array_of_distribs[], const int array_of_dargs[], const int array_of_psizes[], int order) const
Create_darray	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_darray(int size, int rank, int ndims,$/;"	f	class:MPI::Datatype	signature:(int size, int rank, int ndims, const int array_of_gsizes[], const int array_of_distribs[], const int array_of_dargs[], const int array_of_psizes[], int order) const
Create_errhandler	openmpi/ompi/mpi/cxx/comm.h	/^  static Errhandler Create_errhandler(Comm::Errhandler_function* function);$/;"	p	class:Comm	access:public	signature:(Comm::Errhandler_function* function)
Create_errhandler	openmpi/ompi/mpi/cxx/file.h	/^  static MPI::Errhandler Create_errhandler(Errhandler_function* function); $/;"	p	class:File	access:public	signature:(Errhandler_function* function)
Create_errhandler	openmpi/ompi/mpi/cxx/win.h	/^  static MPI::Errhandler Create_errhandler(Errhandler_function* function);$/;"	p	class:Win	access:public	signature:(Errhandler_function* function)
Create_f90_complex	openmpi/ompi/mpi/cxx/datatype.h	/^  static Datatype Create_f90_complex(int p, int r);$/;"	p	class:Datatype	access:public	signature:(int p, int r)
Create_f90_complex	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_f90_complex(int p, int r)$/;"	f	class:MPI::Datatype	signature:(int p, int r)
Create_f90_integer	openmpi/ompi/mpi/cxx/datatype.h	/^  static Datatype Create_f90_integer(int r);$/;"	p	class:Datatype	access:public	signature:(int r)
Create_f90_integer	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_f90_integer(int r)$/;"	f	class:MPI::Datatype	signature:(int r)
Create_f90_real	openmpi/ompi/mpi/cxx/datatype.h	/^  static Datatype Create_f90_real(int p, int r);$/;"	p	class:Datatype	access:public	signature:(int p, int r)
Create_f90_real	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_f90_real(int p, int r)$/;"	f	class:MPI::Datatype	signature:(int p, int r)
Create_graph	openmpi/ompi/mpi/cxx/intracomm.h	/^  Create_graph(int nnodes, const int index[],$/;"	p	class:Intracomm	access:public	signature:(int nnodes, const int index[], const int edges[], bool reorder) const
Create_graph	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Create_graph(int nnodes, const int index[],$/;"	f	class:MPI::Intracomm	signature:(int nnodes, const int index[], const int edges[], bool reorder) const
Create_hindexed	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_hindexed(int count, const int array_of_blocklengths[],$/;"	p	class:Datatype	access:public	signature:(int count, const int array_of_blocklengths[], const Aint array_of_displacements[]) const
Create_hindexed	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_hindexed(int count, const int array_of_blocklengths[],$/;"	f	class:MPI::Datatype	signature:(int count, const int array_of_blocklengths[], const MPI::Aint array_of_displacements[]) const
Create_hvector	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_hvector(int count, int blocklength, Aint stride) const;$/;"	p	class:Datatype	access:public	signature:(int count, int blocklength, Aint stride) const
Create_hvector	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_hvector(int count, int blocklength,$/;"	f	class:MPI::Datatype	signature:(int count, int blocklength, MPI::Aint stride) const
Create_indexed	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_indexed(int count,$/;"	p	class:Datatype	access:public	signature:(int count, const int array_of_blocklengths[], const int array_of_displacements[]) const
Create_indexed	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_indexed(int count,$/;"	f	class:MPI::Datatype	signature:(int count, const int array_of_blocklengths[], const int array_of_displacements[]) const
Create_indexed_block	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_indexed_block(int count, int blocklength,$/;"	p	class:Datatype	access:public	signature:(int count, int blocklength, const int array_of_blocklengths[]) const
Create_indexed_block	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_indexed_block(int count, int blocklength,$/;"	f	class:MPI::Datatype	signature:(int count, int blocklength, const int array_of_displacements[]) const
Create_intercomm	openmpi/ompi/mpi/cxx/intracomm.h	/^  Create_intercomm(int local_leader, const Comm& peer_comm,$/;"	p	class:Intracomm	access:public	signature:(int local_leader, const Comm& peer_comm, int remote_leader, int tag) const
Create_intercomm	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Create_intercomm(int local_leader,$/;"	f	class:MPI::Intracomm	signature:(int local_leader, const MPI::Comm& peer_comm, int remote_leader, int tag) const
Create_keyval	openmpi/ompi/mpi/cxx/comm.h	/^  static int Create_keyval(Copy_attr_function* comm_copy_attr_fn,$/;"	p	class:Comm	access:public	signature:(Copy_attr_function* comm_copy_attr_fn, Delete_attr_function* comm_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/comm.h	/^  static int Create_keyval(Copy_attr_function* comm_copy_attr_fn,$/;"	p	class:Comm	access:public	signature:(Copy_attr_function* comm_copy_attr_fn, MPI_Comm_delete_attr_function* comm_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/comm.h	/^  static int Create_keyval(MPI_Comm_copy_attr_function* comm_copy_attr_fn,$/;"	p	class:Comm	access:public	signature:(MPI_Comm_copy_attr_function* comm_copy_attr_fn, Delete_attr_function* comm_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/comm.h	/^  static int Create_keyval(MPI_Comm_copy_attr_function* comm_copy_attr_fn,$/;"	p	class:Comm	access:public	signature:(MPI_Comm_copy_attr_function* comm_copy_attr_fn, MPI_Comm_delete_attr_function* comm_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Create_keyval(MPI::Comm::Copy_attr_function* comm_copy_attr_fn,$/;"	f	class:MPI::Comm	signature:(MPI::Comm::Copy_attr_function* comm_copy_attr_fn, MPI::Comm::Delete_attr_function* comm_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Create_keyval(MPI::Comm::Copy_attr_function* comm_copy_attr_fn,$/;"	f	class:MPI::Comm	signature:(MPI::Comm::Copy_attr_function* comm_copy_attr_fn, MPI_Comm_delete_attr_function* comm_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Create_keyval(MPI_Comm_copy_attr_function* comm_copy_attr_fn,$/;"	f	class:MPI::Comm	signature:(MPI_Comm_copy_attr_function* comm_copy_attr_fn, MPI::Comm::Delete_attr_function* comm_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Create_keyval(MPI_Comm_copy_attr_function* comm_copy_attr_fn,$/;"	f	class:MPI::Comm	signature:(MPI_Comm_copy_attr_function* comm_copy_attr_fn, MPI_Comm_delete_attr_function* comm_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/datatype.h	/^  static int Create_keyval(Copy_attr_function* type_copy_attr_fn,$/;"	p	class:Datatype	access:public	signature:(Copy_attr_function* type_copy_attr_fn, Delete_attr_function* type_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/datatype.h	/^  static int Create_keyval(Copy_attr_function* type_copy_attr_fn,$/;"	p	class:Datatype	access:public	signature:(Copy_attr_function* type_copy_attr_fn, MPI_Type_delete_attr_function* type_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/datatype.h	/^  static int Create_keyval(MPI_Type_copy_attr_function* type_copy_attr_fn,$/;"	p	class:Datatype	access:public	signature:(MPI_Type_copy_attr_function* type_copy_attr_fn, Delete_attr_function* type_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/datatype.h	/^  static int Create_keyval(MPI_Type_copy_attr_function* type_copy_attr_fn,$/;"	p	class:Datatype	access:public	signature:(MPI_Type_copy_attr_function* type_copy_attr_fn, MPI_Type_delete_attr_function* type_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_keyval(MPI::Datatype::Copy_attr_function* type_copy_attr_fn,$/;"	f	class:MPI::Datatype	signature:(MPI::Datatype::Copy_attr_function* type_copy_attr_fn, MPI::Datatype::Delete_attr_function* type_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_keyval(MPI::Datatype::Copy_attr_function* type_copy_attr_fn,$/;"	f	class:MPI::Datatype	signature:(MPI::Datatype::Copy_attr_function* type_copy_attr_fn, MPI_Type_delete_attr_function* type_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_keyval(MPI_Type_copy_attr_function* type_copy_attr_fn,$/;"	f	class:MPI::Datatype	signature:(MPI_Type_copy_attr_function* type_copy_attr_fn, MPI::Datatype::Delete_attr_function* type_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_keyval(MPI_Type_copy_attr_function* type_copy_attr_fn,$/;"	f	class:MPI::Datatype	signature:(MPI_Type_copy_attr_function* type_copy_attr_fn, MPI_Type_delete_attr_function* type_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/win.h	/^  static int Create_keyval(Copy_attr_function* win_copy_attr_fn, $/;"	p	class:Win	access:public	signature:(Copy_attr_function* win_copy_attr_fn, Delete_attr_function* win_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/win.h	/^  static int Create_keyval(Copy_attr_function* win_copy_attr_fn, $/;"	p	class:Win	access:public	signature:(Copy_attr_function* win_copy_attr_fn, MPI_Win_delete_attr_function* win_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/win.h	/^  static int Create_keyval(MPI_Win_copy_attr_function* win_copy_attr_fn, $/;"	p	class:Win	access:public	signature:(MPI_Win_copy_attr_function* win_copy_attr_fn, Delete_attr_function* win_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/win.h	/^  static int Create_keyval(MPI_Win_copy_attr_function* win_copy_attr_fn, $/;"	p	class:Win	access:public	signature:(MPI_Win_copy_attr_function* win_copy_attr_fn, MPI_Win_delete_attr_function* win_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create_keyval(MPI::Win::Copy_attr_function* win_copy_attr_fn,$/;"	f	class:MPI::Win	signature:(MPI::Win::Copy_attr_function* win_copy_attr_fn, MPI::Win::Delete_attr_function* win_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create_keyval(MPI::Win::Copy_attr_function* win_copy_attr_fn,$/;"	f	class:MPI::Win	signature:(MPI::Win::Copy_attr_function* win_copy_attr_fn, MPI_Win_delete_attr_function* win_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create_keyval(MPI_Win_copy_attr_function* win_copy_attr_fn,$/;"	f	class:MPI::Win	signature:(MPI_Win_copy_attr_function* win_copy_attr_fn, MPI::Win::Delete_attr_function* win_delete_attr_fn, void* extra_state)
Create_keyval	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create_keyval(MPI_Win_copy_attr_function* win_copy_attr_fn,$/;"	f	class:MPI::Win	signature:(MPI_Win_copy_attr_function* win_copy_attr_fn, MPI_Win_delete_attr_function* win_delete_attr_fn, void* extra_state)
Create_resized	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_resized(const Aint lb, const Aint extent) const;$/;"	p	class:Datatype	access:public	signature:(const Aint lb, const Aint extent) const
Create_resized	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_resized(const MPI::Aint lb, const MPI::Aint extent) const$/;"	f	class:MPI::Datatype	signature:(const MPI::Aint lb, const MPI::Aint extent) const
Create_struct	openmpi/ompi/mpi/cxx/datatype.h	/^  static Datatype Create_struct(int count, const int array_of_blocklengths[],$/;"	p	class:Datatype	access:public	signature:(int count, const int array_of_blocklengths[], const Aint array_of_displacements[], const Datatype array_if_types[])
Create_struct	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_struct(int count, const int array_of_blocklengths[],$/;"	f	class:MPI::Datatype	signature:(int count, const int array_of_blocklengths[], const MPI::Aint array_of_displacements[], const MPI::Datatype array_of_types[])
Create_subarray	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_subarray(int ndims, const int array_of_sizes[],$/;"	p	class:Datatype	access:public	signature:(int ndims, const int array_of_sizes[], const int array_of_subsizes[], const int array_of_starts[], int order) const
Create_subarray	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_subarray(int ndims, const int array_of_sizes[],$/;"	f	class:MPI::Datatype	signature:(int ndims, const int array_of_sizes[], const int array_of_subsizes[], const int array_of_starts[], int order) const
Create_vector	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_vector(int count, int blocklength,$/;"	p	class:Datatype	access:public	signature:(int count, int blocklength, int stride) const
Create_vector	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_vector(int count, int blocklength,$/;"	f	class:MPI::Datatype	signature:(int count, int blocklength, int stride) const
DATATYPE_NULL	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype     DATATYPE_NULL;$/;"	x
DISPLACEMENT_CURRENT	openmpi/ompi/mpi/cxx/constants.h	/^static const int DISPLACEMENT_CURRENT = MPI_DISPLACEMENT_CURRENT;$/;"	v
DISTRIBUTE_BLOCK	openmpi/ompi/mpi/cxx/constants.h	/^static const int DISTRIBUTE_BLOCK = MPI_DISTRIBUTE_BLOCK;$/;"	v
DISTRIBUTE_CYCLIC	openmpi/ompi/mpi/cxx/constants.h	/^static const int DISTRIBUTE_CYCLIC = MPI_DISTRIBUTE_CYCLIC;$/;"	v
DISTRIBUTE_DFLT_DARG	openmpi/ompi/mpi/cxx/constants.h	/^static const int DISTRIBUTE_DFLT_DARG = MPI_DISTRIBUTE_DFLT_DARG;$/;"	v
DISTRIBUTE_NONE	openmpi/ompi/mpi/cxx/constants.h	/^static const int DISTRIBUTE_NONE = MPI_DISTRIBUTE_NONE;$/;"	v
DOUBLE	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype DOUBLE;$/;"	x
DOUBLE_COMPLEX	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype DOUBLE_COMPLEX;$/;"	x
DOUBLE_INT	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype DOUBLE_INT;$/;"	x
DOUBLE_PRECISION	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype DOUBLE_PRECISION;$/;"	x
DUP_FN	openmpi/ompi/mpi/cxx/comm.h	/^  static int DUP_FN(const Comm& oldcomm, int comm_keyval,$/;"	p	class:Comm	access:public	signature:(const Comm& oldcomm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, bool& flag)
DUP_FN	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::DUP_FN(const MPI::Comm& oldcomm, int comm_keyval,$/;"	f	class:MPI::Comm	signature:(const MPI::Comm& oldcomm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, bool& flag)
Datarep_conversion_function	openmpi/ompi/mpi/cxx/file.h	/^typedef void Datarep_conversion_function(void* userbuf, Datatype& datatype, $/;"	t
Datarep_extent_function	openmpi/ompi/mpi/cxx/file.h	/^typedef void Datarep_extent_function(const Datatype& datatype, $/;"	t
Datatype	openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype() : mpi_datatype(MPI_DATATYPE_NULL) { }$/;"	f	class:Datatype	access:public	signature:()
Datatype	openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype(MPI_Datatype i) : mpi_datatype(i) { }$/;"	f	class:Datatype	access:public	signature:(MPI_Datatype i)
Datatype	openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype(const Datatype& dt) : mpi_datatype(dt.mpi_datatype) { }$/;"	f	class:Datatype	access:public	signature:(const Datatype& dt)
Datatype	openmpi/ompi/mpi/cxx/datatype.h	/^class Datatype {$/;"	c
Datatype	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Datatype;$/;"	x
Datatype::Commit	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Commit();$/;"	p	class:Datatype	access:public	signature:()
Datatype::Copy_attr_function	openmpi/ompi/mpi/cxx/datatype.h	/^  typedef int Copy_attr_function(const Datatype& oldtype,$/;"	t	class:Datatype	access:public
Datatype::Create_contiguous	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_contiguous(int count) const;$/;"	p	class:Datatype	access:public	signature:(int count) const
Datatype::Create_darray	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_darray(int size, int rank, int ndims,$/;"	p	class:Datatype	access:public	signature:(int size, int rank, int ndims, const int array_of_gsizes[], const int array_of_distribs[], const int array_of_dargs[], const int array_of_psizes[], int order) const
Datatype::Create_f90_complex	openmpi/ompi/mpi/cxx/datatype.h	/^  static Datatype Create_f90_complex(int p, int r);$/;"	p	class:Datatype	access:public	signature:(int p, int r)
Datatype::Create_f90_integer	openmpi/ompi/mpi/cxx/datatype.h	/^  static Datatype Create_f90_integer(int r);$/;"	p	class:Datatype	access:public	signature:(int r)
Datatype::Create_f90_real	openmpi/ompi/mpi/cxx/datatype.h	/^  static Datatype Create_f90_real(int p, int r);$/;"	p	class:Datatype	access:public	signature:(int p, int r)
Datatype::Create_hindexed	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_hindexed(int count, const int array_of_blocklengths[],$/;"	p	class:Datatype	access:public	signature:(int count, const int array_of_blocklengths[], const Aint array_of_displacements[]) const
Datatype::Create_hvector	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_hvector(int count, int blocklength, Aint stride) const;$/;"	p	class:Datatype	access:public	signature:(int count, int blocklength, Aint stride) const
Datatype::Create_indexed	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_indexed(int count,$/;"	p	class:Datatype	access:public	signature:(int count, const int array_of_blocklengths[], const int array_of_displacements[]) const
Datatype::Create_indexed_block	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_indexed_block(int count, int blocklength,$/;"	p	class:Datatype	access:public	signature:(int count, int blocklength, const int array_of_blocklengths[]) const
Datatype::Create_keyval	openmpi/ompi/mpi/cxx/datatype.h	/^  static int Create_keyval(Copy_attr_function* type_copy_attr_fn,$/;"	p	class:Datatype	access:public	signature:(Copy_attr_function* type_copy_attr_fn, Delete_attr_function* type_delete_attr_fn, void* extra_state)
Datatype::Create_keyval	openmpi/ompi/mpi/cxx/datatype.h	/^  static int Create_keyval(Copy_attr_function* type_copy_attr_fn,$/;"	p	class:Datatype	access:public	signature:(Copy_attr_function* type_copy_attr_fn, MPI_Type_delete_attr_function* type_delete_attr_fn, void* extra_state)
Datatype::Create_keyval	openmpi/ompi/mpi/cxx/datatype.h	/^  static int Create_keyval(MPI_Type_copy_attr_function* type_copy_attr_fn,$/;"	p	class:Datatype	access:public	signature:(MPI_Type_copy_attr_function* type_copy_attr_fn, Delete_attr_function* type_delete_attr_fn, void* extra_state)
Datatype::Create_keyval	openmpi/ompi/mpi/cxx/datatype.h	/^  static int Create_keyval(MPI_Type_copy_attr_function* type_copy_attr_fn,$/;"	p	class:Datatype	access:public	signature:(MPI_Type_copy_attr_function* type_copy_attr_fn, MPI_Type_delete_attr_function* type_delete_attr_fn, void* extra_state)
Datatype::Create_resized	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_resized(const Aint lb, const Aint extent) const;$/;"	p	class:Datatype	access:public	signature:(const Aint lb, const Aint extent) const
Datatype::Create_struct	openmpi/ompi/mpi/cxx/datatype.h	/^  static Datatype Create_struct(int count, const int array_of_blocklengths[],$/;"	p	class:Datatype	access:public	signature:(int count, const int array_of_blocklengths[], const Aint array_of_displacements[], const Datatype array_if_types[])
Datatype::Create_subarray	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_subarray(int ndims, const int array_of_sizes[],$/;"	p	class:Datatype	access:public	signature:(int ndims, const int array_of_sizes[], const int array_of_subsizes[], const int array_of_starts[], int order) const
Datatype::Create_vector	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Create_vector(int count, int blocklength,$/;"	p	class:Datatype	access:public	signature:(int count, int blocklength, int stride) const
Datatype::Datatype	openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype() : mpi_datatype(MPI_DATATYPE_NULL) { }$/;"	f	class:Datatype	access:public	signature:()
Datatype::Datatype	openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype(MPI_Datatype i) : mpi_datatype(i) { }$/;"	f	class:Datatype	access:public	signature:(MPI_Datatype i)
Datatype::Datatype	openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype(const Datatype& dt) : mpi_datatype(dt.mpi_datatype) { }$/;"	f	class:Datatype	access:public	signature:(const Datatype& dt)
Datatype::Delete_attr	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Delete_attr(int type_keyval);$/;"	p	class:Datatype	access:public	signature:(int type_keyval)
Datatype::Delete_attr_function	openmpi/ompi/mpi/cxx/datatype.h	/^  typedef int Delete_attr_function(Datatype& type, int type_keyval, $/;"	t	class:Datatype	access:public
Datatype::Dup	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Dup() const;$/;"	p	class:Datatype	access:public	signature:() const
Datatype::Free	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Free();$/;"	p	class:Datatype	access:public	signature:()
Datatype::Free_keyval	openmpi/ompi/mpi/cxx/datatype.h	/^  static void Free_keyval(int& type_keyval);$/;"	p	class:Datatype	access:public	signature:(int& type_keyval)
Datatype::Get_attr	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual bool Get_attr(int type_keyval, void* attribute_val) const;$/;"	p	class:Datatype	access:public	signature:(int type_keyval, void* attribute_val) const
Datatype::Get_contents	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_contents(int max_integers, int max_addresses,$/;"	p	class:Datatype	access:public	signature:(int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], Aint array_of_addresses[], Datatype array_of_datatypes[]) const
Datatype::Get_envelope	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_envelope(int& num_integers, int& num_addresses,$/;"	p	class:Datatype	access:public	signature:(int& num_integers, int& num_addresses, int& num_datatypes, int& combiner) const
Datatype::Get_extent	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_extent(Aint& lb, Aint& extent) const;$/;"	p	class:Datatype	access:public	signature:(Aint& lb, Aint& extent) const
Datatype::Get_name	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_name(char* type_name, int& resultlen) const;$/;"	p	class:Datatype	access:public	signature:(char* type_name, int& resultlen) const
Datatype::Get_size	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual int Get_size() const;$/;"	p	class:Datatype	access:public	signature:() const
Datatype::Get_true_extent	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_true_extent(Aint&, Aint&) const;$/;"	p	class:Datatype	access:public	signature:(Aint&, Aint&) const
Datatype::Match_size	openmpi/ompi/mpi/cxx/datatype.h	/^  static Datatype Match_size(int typeclass, int size);$/;"	p	class:Datatype	access:public	signature:(int typeclass, int size)
Datatype::Pack	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Pack(const void* inbuf, int incount, void *outbuf, $/;"	p	class:Datatype	access:public	signature:(const void* inbuf, int incount, void *outbuf, int outsize, int& position, const Comm &comm) const
Datatype::Pack_external	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Pack_external(const char* datarep, const void* inbuf, int incount,$/;"	p	class:Datatype	access:public	signature:(const char* datarep, const void* inbuf, int incount, void* outbuf, Aint outsize, Aint& position) const
Datatype::Pack_external_size	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Aint Pack_external_size(const char* datarep, int incount) const;$/;"	p	class:Datatype	access:public	signature:(const char* datarep, int incount) const
Datatype::Pack_size	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual int Pack_size(int incount, const Comm& comm) const;$/;"	p	class:Datatype	access:public	signature:(int incount, const Comm& comm) const
Datatype::Set_attr	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Set_attr(int type_keyval, const void* attribute_val);$/;"	p	class:Datatype	access:public	signature:(int type_keyval, const void* attribute_val)
Datatype::Set_name	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Set_name(const char* type_name);$/;"	p	class:Datatype	access:public	signature:(const char* type_name)
Datatype::Unpack	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Unpack(const void* inbuf, int insize, void *outbuf, int outcount,$/;"	p	class:Datatype	access:public	signature:(const void* inbuf, int insize, void *outbuf, int outcount, int& position, const Comm& comm) const
Datatype::Unpack_external	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Unpack_external(const char* datarep, const void* inbuf,$/;"	p	class:Datatype	access:public	signature:(const char* datarep, const void* inbuf, Aint insize, Aint& position, void* outbuf, int outcount) const
Datatype::cxx_extra_states_lock	openmpi/ompi/mpi/cxx/datatype.h	/^    static opal_mutex_t cxx_extra_states_lock;$/;"	m	class:Datatype	access:public
Datatype::do_create_keyval	openmpi/ompi/mpi/cxx/datatype.h	/^  static int do_create_keyval(MPI_Type_copy_attr_function* c_copy_fn,$/;"	p	class:Datatype	access:protected	signature:(MPI_Type_copy_attr_function* c_copy_fn, MPI_Type_delete_attr_function* c_delete_fn, Copy_attr_function* cxx_copy_fn, Delete_attr_function* cxx_delete_fn, void* extra_state, int &keyval)
Datatype::keyval_intercept_data_t	openmpi/ompi/mpi/cxx/datatype.h	/^    struct keyval_intercept_data_t {$/;"	s	class:Datatype	access:public
Datatype::keyval_intercept_data_t::c_copy_fn	openmpi/ompi/mpi/cxx/datatype.h	/^        MPI_Type_copy_attr_function *c_copy_fn;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
Datatype::keyval_intercept_data_t::c_delete_fn	openmpi/ompi/mpi/cxx/datatype.h	/^        MPI_Type_delete_attr_function *c_delete_fn;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
Datatype::keyval_intercept_data_t::cxx_copy_fn	openmpi/ompi/mpi/cxx/datatype.h	/^        Copy_attr_function* cxx_copy_fn;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
Datatype::keyval_intercept_data_t::cxx_delete_fn	openmpi/ompi/mpi/cxx/datatype.h	/^        Delete_attr_function* cxx_delete_fn;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
Datatype::keyval_intercept_data_t::extra_state	openmpi/ompi/mpi/cxx/datatype.h	/^        void *extra_state;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
Datatype::mpi_datatype	openmpi/ompi/mpi/cxx/datatype.h	/^  MPI_Datatype mpi_datatype;$/;"	m	class:Datatype	access:protected
Datatype::operator !=	openmpi/ompi/mpi/cxx/datatype.h	/^  inline bool operator!= (const Datatype &a) const$/;"	f	class:Datatype	access:public	signature:(const Datatype &a) const
Datatype::operator =	openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype& operator= (const MPI_Datatype &i) $/;"	f	class:Datatype	access:public	signature:(const MPI_Datatype &i)
Datatype::operator =	openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype& operator=(const Datatype& dt) {$/;"	f	class:Datatype	access:public	signature:(const Datatype& dt)
Datatype::operator ==	openmpi/ompi/mpi/cxx/datatype.h	/^  inline bool operator== (const Datatype &a) const$/;"	f	class:Datatype	access:public	signature:(const Datatype &a) const
Datatype::operator MPI_Datatype	openmpi/ompi/mpi/cxx/datatype.h	/^  inline operator MPI_Datatype () const { return mpi_datatype; }$/;"	f	class:Datatype	access:public	signature:() const
Datatype::~Datatype	openmpi/ompi/mpi/cxx/datatype.h	/^  inline virtual ~Datatype() {}$/;"	f	class:Datatype	access:public	signature:()
Delete	openmpi/ompi/mpi/cxx/file.h	/^  static void Delete(const char* filename, const MPI::Info& info);$/;"	p	class:File	access:public	signature:(const char* filename, const MPI::Info& info)
Delete	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Delete(const char* filename, const MPI::Info& info) $/;"	f	class:MPI::File	signature:(const char* filename, const MPI::Info& info)
Delete	openmpi/ompi/mpi/cxx/info.h	/^  virtual void Delete(const char* key);$/;"	p	class:Info	access:public	signature:(const char* key)
Delete	openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Delete(const char* key)$/;"	f	class:MPI::Info	signature:(const char* key)
Delete_attr	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Delete_attr(int comm_keyval);$/;"	p	class:Comm	access:public	signature:(int comm_keyval)
Delete_attr	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Delete_attr(int comm_keyval)$/;"	f	class:MPI::Comm	signature:(int comm_keyval)
Delete_attr	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Delete_attr(int type_keyval);$/;"	p	class:Datatype	access:public	signature:(int type_keyval)
Delete_attr	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Delete_attr(int type_keyval)$/;"	f	class:MPI::Datatype	signature:(int type_keyval)
Delete_attr	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Delete_attr(int win_keyval);$/;"	p	class:Win	access:public	signature:(int win_keyval)
Delete_attr	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Delete_attr(int win_keyval) $/;"	f	class:MPI::Win	signature:(int win_keyval)
Delete_attr_function	openmpi/ompi/mpi/cxx/comm.h	/^  typedef int Delete_attr_function(Comm& comm, int comm_keyval, $/;"	t	class:Comm	access:public
Delete_attr_function	openmpi/ompi/mpi/cxx/datatype.h	/^  typedef int Delete_attr_function(Datatype& type, int type_keyval, $/;"	t	class:Datatype	access:public
Delete_attr_function	openmpi/ompi/mpi/cxx/win.h	/^  typedef int Delete_attr_function(Win& win, int win_keyval, $/;"	t	class:Win	access:public
Detach_buffer	openmpi/ompi/mpi/cxx/functions.h	/^Detach_buffer(void*& buffer);$/;"	p	signature:(void*& buffer)
Detach_buffer	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Detach_buffer(void*& buffer)$/;"	f	class:MPI	signature:(void*& buffer)
Difference	openmpi/ompi/mpi/cxx/group.h	/^  static Group Difference(const Group &group1, const Group &group2);$/;"	p	class:Group	access:public	signature:(const Group &group1, const Group &group2)
Difference	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Difference(const MPI::Group &group1, const MPI::Group &group2)$/;"	f	class:MPI::Group	signature:(const MPI::Group &group1, const MPI::Group &group2)
Disconnect	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Disconnect();$/;"	p	class:Comm	access:public	signature:()
Disconnect	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Disconnect()$/;"	f	class:MPI::Comm	signature:()
Dup	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Datatype Dup() const;$/;"	p	class:Datatype	access:public	signature:() const
Dup	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Dup() const$/;"	f	class:MPI::Datatype	signature:() const
Dup	openmpi/ompi/mpi/cxx/info.h	/^  virtual Info Dup() const; $/;"	p	class:Info	access:public	signature:() const
Dup	openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Dup() const$/;"	f	class:MPI::Info	signature:() const
Dup	openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm Dup() const;$/;"	p	class:Intercomm	access:public	signature:() const
Dup	openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Dup() const$/;"	f	class:MPI::Intercomm	signature:() const
Dup	openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm Dup() const;$/;"	p	class:Intracomm	access:public	signature:() const
Dup	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Dup() const$/;"	f	class:MPI::Intracomm	signature:() const
Dup	openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm Dup() const;$/;"	p	class:Cartcomm	access:public	signature:() const
Dup	openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm Dup() const;$/;"	p	class:Graphcomm	access:public	signature:() const
Dup	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Dup() const$/;"	f	class:MPI::Cartcomm	signature:() const
Dup	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Dup() const$/;"	f	class:MPI::Graphcomm	signature:() const
ERRHANDLER_NULL	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Errhandler   ERRHANDLER_NULL;  $/;"	x
ERRORS_ARE_FATAL	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Errhandler  ERRORS_ARE_FATAL;$/;"	x
ERRORS_RETURN	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Errhandler  ERRORS_RETURN;$/;"	x
ERRORS_THROW_EXCEPTIONS	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Errhandler  ERRORS_THROW_EXCEPTIONS;$/;"	x
ERR_ACCESS	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_ACCESS = MPI_ERR_ACCESS;$/;"	v
ERR_AMODE	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_AMODE = MPI_ERR_AMODE;$/;"	v
ERR_ARG	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_ARG = MPI_ERR_ARG;$/;"	v
ERR_ASSERT	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_ASSERT = MPI_ERR_ASSERT;$/;"	v
ERR_BAD_FILE	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_BAD_FILE = MPI_ERR_BAD_FILE;$/;"	v
ERR_BASE	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_BASE = MPI_ERR_BASE;$/;"	v
ERR_BUFFER	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_BUFFER = MPI_ERR_BUFFER;$/;"	v
ERR_COMM	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_COMM = MPI_ERR_COMM;$/;"	v
ERR_CONVERSION	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_CONVERSION = MPI_ERR_CONVERSION;$/;"	v
ERR_COUNT	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_COUNT = MPI_ERR_COUNT;$/;"	v
ERR_DIMS	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_DIMS = MPI_ERR_DIMS;$/;"	v
ERR_DISP	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_DISP = MPI_ERR_DISP;$/;"	v
ERR_DUP_DATAREP	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_DUP_DATAREP = MPI_ERR_DUP_DATAREP;$/;"	v
ERR_FILE	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_FILE = MPI_ERR_FILE;$/;"	v
ERR_FILE_EXISTS	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_FILE_EXISTS = MPI_ERR_FILE_EXISTS;$/;"	v
ERR_FILE_IN_USE	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_FILE_IN_USE = MPI_ERR_FILE_IN_USE;$/;"	v
ERR_GROUP	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_GROUP = MPI_ERR_GROUP;$/;"	v
ERR_INFO	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_INFO = MPI_ERR_INFO;$/;"	v
ERR_INFO_KEY	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_INFO_KEY = MPI_ERR_INFO_KEY;$/;"	v
ERR_INFO_NOKEY	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_INFO_NOKEY = MPI_ERR_INFO_NOKEY;$/;"	v
ERR_INFO_VALUE	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_INFO_VALUE = MPI_ERR_INFO_VALUE;$/;"	v
ERR_INTERN	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_INTERN = MPI_ERR_INTERN;$/;"	v
ERR_IN_STATUS	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_IN_STATUS = MPI_ERR_IN_STATUS;$/;"	v
ERR_IO	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_IO = MPI_ERR_IO;$/;"	v
ERR_KEYVAL	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_KEYVAL = MPI_ERR_KEYVAL;$/;"	v
ERR_LASTCODE	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_LASTCODE = MPI_ERR_LASTCODE;$/;"	v
ERR_LOCKTYPE	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_LOCKTYPE = MPI_ERR_LOCKTYPE;$/;"	v
ERR_NAME	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_NAME = MPI_ERR_NAME;$/;"	v
ERR_NOT_SAME	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_NOT_SAME = MPI_ERR_NOT_SAME;$/;"	v
ERR_NO_MEM	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_NO_MEM = MPI_ERR_NO_MEM;$/;"	v
ERR_NO_SPACE	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_NO_SPACE = MPI_ERR_NO_SPACE;$/;"	v
ERR_NO_SUCH_FILE	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_NO_SUCH_FILE = MPI_ERR_NO_SUCH_FILE;$/;"	v
ERR_OP	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_OP = MPI_ERR_OP;$/;"	v
ERR_OTHER	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_OTHER = MPI_ERR_OTHER;$/;"	v
ERR_PENDING	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_PENDING = MPI_ERR_PENDING;$/;"	v
ERR_PORT	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_PORT = MPI_ERR_PORT;$/;"	v
ERR_QUOTA	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_QUOTA = MPI_ERR_QUOTA;$/;"	v
ERR_RANK	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_RANK = MPI_ERR_RANK;$/;"	v
ERR_READ_ONLY	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_READ_ONLY = MPI_ERR_READ_ONLY;$/;"	v
ERR_REQUEST	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_REQUEST = MPI_ERR_REQUEST;$/;"	v
ERR_RMA_CONFLICT	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_RMA_CONFLICT = MPI_ERR_RMA_CONFLICT;$/;"	v
ERR_RMA_SYNC	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_RMA_SYNC = MPI_ERR_RMA_SYNC;$/;"	v
ERR_ROOT	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_ROOT = MPI_ERR_ROOT;$/;"	v
ERR_SERVICE	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_SERVICE = MPI_ERR_SERVICE;$/;"	v
ERR_SIZE	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_SIZE = MPI_ERR_SIZE;$/;"	v
ERR_SPAWN	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_SPAWN = MPI_ERR_SPAWN;$/;"	v
ERR_TAG	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_TAG  = MPI_ERR_TAG ;$/;"	v
ERR_TOPOLOGY	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_TOPOLOGY = MPI_ERR_TOPOLOGY;$/;"	v
ERR_TRUNCATE	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_TRUNCATE = MPI_ERR_TRUNCATE;$/;"	v
ERR_TYPE	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_TYPE = MPI_ERR_TYPE;$/;"	v
ERR_UNKNOWN	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_UNKNOWN = MPI_ERR_UNKNOWN;$/;"	v
ERR_UNSUPPORTED_DATAREP	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_UNSUPPORTED_DATAREP = MPI_ERR_UNSUPPORTED_DATAREP;$/;"	v
ERR_UNSUPPORTED_OPERATION	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_UNSUPPORTED_OPERATION = MPI_ERR_UNSUPPORTED_OPERATION;$/;"	v
ERR_WIN	openmpi/ompi/mpi/cxx/constants.h	/^static const int ERR_WIN = MPI_ERR_WIN;$/;"	v
Errhandler	openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler()$/;"	f	class:Errhandler	access:public	signature:()
Errhandler	openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler(MPI_Errhandler i)$/;"	f	class:Errhandler	access:public	signature:(MPI_Errhandler i)
Errhandler	openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler(const Errhandler& e) : mpi_errhandler(e.mpi_errhandler) { }$/;"	f	class:Errhandler	access:public	signature:(const Errhandler& e)
Errhandler	openmpi/ompi/mpi/cxx/errhandler.h	/^class Errhandler {$/;"	c
Errhandler	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Errhandler;$/;"	x
Errhandler::Errhandler	openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler()$/;"	f	class:Errhandler	access:public	signature:()
Errhandler::Errhandler	openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler(MPI_Errhandler i)$/;"	f	class:Errhandler	access:public	signature:(MPI_Errhandler i)
Errhandler::Errhandler	openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler(const Errhandler& e) : mpi_errhandler(e.mpi_errhandler) { }$/;"	f	class:Errhandler	access:public	signature:(const Errhandler& e)
Errhandler::Free	openmpi/ompi/mpi/cxx/errhandler.h	/^  virtual void Free();$/;"	p	class:Errhandler	access:public	signature:()
Errhandler::mpi_errhandler	openmpi/ompi/mpi/cxx/errhandler.h	/^  MPI_Errhandler mpi_errhandler;$/;"	m	class:Errhandler	access:private
Errhandler::operator !=	openmpi/ompi/mpi/cxx/errhandler.h	/^  inline bool operator!=(const Errhandler &a) {$/;"	f	class:Errhandler	access:public	signature:(const Errhandler &a)
Errhandler::operator =	openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler& operator= (const MPI_Errhandler &i) {$/;"	f	class:Errhandler	access:public	signature:(const MPI_Errhandler &i)
Errhandler::operator =	openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler& operator=(const Errhandler& e) {$/;"	f	class:Errhandler	access:public	signature:(const Errhandler& e)
Errhandler::operator ==	openmpi/ompi/mpi/cxx/errhandler.h	/^  inline bool operator==(const Errhandler &a) {$/;"	f	class:Errhandler	access:public	signature:(const Errhandler &a)
Errhandler::operator MPI_Errhandler	openmpi/ompi/mpi/cxx/errhandler.h	/^  inline operator MPI_Errhandler() const { return mpi_errhandler; }$/;"	f	class:Errhandler	access:public	signature:() const
Errhandler::~Errhandler	openmpi/ompi/mpi/cxx/errhandler.h	/^  inline virtual ~Errhandler() { }$/;"	f	class:Errhandler	access:public	signature:()
Errhandler_function	openmpi/ompi/mpi/cxx/comm.h	/^  typedef void Errhandler_function(Comm&, int*, ...);$/;"	t	class:Comm	access:public
Errhandler_function	openmpi/ompi/mpi/cxx/file.h	/^  typedef void Errhandler_function(MPI::File &, int *, ... );$/;"	t	class:File	access:public
Errhandler_function	openmpi/ompi/mpi/cxx/win.h	/^  typedef void Errhandler_function(Win &, int *, ... );$/;"	t	class:Win	access:public
Exception	openmpi/ompi/mpi/cxx/exception.h	/^  inline Exception(const Exception& a)$/;"	f	class:Exception	access:public	signature:(const Exception& a)
Exception	openmpi/ompi/mpi/cxx/exception.h	/^  inline Exception(int ec) : error_code(ec), error_string(0), error_class(-1) {$/;"	f	class:Exception	access:public	signature:(int ec)
Exception	openmpi/ompi/mpi/cxx/exception.h	/^class Exception {$/;"	c
Exception::Exception	openmpi/ompi/mpi/cxx/exception.h	/^  inline Exception(const Exception& a)$/;"	f	class:Exception	access:public	signature:(const Exception& a)
Exception::Exception	openmpi/ompi/mpi/cxx/exception.h	/^  inline Exception(int ec) : error_code(ec), error_string(0), error_class(-1) {$/;"	f	class:Exception	access:public	signature:(int ec)
Exception::Get_error_class	openmpi/ompi/mpi/cxx/exception.h	/^  inline int Get_error_class() const { return error_class; }$/;"	f	class:Exception	access:public	signature:() const
Exception::Get_error_code	openmpi/ompi/mpi/cxx/exception.h	/^  inline int Get_error_code() const { return error_code; }$/;"	f	class:Exception	access:public	signature:() const
Exception::Get_error_string	openmpi/ompi/mpi/cxx/exception.h	/^  inline const char* Get_error_string() const { return error_string; }$/;"	f	class:Exception	access:public	signature:() const
Exception::error_class	openmpi/ompi/mpi/cxx/exception.h	/^  int error_class;$/;"	m	class:Exception	access:protected
Exception::error_code	openmpi/ompi/mpi/cxx/exception.h	/^  int error_code;$/;"	m	class:Exception	access:protected
Exception::error_string	openmpi/ompi/mpi/cxx/exception.h	/^  char* error_string;$/;"	m	class:Exception	access:protected
Exception::~Exception	openmpi/ompi/mpi/cxx/exception.h	/^  inline ~Exception() {$/;"	f	class:Exception	access:public	signature:()
Excl	openmpi/ompi/mpi/cxx/group.h	/^  virtual Group Excl(int n, const int ranks[]) const;$/;"	p	class:Group	access:public	signature:(int n, const int ranks[]) const
Excl	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Excl(int n, const int ranks[]) const$/;"	f	class:MPI::Group	signature:(int n, const int ranks[]) const
Exscan	openmpi/ompi/mpi/cxx/intracomm.h	/^  Exscan(const void *sendbuf, void *recvbuf, int count,$/;"	p	class:Intracomm	access:public	signature:(const void *sendbuf, void *recvbuf, int count, const Datatype & datatype, const Op & op) const
Exscan	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Exscan(const void *sendbuf, void *recvbuf, int count,$/;"	f	class:MPI::Intracomm	signature:(const void *sendbuf, void *recvbuf, int count, const MPI::Datatype & datatype, const MPI::Op& op) const
FILE_NULL	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const File         FILE_NULL;$/;"	x
FLOAT	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype FLOAT;$/;"	x
FLOAT_INT	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype FLOAT_INT;$/;"	x
F_COMPLEX	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype F_COMPLEX;$/;"	x
F_DOUBLE_COMPLEX	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype F_DOUBLE_COMPLEX;$/;"	x
Fence	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Fence(int assert) const;$/;"	p	class:Win	access:public	signature:(int assert) const
Fence	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Fence(int assert) const $/;"	f	class:MPI::Win	signature:(int assert) const
File	openmpi/ompi/mpi/cxx/file.h	/^  File() : mpi_file(MPI_FILE_NULL) { }$/;"	f	class:File	access:public	signature:()
File	openmpi/ompi/mpi/cxx/file.h	/^  File(MPI_File i) : mpi_file(i) { }$/;"	f	class:File	access:public	signature:(MPI_File i)
File	openmpi/ompi/mpi/cxx/file.h	/^  File(const File& data) : mpi_file(data.mpi_file) { }$/;"	f	class:File	access:public	signature:(const File& data)
File	openmpi/ompi/mpi/cxx/file.h	/^class File {$/;"	c
File	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class File;$/;"	x
File::Call_errhandler	openmpi/ompi/mpi/cxx/file.h	/^  void Call_errhandler(int errorcode) const;$/;"	p	class:File	access:public	signature:(int errorcode) const
File::Close	openmpi/ompi/mpi/cxx/file.h	/^  void Close();$/;"	p	class:File	access:public	signature:()
File::Create_errhandler	openmpi/ompi/mpi/cxx/file.h	/^  static MPI::Errhandler Create_errhandler(Errhandler_function* function); $/;"	p	class:File	access:public	signature:(Errhandler_function* function)
File::Delete	openmpi/ompi/mpi/cxx/file.h	/^  static void Delete(const char* filename, const MPI::Info& info);$/;"	p	class:File	access:public	signature:(const char* filename, const MPI::Info& info)
File::Errhandler_function	openmpi/ompi/mpi/cxx/file.h	/^  typedef void Errhandler_function(MPI::File &, int *, ... );$/;"	t	class:File	access:public
File::File	openmpi/ompi/mpi/cxx/file.h	/^  File() : mpi_file(MPI_FILE_NULL) { }$/;"	f	class:File	access:public	signature:()
File::File	openmpi/ompi/mpi/cxx/file.h	/^  File(MPI_File i) : mpi_file(i) { }$/;"	f	class:File	access:public	signature:(MPI_File i)
File::File	openmpi/ompi/mpi/cxx/file.h	/^  File(const File& data) : mpi_file(data.mpi_file) { }$/;"	f	class:File	access:public	signature:(const File& data)
File::Get_amode	openmpi/ompi/mpi/cxx/file.h	/^  int Get_amode() const;$/;"	p	class:File	access:public	signature:() const
File::Get_atomicity	openmpi/ompi/mpi/cxx/file.h	/^  bool Get_atomicity() const;$/;"	p	class:File	access:public	signature:() const
File::Get_byte_offset	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Offset Get_byte_offset(const MPI::Offset disp) const;$/;"	p	class:File	access:public	signature:(const MPI::Offset disp) const
File::Get_errhandler	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Errhandler Get_errhandler() const;$/;"	p	class:File	access:public	signature:() const
File::Get_group	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Group Get_group() const;$/;"	p	class:File	access:public	signature:() const
File::Get_info	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Info Get_info() const;$/;"	p	class:File	access:public	signature:() const
File::Get_position	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Offset Get_position() const;$/;"	p	class:File	access:public	signature:() const
File::Get_position_shared	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Offset Get_position_shared() const;$/;"	p	class:File	access:public	signature:() const
File::Get_size	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Offset Get_size() const;$/;"	p	class:File	access:public	signature:() const
File::Get_type_extent	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Aint Get_type_extent(const MPI::Datatype& datatype) const;$/;"	p	class:File	access:public	signature:(const MPI::Datatype& datatype) const
File::Get_view	openmpi/ompi/mpi/cxx/file.h	/^  void Get_view(MPI::Offset& disp, MPI::Datatype& etype, $/;"	p	class:File	access:public	signature:(MPI::Offset& disp, MPI::Datatype& etype, MPI::Datatype& filetype, char* datarep) const
File::Iread	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iread(void* buf, int count, $/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
File::Iread_at	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iread_at(MPI::Offset offset, void* buf, int count, $/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
File::Iread_shared	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iread_shared(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
File::Iwrite	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iwrite(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
File::Iwrite_at	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iwrite_at(MPI::Offset offset, const void* buf, $/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
File::Iwrite_shared	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iwrite_shared(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
File::Open	openmpi/ompi/mpi/cxx/file.h	/^  static MPI::File Open(const MPI::Intracomm& comm,$/;"	p	class:File	access:public	signature:(const MPI::Intracomm& comm, const char* filename, int amode, const MPI::Info& info)
File::Preallocate	openmpi/ompi/mpi/cxx/file.h	/^  void Preallocate(MPI::Offset size);$/;"	p	class:File	access:public	signature:(MPI::Offset size)
File::Read	openmpi/ompi/mpi/cxx/file.h	/^  void Read(void* buf, int count, const MPI::Datatype& datatype);$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
File::Read	openmpi/ompi/mpi/cxx/file.h	/^  void Read(void* buf, int count, const MPI::Datatype& datatype,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Read_all	openmpi/ompi/mpi/cxx/file.h	/^  void Read_all(void* buf, int count, const MPI::Datatype& datatype);$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
File::Read_all	openmpi/ompi/mpi/cxx/file.h	/^  void Read_all(void* buf, int count, const MPI::Datatype& datatype,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Read_all_begin	openmpi/ompi/mpi/cxx/file.h	/^  void Read_all_begin(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
File::Read_all_end	openmpi/ompi/mpi/cxx/file.h	/^  void Read_all_end(void* buf);$/;"	p	class:File	access:public	signature:(void* buf)
File::Read_all_end	openmpi/ompi/mpi/cxx/file.h	/^  void Read_all_end(void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(void* buf, MPI::Status& status)
File::Read_at	openmpi/ompi/mpi/cxx/file.h	/^  void Read_at(MPI::Offset offset, $/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
File::Read_at	openmpi/ompi/mpi/cxx/file.h	/^  void Read_at(MPI::Offset offset, void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Read_at_all	openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all(MPI::Offset offset, void* buf, int count, $/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
File::Read_at_all	openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all(MPI::Offset offset, void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Read_at_all_begin	openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all_begin(MPI::Offset offset, void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
File::Read_at_all_end	openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all_end(void* buf);$/;"	p	class:File	access:public	signature:(void* buf)
File::Read_at_all_end	openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all_end(void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(void* buf, MPI::Status& status)
File::Read_ordered	openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
File::Read_ordered	openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Read_ordered_begin	openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered_begin(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
File::Read_ordered_end	openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered_end(void* buf);$/;"	p	class:File	access:public	signature:(void* buf)
File::Read_ordered_end	openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered_end(void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(void* buf, MPI::Status& status)
File::Read_shared	openmpi/ompi/mpi/cxx/file.h	/^  void Read_shared(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
File::Read_shared	openmpi/ompi/mpi/cxx/file.h	/^  void Read_shared(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Seek	openmpi/ompi/mpi/cxx/file.h	/^  void Seek(MPI::Offset offset, int whence);$/;"	p	class:File	access:public	signature:(MPI::Offset offset, int whence)
File::Seek_shared	openmpi/ompi/mpi/cxx/file.h	/^  void Seek_shared(MPI::Offset offset, int whence);$/;"	p	class:File	access:public	signature:(MPI::Offset offset, int whence)
File::Set_atomicity	openmpi/ompi/mpi/cxx/file.h	/^  void Set_atomicity(bool flag);$/;"	p	class:File	access:public	signature:(bool flag)
File::Set_errhandler	openmpi/ompi/mpi/cxx/file.h	/^  void Set_errhandler(const MPI::Errhandler& errhandler) const;$/;"	p	class:File	access:public	signature:(const MPI::Errhandler& errhandler) const
File::Set_info	openmpi/ompi/mpi/cxx/file.h	/^  void Set_info(const MPI::Info& info);$/;"	p	class:File	access:public	signature:(const MPI::Info& info)
File::Set_size	openmpi/ompi/mpi/cxx/file.h	/^  void Set_size(MPI::Offset size);$/;"	p	class:File	access:public	signature:(MPI::Offset size)
File::Set_view	openmpi/ompi/mpi/cxx/file.h	/^  void Set_view(MPI::Offset disp,  const MPI::Datatype& etype,$/;"	p	class:File	access:public	signature:(MPI::Offset disp, const MPI::Datatype& etype, const MPI::Datatype& filetype, const char* datarep, const MPI::Info& info)
File::Sync	openmpi/ompi/mpi/cxx/file.h	/^  void Sync();$/;"	p	class:File	access:public	signature:()
File::Write	openmpi/ompi/mpi/cxx/file.h	/^  void Write(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
File::Write	openmpi/ompi/mpi/cxx/file.h	/^  void Write(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Write_all	openmpi/ompi/mpi/cxx/file.h	/^  void Write_all(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
File::Write_all	openmpi/ompi/mpi/cxx/file.h	/^  void Write_all(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Write_all_begin	openmpi/ompi/mpi/cxx/file.h	/^  void Write_all_begin(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
File::Write_all_end	openmpi/ompi/mpi/cxx/file.h	/^  void Write_all_end(const void* buf);$/;"	p	class:File	access:public	signature:(const void* buf)
File::Write_all_end	openmpi/ompi/mpi/cxx/file.h	/^  void Write_all_end(const void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(const void* buf, MPI::Status& status)
File::Write_at	openmpi/ompi/mpi/cxx/file.h	/^  void Write_at(MPI::Offset offset,  const void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
File::Write_at	openmpi/ompi/mpi/cxx/file.h	/^  void Write_at(MPI::Offset offset,  const void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Write_at_all	openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all(MPI::Offset offset,  const void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
File::Write_at_all	openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all(MPI::Offset offset,  const void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Write_at_all_begin	openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all_begin(MPI::Offset offset, const void* buf,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
File::Write_at_all_end	openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all_end(const void* buf);$/;"	p	class:File	access:public	signature:(const void* buf)
File::Write_at_all_end	openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all_end(const void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(const void* buf, MPI::Status& status)
File::Write_ordered	openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
File::Write_ordered	openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::Write_ordered_begin	openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered_begin(const void* buf, int count, $/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
File::Write_ordered_end	openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered_end(const void* buf);$/;"	p	class:File	access:public	signature:(const void* buf)
File::Write_ordered_end	openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered_end(const void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(const void* buf, MPI::Status& status)
File::Write_shared	openmpi/ompi/mpi/cxx/file.h	/^  void Write_shared(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
File::Write_shared	openmpi/ompi/mpi/cxx/file.h	/^  void Write_shared(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
File::mpi_file	openmpi/ompi/mpi/cxx/file.h	/^  MPI_File mpi_file;$/;"	m	class:File	access:protected
File::operator =	openmpi/ompi/mpi/cxx/file.h	/^  File& operator= (const MPI_File &i) {$/;"	f	class:File	access:public	signature:(const MPI_File &i)
File::operator =	openmpi/ompi/mpi/cxx/file.h	/^  File& operator=(const File& data) {$/;"	f	class:File	access:public	signature:(const File& data)
File::operator MPI_File	openmpi/ompi/mpi/cxx/file.h	/^  operator MPI_File () const { return mpi_file; }$/;"	f	class:File	access:public	signature:() const
File::~File	openmpi/ompi/mpi/cxx/file.h	/^  virtual ~File() { }$/;"	f	class:File	access:public	signature:()
Finalize	openmpi/ompi/mpi/cxx/functions.h	/^Finalize();$/;"	p	signature:()
Finalize	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Finalize()$/;"	f	class:MPI	signature:()
Fint	openmpi/ompi/mpi/cxx/mpicxx.h	/^  typedef MPI_Fint Fint;$/;"	t	namespace:MPI
Free	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Free(void);$/;"	p	class:Comm	access:public	signature:(void)
Free	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Free(void) $/;"	f	class:MPI::Comm	signature:(void)
Free	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Free();$/;"	p	class:Datatype	access:public	signature:()
Free	openmpi/ompi/mpi/cxx/errhandler.h	/^  virtual void Free();$/;"	p	class:Errhandler	access:public	signature:()
Free	openmpi/ompi/mpi/cxx/errhandler_inln.h	/^MPI::Errhandler::Free()$/;"	f	class:MPI::Errhandler	signature:()
Free	openmpi/ompi/mpi/cxx/group.h	/^  virtual void Free();$/;"	p	class:Group	access:public	signature:()
Free	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Free()$/;"	f	class:MPI::Group	signature:()
Free	openmpi/ompi/mpi/cxx/info.h	/^  virtual void Free();$/;"	p	class:Info	access:public	signature:()
Free	openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Free()$/;"	f	class:MPI::Info	signature:()
Free	openmpi/ompi/mpi/cxx/op.h	/^  virtual void Free();$/;"	p	class:Op	access:public	signature:()
Free	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Free()$/;"	f	class:MPI::Op	signature:()
Free	openmpi/ompi/mpi/cxx/request.h	/^  virtual void Free(void);$/;"	p	class:Request	access:public	signature:(void)
Free	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Free() $/;"	f	class:MPI::Request	signature:()
Free	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Free(); $/;"	p	class:Win	access:public	signature:()
Free_function	openmpi/ompi/mpi/cxx/request.h	/^    typedef int Free_function(void *);$/;"	t	class:Grequest	access:public
Free_keyval	openmpi/ompi/mpi/cxx/comm.h	/^  static void Free_keyval(int& comm_keyval);$/;"	p	class:Comm	access:public	signature:(int& comm_keyval)
Free_keyval	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Free_keyval(int& comm_keyval)$/;"	f	class:MPI::Comm	signature:(int& comm_keyval)
Free_keyval	openmpi/ompi/mpi/cxx/datatype.h	/^  static void Free_keyval(int& type_keyval);$/;"	p	class:Datatype	access:public	signature:(int& type_keyval)
Free_keyval	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Free_keyval(int& type_keyval)$/;"	f	class:MPI::Datatype	signature:(int& type_keyval)
Free_keyval	openmpi/ompi/mpi/cxx/win.h	/^  static void Free_keyval(int& win_keyval); $/;"	p	class:Win	access:public	signature:(int& win_keyval)
Free_keyval	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Free_keyval(int& win_keyval)$/;"	f	class:MPI::Win	signature:(int& win_keyval)
Free_mem	openmpi/ompi/mpi/cxx/functions.h	/^Free_mem(void* base);$/;"	p	signature:(void* base)
Free_mem	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Free_mem(void* base)$/;"	f	class:MPI	signature:(void* base)
GRAPH	openmpi/ompi/mpi/cxx/constants.h	/^static const int GRAPH = MPI_GRAPH;$/;"	v
GROUP_EMPTY	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Group  GROUP_EMPTY;$/;"	x
GROUP_NULL	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Group        GROUP_NULL;$/;"	x
Gather	openmpi/ompi/mpi/cxx/comm.h	/^  Gather(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype, int root) const
Gather	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Gather(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int root) const
Gatherv	openmpi/ompi/mpi/cxx/comm.h	/^  Gatherv(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, const int recvcounts[], const int displs[], const Datatype & recvtype, int root) const
Gatherv	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Gatherv(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, const int recvcounts[], const int displs[], const MPI::Datatype & recvtype, int root) const
Get	openmpi/ompi/mpi/cxx/info.h	/^  virtual bool Get(const char* key, int valuelen, char* value) const;$/;"	p	class:Info	access:public	signature:(const char* key, int valuelen, char* value) const
Get	openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Get(const char* key, int valuelen, char* value) const$/;"	f	class:MPI::Info	signature:(const char* key, int valuelen, char* value) const
Get	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Get(const void *origin_addr, int origin_count, $/;"	p	class:Win	access:public	signature:(const void *origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype) const
Get	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get(const void *origin_addr, int origin_count, $/;"	f	class:MPI::Win	signature:(const void *origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype) const
Get_address	openmpi/ompi/mpi/cxx/functions.h	/^Get_address(void* location);$/;"	p	signature:(void* location)
Get_address	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_address(void* location)$/;"	f	class:MPI	signature:(void* location)
Get_amode	openmpi/ompi/mpi/cxx/file.h	/^  int Get_amode() const;$/;"	p	class:File	access:public	signature:() const
Get_amode	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_amode() const $/;"	f	class:MPI::File	signature:() const
Get_atomicity	openmpi/ompi/mpi/cxx/file.h	/^  bool Get_atomicity() const;$/;"	p	class:File	access:public	signature:() const
Get_atomicity	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_atomicity() const $/;"	f	class:MPI::File	signature:() const
Get_attr	openmpi/ompi/mpi/cxx/comm.h	/^  virtual bool Get_attr(int comm_keyval, void* attribute_val) const;$/;"	p	class:Comm	access:public	signature:(int comm_keyval, void* attribute_val) const
Get_attr	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_attr(int comm_keyval, void* attribute_val) const$/;"	f	class:MPI::Comm	signature:(int comm_keyval, void* attribute_val) const
Get_attr	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual bool Get_attr(int type_keyval, void* attribute_val) const;$/;"	p	class:Datatype	access:public	signature:(int type_keyval, void* attribute_val) const
Get_attr	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_attr(int type_keyval,$/;"	f	class:MPI::Datatype	signature:(int type_keyval, void* attribute_val) const
Get_attr	openmpi/ompi/mpi/cxx/win.h	/^  bool Get_attr(const Win& win, int win_keyval,$/;"	p	class:Win	access:public	signature:(const Win& win, int win_keyval, void* attribute_val) const
Get_attr	openmpi/ompi/mpi/cxx/win.h	/^  bool Get_attr(int win_keyval, void* attribute_val) const;$/;"	p	class:Win	access:public	signature:(int win_keyval, void* attribute_val) const
Get_attr	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get_attr(const Win& win, int win_keyval,$/;"	f	class:MPI::Win	signature:(const Win& win, int win_keyval, void* attribute_val) const
Get_attr	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get_attr(int win_keyval, void* attribute_val) const$/;"	f	class:MPI::Win	signature:(int win_keyval, void* attribute_val) const
Get_byte_offset	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Offset Get_byte_offset(const MPI::Offset disp) const;$/;"	p	class:File	access:public	signature:(const MPI::Offset disp) const
Get_byte_offset	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_byte_offset(const MPI::Offset disp) const $/;"	f	class:MPI::File	signature:(const MPI::Offset disp) const
Get_cart_rank	openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Get_cart_rank(const int coords[]) const;$/;"	p	class:Cartcomm	access:public	signature:(const int coords[]) const
Get_cart_rank	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Get_cart_rank(const int coords[]) const $/;"	f	class:MPI::Cartcomm	signature:(const int coords[]) const
Get_contents	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_contents(int max_integers, int max_addresses,$/;"	p	class:Datatype	access:public	signature:(int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], Aint array_of_addresses[], Datatype array_of_datatypes[]) const
Get_contents	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_contents(int max_integers, int max_addresses,$/;"	f	class:MPI::Datatype	signature:(int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], MPI::Aint array_of_addresses[], MPI::Datatype array_of_datatypes[]) const
Get_coords	openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_coords(int rank, int maxdims, int coords[]) const;$/;"	p	class:Cartcomm	access:public	signature:(int rank, int maxdims, int coords[]) const
Get_coords	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Get_coords(int rank, int maxdims, int coords[]) const $/;"	f	class:MPI::Cartcomm	signature:(int rank, int maxdims, int coords[]) const
Get_count	openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_count(const Datatype& datatype) const;$/;"	p	class:Status	access:public	signature:(const Datatype& datatype) const
Get_count	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_count(const MPI::Datatype& datatype) const$/;"	f	class:MPI::Status	signature:(const MPI::Datatype& datatype) const
Get_dim	openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Get_dim() const;$/;"	p	class:Cartcomm	access:public	signature:() const
Get_dim	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Get_dim() const $/;"	f	class:MPI::Cartcomm	signature:() const
Get_dims	openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_dims(int nnodes[], int nedges[]) const;$/;"	p	class:Graphcomm	access:public	signature:(int nnodes[], int nedges[]) const
Get_dims	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Get_dims(int nnodes[], int nedges[]) const $/;"	f	class:MPI::Graphcomm	signature:(int nnodes[], int nedges[]) const
Get_elements	openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_elements(const Datatype& datatype) const;$/;"	p	class:Status	access:public	signature:(const Datatype& datatype) const
Get_elements	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_elements(const MPI::Datatype& datatype) const$/;"	f	class:MPI::Status	signature:(const MPI::Datatype& datatype) const
Get_envelope	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_envelope(int& num_integers, int& num_addresses,$/;"	p	class:Datatype	access:public	signature:(int& num_integers, int& num_addresses, int& num_datatypes, int& combiner) const
Get_envelope	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_envelope(int& num_integers, int& num_addresses,$/;"	f	class:MPI::Datatype	signature:(int& num_integers, int& num_addresses, int& num_datatypes, int& combiner) const
Get_errhandler	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Errhandler Get_errhandler() const;$/;"	p	class:Comm	access:public	signature:() const
Get_errhandler	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_errhandler() const$/;"	f	class:MPI::Comm	signature:() const
Get_errhandler	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Errhandler Get_errhandler() const;$/;"	p	class:File	access:public	signature:() const
Get_errhandler	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_errhandler() const$/;"	f	class:MPI::File	signature:() const
Get_errhandler	openmpi/ompi/mpi/cxx/win.h	/^  virtual MPI::Errhandler Get_errhandler() const; $/;"	p	class:Win	access:public	signature:() const
Get_errhandler	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win:: Get_errhandler() const $/;"	f	class:MPI::Win	signature:() const
Get_error	openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_error() const;$/;"	p	class:Status	access:public	signature:() const
Get_error	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_error() const$/;"	f	class:MPI::Status	signature:() const
Get_error_class	openmpi/ompi/mpi/cxx/exception.h	/^  inline int Get_error_class() const { return error_class; }$/;"	f	class:Exception	access:public	signature:() const
Get_error_class	openmpi/ompi/mpi/cxx/functions.h	/^Get_error_class(int errorcode);$/;"	p	signature:(int errorcode)
Get_error_class	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_error_class(int errorcode) $/;"	f	class:MPI	signature:(int errorcode)
Get_error_code	openmpi/ompi/mpi/cxx/exception.h	/^  inline int Get_error_code() const { return error_code; }$/;"	f	class:Exception	access:public	signature:() const
Get_error_string	openmpi/ompi/mpi/cxx/exception.h	/^  inline const char* Get_error_string() const { return error_string; }$/;"	f	class:Exception	access:public	signature:() const
Get_error_string	openmpi/ompi/mpi/cxx/functions.h	/^Get_error_string(int errorcode, char* string, int& resultlen);$/;"	p	signature:(int errorcode, char* string, int& resultlen)
Get_error_string	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_error_string(int errorcode, char* string, int& resultlen)$/;"	f	class:MPI	signature:(int errorcode, char* string, int& resultlen)
Get_extent	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_extent(Aint& lb, Aint& extent) const;$/;"	p	class:Datatype	access:public	signature:(Aint& lb, Aint& extent) const
Get_extent	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_extent(MPI::Aint& lb, MPI::Aint& extent) const$/;"	f	class:MPI::Datatype	signature:(MPI::Aint& lb, MPI::Aint& extent) const
Get_group	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Group Get_group() const;$/;"	p	class:Comm	access:public	signature:() const
Get_group	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_group() const $/;"	f	class:MPI::Comm	signature:() const
Get_group	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Group Get_group() const;$/;"	p	class:File	access:public	signature:() const
Get_group	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_group() const$/;"	f	class:MPI::File	signature:() const
Get_group	openmpi/ompi/mpi/cxx/win.h	/^  virtual MPI::Group Get_group() const;  $/;"	p	class:Win	access:public	signature:() const
Get_group	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get_group() const$/;"	f	class:MPI::Win	signature:() const
Get_info	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Info Get_info() const;$/;"	p	class:File	access:public	signature:() const
Get_info	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_info() const$/;"	f	class:MPI::File	signature:() const
Get_name	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Get_name(char * comm_name, int& resultlen) const;$/;"	p	class:Comm	access:public	signature:(char * comm_name, int& resultlen) const
Get_name	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_name(char* comm_name, int& resultlen) const$/;"	f	class:MPI::Comm	signature:(char* comm_name, int& resultlen) const
Get_name	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_name(char* type_name, int& resultlen) const;$/;"	p	class:Datatype	access:public	signature:(char* type_name, int& resultlen) const
Get_name	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_name(char* type_name, int& resultlen) const$/;"	f	class:MPI::Datatype	signature:(char* type_name, int& resultlen) const
Get_name	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Get_name(char* win_name, int& resultlen) const;$/;"	p	class:Win	access:public	signature:(char* win_name, int& resultlen) const
Get_name	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get_name(char* win_name, int& resultlen) const$/;"	f	class:MPI::Win	signature:(char* win_name, int& resultlen) const
Get_neighbors	openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_neighbors(int rank, int maxneighbors, $/;"	p	class:Graphcomm	access:public	signature:(int rank, int maxneighbors, int neighbors[]) const
Get_neighbors	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Get_neighbors(int rank, int maxneighbors, $/;"	f	class:MPI::Graphcomm	signature:(int rank, int maxneighbors, int neighbors[]) const
Get_neighbors_count	openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Get_neighbors_count(int rank) const;$/;"	p	class:Graphcomm	access:public	signature:(int rank) const
Get_neighbors_count	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Get_neighbors_count(int rank) const $/;"	f	class:MPI::Graphcomm	signature:(int rank) const
Get_nkeys	openmpi/ompi/mpi/cxx/info.h	/^  virtual int Get_nkeys() const;$/;"	p	class:Info	access:public	signature:() const
Get_nkeys	openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Get_nkeys() const$/;"	f	class:MPI::Info	signature:() const
Get_nthkey	openmpi/ompi/mpi/cxx/info.h	/^  virtual void Get_nthkey(int n, char* key) const;$/;"	p	class:Info	access:public	signature:(int n, char* key) const
Get_nthkey	openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Get_nthkey(int n, char* key) const$/;"	f	class:MPI::Info	signature:(int n, char* key) const
Get_parent	openmpi/ompi/mpi/cxx/comm.h	/^  static Intercomm Get_parent();$/;"	p	class:Comm	access:public	signature:()
Get_parent	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_parent()$/;"	f	class:MPI::Comm	signature:()
Get_position	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Offset Get_position() const;$/;"	p	class:File	access:public	signature:() const
Get_position	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_position() const$/;"	f	class:MPI::File	signature:() const
Get_position_shared	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Offset Get_position_shared() const;$/;"	p	class:File	access:public	signature:() const
Get_position_shared	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_position_shared() const$/;"	f	class:MPI::File	signature:() const
Get_processor_name	openmpi/ompi/mpi/cxx/functions.h	/^Get_processor_name(char* name, int& resultlen);$/;"	p	signature:(char* name, int& resultlen)
Get_processor_name	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_processor_name(char* name, int& resultlen)$/;"	f	class:MPI	signature:(char* name, int& resultlen)
Get_rank	openmpi/ompi/mpi/cxx/comm.h	/^  virtual int Get_rank() const;$/;"	p	class:Comm	access:public	signature:() const
Get_rank	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_rank() const $/;"	f	class:MPI::Comm	signature:() const
Get_rank	openmpi/ompi/mpi/cxx/group.h	/^  virtual int Get_rank() const;$/;"	p	class:Group	access:public	signature:() const
Get_rank	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Get_rank() const $/;"	f	class:MPI::Group	signature:() const
Get_remote_group	openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Group Get_remote_group() const;$/;"	p	class:Intercomm	access:public	signature:() const
Get_remote_group	openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Get_remote_group() const $/;"	f	class:MPI::Intercomm	signature:() const
Get_remote_size	openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual int Get_remote_size() const;$/;"	p	class:Intercomm	access:public	signature:() const
Get_remote_size	openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Get_remote_size() const $/;"	f	class:MPI::Intercomm	signature:() const
Get_size	openmpi/ompi/mpi/cxx/comm.h	/^  virtual int Get_size() const;$/;"	p	class:Comm	access:public	signature:() const
Get_size	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_size() const $/;"	f	class:MPI::Comm	signature:() const
Get_size	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual int Get_size() const;$/;"	p	class:Datatype	access:public	signature:() const
Get_size	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_size() const $/;"	f	class:MPI::Datatype	signature:() const
Get_size	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Offset Get_size() const;$/;"	p	class:File	access:public	signature:() const
Get_size	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_size() const$/;"	f	class:MPI::File	signature:() const
Get_size	openmpi/ompi/mpi/cxx/group.h	/^  virtual int Get_size() const;$/;"	p	class:Group	access:public	signature:() const
Get_size	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Get_size() const$/;"	f	class:MPI::Group	signature:() const
Get_source	openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_source() const;$/;"	p	class:Status	access:public	signature:() const
Get_source	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_source() const$/;"	f	class:MPI::Status	signature:() const
Get_status	openmpi/ompi/mpi/cxx/request.h	/^  virtual bool Get_status() const;$/;"	p	class:Request	access:public	signature:() const
Get_status	openmpi/ompi/mpi/cxx/request.h	/^  virtual bool Get_status(Status& status) const;$/;"	p	class:Request	access:public	signature:(Status& status) const
Get_status	openmpi/ompi/mpi/cxx/request_inln.h	/^inline bool MPI::Request::Get_status() const$/;"	f	class:MPI::Request	signature:() const
Get_status	openmpi/ompi/mpi/cxx/request_inln.h	/^inline bool MPI::Request::Get_status(MPI::Status& status) const$/;"	f	class:MPI::Request	signature:(MPI::Status& status) const
Get_tag	openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_tag() const;$/;"	p	class:Status	access:public	signature:() const
Get_tag	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_tag() const$/;"	f	class:MPI::Status	signature:() const
Get_topo	openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_topo(int maxdims, int dims[], bool periods[],$/;"	p	class:Cartcomm	access:public	signature:(int maxdims, int dims[], bool periods[], int coords[]) const
Get_topo	openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_topo(int maxindex, int maxedges, int index[], $/;"	p	class:Graphcomm	access:public	signature:(int maxindex, int maxedges, int index[], int edges[]) const
Get_topo	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Get_topo(int maxdims, int dims[], bool periods[],$/;"	f	class:MPI::Cartcomm	signature:(int maxdims, int dims[], bool periods[], int coords[]) const
Get_topo	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Get_topo(int maxindex, int maxedges, int index[], $/;"	f	class:MPI::Graphcomm	signature:(int maxindex, int maxedges, int index[], int edges[]) const
Get_topology	openmpi/ompi/mpi/cxx/comm.h	/^  virtual int Get_topology() const;$/;"	p	class:Comm	access:public	signature:() const
Get_topology	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_topology() const $/;"	f	class:MPI::Comm	signature:() const
Get_true_extent	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Get_true_extent(Aint&, Aint&) const;$/;"	p	class:Datatype	access:public	signature:(Aint&, Aint&) const
Get_true_extent	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_true_extent(MPI::Aint& lb, MPI::Aint& extent) const$/;"	f	class:MPI::Datatype	signature:(MPI::Aint& lb, MPI::Aint& extent) const
Get_type_extent	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Aint Get_type_extent(const MPI::Datatype& datatype) const;$/;"	p	class:File	access:public	signature:(const MPI::Datatype& datatype) const
Get_type_extent	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_type_extent(const MPI::Datatype& datatype) const$/;"	f	class:MPI::File	signature:(const MPI::Datatype& datatype) const
Get_valuelen	openmpi/ompi/mpi/cxx/info.h	/^  virtual bool Get_valuelen(const char* key, int& valuelen) const;$/;"	p	class:Info	access:public	signature:(const char* key, int& valuelen) const
Get_valuelen	openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Get_valuelen(const char* key, int& valuelen) const$/;"	f	class:MPI::Info	signature:(const char* key, int& valuelen) const
Get_version	openmpi/ompi/mpi/cxx/functions.h	/^Get_version(int& version, int& subversion);$/;"	p	signature:(int& version, int& subversion)
Get_version	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_version(int& version, int& subversion)$/;"	f	class:MPI	signature:(int& version, int& subversion)
Get_view	openmpi/ompi/mpi/cxx/file.h	/^  void Get_view(MPI::Offset& disp, MPI::Datatype& etype, $/;"	p	class:File	access:public	signature:(MPI::Offset& disp, MPI::Datatype& etype, MPI::Datatype& filetype, char* datarep) const
Get_view	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_view(MPI::Offset& disp,$/;"	f	class:MPI::File	signature:(MPI::Offset& disp, MPI::Datatype& etype, MPI::Datatype& filetype, char* datarep) const
Graphcomm	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Graphcomm;$/;"	x
Graphcomm	openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm() { }$/;"	f	class:Graphcomm	access:public	signature:()
Graphcomm	openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm(const Comm_Null& data) : Intracomm(data) { }$/;"	f	class:Graphcomm	access:public	signature:(const Comm_Null& data)
Graphcomm	openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm(const Graphcomm& data) : Intracomm(data.mpi_comm) { }$/;"	f	class:Graphcomm	access:public	signature:(const Graphcomm& data)
Graphcomm	openmpi/ompi/mpi/cxx/topology.h	/^  inline Graphcomm(const MPI_Comm& data);$/;"	p	class:Graphcomm	access:public	signature:(const MPI_Comm& data)
Graphcomm	openmpi/ompi/mpi/cxx/topology.h	/^class Graphcomm : public Intracomm {$/;"	c	inherits:Intracomm
Graphcomm	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Graphcomm(const MPI_Comm& data) {$/;"	f	class:MPI::Graphcomm	signature:(const MPI_Comm& data)
Graphcomm::Clone	openmpi/ompi/mpi/cxx/topology.h	/^  virtual Graphcomm& Clone() const;$/;"	p	class:Graphcomm	access:public	signature:() const
Graphcomm::Dup	openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm Dup() const;$/;"	p	class:Graphcomm	access:public	signature:() const
Graphcomm::Get_dims	openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_dims(int nnodes[], int nedges[]) const;$/;"	p	class:Graphcomm	access:public	signature:(int nnodes[], int nedges[]) const
Graphcomm::Get_neighbors	openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_neighbors(int rank, int maxneighbors, $/;"	p	class:Graphcomm	access:public	signature:(int rank, int maxneighbors, int neighbors[]) const
Graphcomm::Get_neighbors_count	openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Get_neighbors_count(int rank) const;$/;"	p	class:Graphcomm	access:public	signature:(int rank) const
Graphcomm::Get_topo	openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Get_topo(int maxindex, int maxedges, int index[], $/;"	p	class:Graphcomm	access:public	signature:(int maxindex, int maxedges, int index[], int edges[]) const
Graphcomm::Graphcomm	openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm() { }$/;"	f	class:Graphcomm	access:public	signature:()
Graphcomm::Graphcomm	openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm(const Comm_Null& data) : Intracomm(data) { }$/;"	f	class:Graphcomm	access:public	signature:(const Comm_Null& data)
Graphcomm::Graphcomm	openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm(const Graphcomm& data) : Intracomm(data.mpi_comm) { }$/;"	f	class:Graphcomm	access:public	signature:(const Graphcomm& data)
Graphcomm::Graphcomm	openmpi/ompi/mpi/cxx/topology.h	/^  inline Graphcomm(const MPI_Comm& data);$/;"	p	class:Graphcomm	access:public	signature:(const MPI_Comm& data)
Graphcomm::Map	openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Map(int nnodes, const int index[], $/;"	p	class:Graphcomm	access:public	signature:(int nnodes, const int index[], const int edges[]) const
Graphcomm::operator =	openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm& operator=(const Comm_Null& data) {$/;"	f	class:Graphcomm	access:public	signature:(const Comm_Null& data)
Graphcomm::operator =	openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm& operator=(const Graphcomm& data) {$/;"	f	class:Graphcomm	access:public	signature:(const Graphcomm& data)
Graphcomm::operator =	openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm& operator=(const MPI_Comm& data) {$/;"	f	class:Graphcomm	access:public	signature:(const MPI_Comm& data)
Grequest	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Grequest;$/;"	x
Grequest	openmpi/ompi/mpi/cxx/request.h	/^    Grequest() {}$/;"	f	class:Grequest	access:public	signature:()
Grequest	openmpi/ompi/mpi/cxx/request.h	/^    Grequest(const MPI_Request &req) : Request(req) {}$/;"	f	class:Grequest	access:public	signature:(const MPI_Request &req)
Grequest	openmpi/ompi/mpi/cxx/request.h	/^    Grequest(const Request& req) : Request(req) {}$/;"	f	class:Grequest	access:public	signature:(const Request& req)
Grequest	openmpi/ompi/mpi/cxx/request.h	/^class Grequest : public MPI::Request {$/;"	c	inherits:MPI::Request
Grequest::Cancel_function	openmpi/ompi/mpi/cxx/request.h	/^    typedef int Cancel_function(void *, bool);$/;"	t	class:Grequest	access:public
Grequest::Complete	openmpi/ompi/mpi/cxx/request.h	/^    virtual void Complete();$/;"	p	class:Grequest	access:public	signature:()
Grequest::Free_function	openmpi/ompi/mpi/cxx/request.h	/^    typedef int Free_function(void *);$/;"	t	class:Grequest	access:public
Grequest::Grequest	openmpi/ompi/mpi/cxx/request.h	/^    Grequest() {}$/;"	f	class:Grequest	access:public	signature:()
Grequest::Grequest	openmpi/ompi/mpi/cxx/request.h	/^    Grequest(const MPI_Request &req) : Request(req) {}$/;"	f	class:Grequest	access:public	signature:(const MPI_Request &req)
Grequest::Grequest	openmpi/ompi/mpi/cxx/request.h	/^    Grequest(const Request& req) : Request(req) {}$/;"	f	class:Grequest	access:public	signature:(const Request& req)
Grequest::Intercept_data_t	openmpi/ompi/mpi/cxx/request.h	/^    struct Intercept_data_t {$/;"	s	class:Grequest	access:public
Grequest::Intercept_data_t::id_cxx_cancel_fn	openmpi/ompi/mpi/cxx/request.h	/^        Grequest::Cancel_function *id_cxx_cancel_fn;$/;"	m	struct:Grequest::Intercept_data_t	access:public
Grequest::Intercept_data_t::id_cxx_free_fn	openmpi/ompi/mpi/cxx/request.h	/^        Grequest::Free_function *id_cxx_free_fn;$/;"	m	struct:Grequest::Intercept_data_t	access:public
Grequest::Intercept_data_t::id_cxx_query_fn	openmpi/ompi/mpi/cxx/request.h	/^        Grequest::Query_function *id_cxx_query_fn;$/;"	m	struct:Grequest::Intercept_data_t	access:public
Grequest::Intercept_data_t::id_extra	openmpi/ompi/mpi/cxx/request.h	/^        void *id_extra;$/;"	m	struct:Grequest::Intercept_data_t	access:public
Grequest::Query_function	openmpi/ompi/mpi/cxx/request.h	/^    typedef int Query_function(void *, Status&);$/;"	t	class:Grequest	access:public
Grequest::Start	openmpi/ompi/mpi/cxx/request.h	/^    static Grequest Start(Query_function *, Free_function *,$/;"	p	class:Grequest	access:public	signature:(Query_function *, Free_function *, Cancel_function *, void *)
Grequest::operator =	openmpi/ompi/mpi/cxx/request.h	/^    Grequest& operator=(const Grequest& req) {$/;"	f	class:Grequest	access:public	signature:(const Grequest& req)
Grequest::operator =	openmpi/ompi/mpi/cxx/request.h	/^    Grequest& operator=(const Request& req) {$/;"	f	class:Grequest	access:public	signature:(const Request& req)
Grequest::~Grequest	openmpi/ompi/mpi/cxx/request.h	/^    virtual ~Grequest() {}$/;"	f	class:Grequest	access:public	signature:()
Group	openmpi/ompi/mpi/cxx/group.h	/^  inline Group() : mpi_group(MPI_GROUP_NULL) { }$/;"	f	class:Group	access:public	signature:()
Group	openmpi/ompi/mpi/cxx/group.h	/^  inline Group(MPI_Group i) : mpi_group(i) { }$/;"	f	class:Group	access:public	signature:(MPI_Group i)
Group	openmpi/ompi/mpi/cxx/group.h	/^  inline Group(const Group& g) : mpi_group(g.mpi_group) { }$/;"	f	class:Group	access:public	signature:(const Group& g)
Group	openmpi/ompi/mpi/cxx/group.h	/^class Group {$/;"	c
Group	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Group;$/;"	x
Group::Compare	openmpi/ompi/mpi/cxx/group.h	/^  static int Compare(const Group& group1, const Group& group2);$/;"	p	class:Group	access:public	signature:(const Group& group1, const Group& group2)
Group::Difference	openmpi/ompi/mpi/cxx/group.h	/^  static Group Difference(const Group &group1, const Group &group2);$/;"	p	class:Group	access:public	signature:(const Group &group1, const Group &group2)
Group::Excl	openmpi/ompi/mpi/cxx/group.h	/^  virtual Group Excl(int n, const int ranks[]) const;$/;"	p	class:Group	access:public	signature:(int n, const int ranks[]) const
Group::Free	openmpi/ompi/mpi/cxx/group.h	/^  virtual void Free();$/;"	p	class:Group	access:public	signature:()
Group::Get_rank	openmpi/ompi/mpi/cxx/group.h	/^  virtual int Get_rank() const;$/;"	p	class:Group	access:public	signature:() const
Group::Get_size	openmpi/ompi/mpi/cxx/group.h	/^  virtual int Get_size() const;$/;"	p	class:Group	access:public	signature:() const
Group::Group	openmpi/ompi/mpi/cxx/group.h	/^  inline Group() : mpi_group(MPI_GROUP_NULL) { }$/;"	f	class:Group	access:public	signature:()
Group::Group	openmpi/ompi/mpi/cxx/group.h	/^  inline Group(MPI_Group i) : mpi_group(i) { }$/;"	f	class:Group	access:public	signature:(MPI_Group i)
Group::Group	openmpi/ompi/mpi/cxx/group.h	/^  inline Group(const Group& g) : mpi_group(g.mpi_group) { }$/;"	f	class:Group	access:public	signature:(const Group& g)
Group::Incl	openmpi/ompi/mpi/cxx/group.h	/^  virtual Group Incl(int n, const int ranks[]) const;$/;"	p	class:Group	access:public	signature:(int n, const int ranks[]) const
Group::Intersect	openmpi/ompi/mpi/cxx/group.h	/^  static Group Intersect(const Group &group1, const Group &group2);$/;"	p	class:Group	access:public	signature:(const Group &group1, const Group &group2)
Group::Range_excl	openmpi/ompi/mpi/cxx/group.h	/^  virtual Group Range_excl(int n, const int ranges[][3]) const;$/;"	p	class:Group	access:public	signature:(int n, const int ranges[][3]) const
Group::Range_incl	openmpi/ompi/mpi/cxx/group.h	/^  virtual Group Range_incl(int n, const int ranges[][3]) const;$/;"	p	class:Group	access:public	signature:(int n, const int ranges[][3]) const
Group::Translate_ranks	openmpi/ompi/mpi/cxx/group.h	/^  static void Translate_ranks (const Group& group1, int n, const int ranks1[], $/;"	p	class:Group	access:public	signature:(const Group& group1, int n, const int ranks1[], const Group& group2, int ranks2[])
Group::Union	openmpi/ompi/mpi/cxx/group.h	/^  static Group Union(const Group &group1, const Group &group2);$/;"	p	class:Group	access:public	signature:(const Group &group1, const Group &group2)
Group::mpi	openmpi/ompi/mpi/cxx/group.h	/^  inline MPI_Group mpi() const { return mpi_group; }$/;"	f	class:Group	access:public	signature:() const
Group::mpi_group	openmpi/ompi/mpi/cxx/group.h	/^  MPI_Group mpi_group;$/;"	m	class:Group	access:protected
Group::operator !=	openmpi/ompi/mpi/cxx/group.h	/^  inline bool operator!= (const Group &a) { return (bool)!(*this == a); }$/;"	f	class:Group	access:public	signature:(const Group &a)
Group::operator =	openmpi/ompi/mpi/cxx/group.h	/^  inline Group& operator= (const MPI_Group &i) { mpi_group = i; return *this; }$/;"	f	class:Group	access:public	signature:(const MPI_Group &i)
Group::operator =	openmpi/ompi/mpi/cxx/group.h	/^  inline Group& operator=(const Group& g) { mpi_group = g.mpi_group; return *this; }$/;"	f	class:Group	access:public	signature:(const Group& g)
Group::operator ==	openmpi/ompi/mpi/cxx/group.h	/^  inline bool operator== (const Group &a) { return (bool)(mpi_group == a.mpi_group); }$/;"	f	class:Group	access:public	signature:(const Group &a)
Group::operator MPI_Group	openmpi/ompi/mpi/cxx/group.h	/^  inline operator MPI_Group () const { return mpi_group; }$/;"	f	class:Group	access:public	signature:() const
Group::~Group	openmpi/ompi/mpi/cxx/group.h	/^  inline virtual ~Group() {}$/;"	f	class:Group	access:public	signature:()
HAVE_DOUBLE__COMPLEX	mpi.h	136;"	d
HAVE_FLOAT__COMPLEX	mpi.h	133;"	d
HAVE_INTTYPES_H	vampirtrace/vt_inttypes.h	20;"	d
HAVE_LONG_DOUBLE__COMPLEX	mpi.h	139;"	d
HAVE_MPI_OFFSET	mpi.h	2672;"	d
HAVE_STDINT_H	vampirtrace/vt_inttypes.h	19;"	d
HOST	openmpi/ompi/mpi/cxx/constants.h	/^static const int HOST = MPI_HOST;$/;"	v
IDENT	openmpi/ompi/mpi/cxx/constants.h	/^static const int IDENT = MPI_IDENT;$/;"	v
IMPI_CLIENT_COLOR	mpi.h	/^    IMPI_CLIENT_COLOR,$/;"	e	enum:__anon1
IMPI_CLIENT_SIZE	mpi.h	/^    IMPI_CLIENT_SIZE,$/;"	e	enum:__anon1
IMPI_HOST_COLOR	mpi.h	/^    IMPI_HOST_COLOR$/;"	e	enum:__anon1
IMPI_HOST_SIZE	mpi.h	/^    IMPI_HOST_SIZE,$/;"	e	enum:__anon1
INFO_NULL	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Info         INFO_NULL;$/;"	x
INT	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype INT;            $/;"	x
INTEGER	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype INTEGER;$/;"	x
INTEGER1	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype INTEGER1;$/;"	x
INTEGER2	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype INTEGER2;$/;"	x
INTEGER4	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype INTEGER4;$/;"	x
IN_PLACE	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern void* const IN_PLACE;$/;"	x
IO	openmpi/ompi/mpi/cxx/constants.h	/^static const int IO = MPI_IO;$/;"	v
ISO_FORTRAN_ENV	mpif-sizeof.h	/^! ISO_FORTRAN_ENV, and the STORAGE_SIZE() intrinsic on all types.$/;"	v
Ibsend	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Ibsend(const void *buf, int count, const$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Ibsend	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Ibsend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Incl	openmpi/ompi/mpi/cxx/group.h	/^  virtual Group Incl(int n, const int ranks[]) const;$/;"	p	class:Group	access:public	signature:(int n, const int ranks[]) const
Incl	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Incl(int n, const int ranks[]) const$/;"	f	class:MPI::Group	signature:(int n, const int ranks[]) const
Info	openmpi/ompi/mpi/cxx/info.h	/^  Info() : mpi_info(MPI_INFO_NULL) { }$/;"	f	class:Info	access:public	signature:()
Info	openmpi/ompi/mpi/cxx/info.h	/^  Info(MPI_Info i) : mpi_info(i) { }$/;"	f	class:Info	access:public	signature:(MPI_Info i)
Info	openmpi/ompi/mpi/cxx/info.h	/^  Info(const Info& data) : mpi_info(data.mpi_info) { }$/;"	f	class:Info	access:public	signature:(const Info& data)
Info	openmpi/ompi/mpi/cxx/info.h	/^class Info {$/;"	c
Info	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Info;$/;"	x
Info::Create	openmpi/ompi/mpi/cxx/info.h	/^  static Info Create();$/;"	p	class:Info	access:public	signature:()
Info::Delete	openmpi/ompi/mpi/cxx/info.h	/^  virtual void Delete(const char* key);$/;"	p	class:Info	access:public	signature:(const char* key)
Info::Dup	openmpi/ompi/mpi/cxx/info.h	/^  virtual Info Dup() const; $/;"	p	class:Info	access:public	signature:() const
Info::Free	openmpi/ompi/mpi/cxx/info.h	/^  virtual void Free();$/;"	p	class:Info	access:public	signature:()
Info::Get	openmpi/ompi/mpi/cxx/info.h	/^  virtual bool Get(const char* key, int valuelen, char* value) const;$/;"	p	class:Info	access:public	signature:(const char* key, int valuelen, char* value) const
Info::Get_nkeys	openmpi/ompi/mpi/cxx/info.h	/^  virtual int Get_nkeys() const;$/;"	p	class:Info	access:public	signature:() const
Info::Get_nthkey	openmpi/ompi/mpi/cxx/info.h	/^  virtual void Get_nthkey(int n, char* key) const;$/;"	p	class:Info	access:public	signature:(int n, char* key) const
Info::Get_valuelen	openmpi/ompi/mpi/cxx/info.h	/^  virtual bool Get_valuelen(const char* key, int& valuelen) const;$/;"	p	class:Info	access:public	signature:(const char* key, int& valuelen) const
Info::Info	openmpi/ompi/mpi/cxx/info.h	/^  Info() : mpi_info(MPI_INFO_NULL) { }$/;"	f	class:Info	access:public	signature:()
Info::Info	openmpi/ompi/mpi/cxx/info.h	/^  Info(MPI_Info i) : mpi_info(i) { }$/;"	f	class:Info	access:public	signature:(MPI_Info i)
Info::Info	openmpi/ompi/mpi/cxx/info.h	/^  Info(const Info& data) : mpi_info(data.mpi_info) { }$/;"	f	class:Info	access:public	signature:(const Info& data)
Info::Set	openmpi/ompi/mpi/cxx/info.h	/^  virtual void Set(const char* key, const char* value);$/;"	p	class:Info	access:public	signature:(const char* key, const char* value)
Info::mpi_info	openmpi/ompi/mpi/cxx/info.h	/^  MPI_Info mpi_info;$/;"	m	class:Info	access:protected
Info::operator =	openmpi/ompi/mpi/cxx/info.h	/^  Info& operator= (const MPI_Info &i) {$/;"	f	class:Info	access:public	signature:(const MPI_Info &i)
Info::operator =	openmpi/ompi/mpi/cxx/info.h	/^  Info& operator=(const Info& data) {$/;"	f	class:Info	access:public	signature:(const Info& data)
Info::operator MPI_Info	openmpi/ompi/mpi/cxx/info.h	/^  operator MPI_Info () const { return mpi_info; }$/;"	f	class:Info	access:public	signature:() const
Info::~Info	openmpi/ompi/mpi/cxx/info.h	/^  virtual ~Info() {}$/;"	f	class:Info	access:public	signature:()
Init	openmpi/ompi/mpi/cxx/functions.h	/^Init();$/;"	p	signature:()
Init	openmpi/ompi/mpi/cxx/functions.h	/^Init(int& argc, char**& argv);$/;"	p	signature:(int& argc, char**& argv)
Init	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Init()$/;"	f	class:MPI	signature:()
Init	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Init(int& argc, char**& argv)$/;"	f	class:MPI	signature:(int& argc, char**& argv)
Init	openmpi/ompi/mpi/cxx/op.h	/^  virtual void Init(User_function *func, bool commute);$/;"	p	class:Op	access:public	signature:(User_function *func, bool commute)
Init	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Init(MPI::User_function *func, bool commute)$/;"	f	class:MPI::Op	signature:(MPI::User_function *func, bool commute)
Init_thread	openmpi/ompi/mpi/cxx/functions.h	/^Init_thread(int &argc, char**&argv, int required);$/;"	p	signature:(int &argc, char**&argv, int required)
Init_thread	openmpi/ompi/mpi/cxx/functions.h	/^Init_thread(int required);$/;"	p	signature:(int required)
Init_thread	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Init_thread(int required)$/;"	f	class:MPI	signature:(int required)
Init_thread	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Init_thread(int& argc, char**& argv, int required)$/;"	f	class:MPI	signature:(int& argc, char**& argv, int required)
InitializeIntercepts	openmpi/ompi/mpi/cxx/functions.h	/^InitializeIntercepts();$/;"	p	signature:()
Intercept_data_t	openmpi/ompi/mpi/cxx/request.h	/^    struct Intercept_data_t {$/;"	s	class:Grequest	access:public
Intercomm	openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm() : Comm(MPI_COMM_NULL) { }$/;"	f	class:Intercomm	access:public	signature:()
Intercomm	openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm(MPI_Comm data) : Comm(data) { }$/;"	f	class:Intercomm	access:public	signature:(MPI_Comm data)
Intercomm	openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm(const Comm_Null& data) : Comm(data) { }$/;"	f	class:Intercomm	access:public	signature:(const Comm_Null& data)
Intercomm	openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm(const Intercomm& data) : Comm(data.mpi_comm) { }$/;"	f	class:Intercomm	access:public	signature:(const Intercomm& data)
Intercomm	openmpi/ompi/mpi/cxx/intercomm.h	/^class Intercomm : public Comm {$/;"	c	inherits:Comm
Intercomm	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Intercomm;$/;"	x
Intercomm::Clone	openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Intercomm& Clone() const;$/;"	p	class:Intercomm	access:public	signature:() const
Intercomm::Create	openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Intercomm Create(const Group& group) const;$/;"	p	class:Intercomm	access:public	signature:(const Group& group) const
Intercomm::Dup	openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm Dup() const;$/;"	p	class:Intercomm	access:public	signature:() const
Intercomm::Get_remote_group	openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Group Get_remote_group() const;$/;"	p	class:Intercomm	access:public	signature:() const
Intercomm::Get_remote_size	openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual int Get_remote_size() const;$/;"	p	class:Intercomm	access:public	signature:() const
Intercomm::Intercomm	openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm() : Comm(MPI_COMM_NULL) { }$/;"	f	class:Intercomm	access:public	signature:()
Intercomm::Intercomm	openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm(MPI_Comm data) : Comm(data) { }$/;"	f	class:Intercomm	access:public	signature:(MPI_Comm data)
Intercomm::Intercomm	openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm(const Comm_Null& data) : Comm(data) { }$/;"	f	class:Intercomm	access:public	signature:(const Comm_Null& data)
Intercomm::Intercomm	openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm(const Intercomm& data) : Comm(data.mpi_comm) { }$/;"	f	class:Intercomm	access:public	signature:(const Intercomm& data)
Intercomm::Merge	openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Intracomm Merge(bool high) const;$/;"	p	class:Intercomm	access:public	signature:(bool high) const
Intercomm::Split	openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Intercomm Split(int color, int key) const;$/;"	p	class:Intercomm	access:public	signature:(int color, int key) const
Intercomm::operator =	openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm& operator=(const Comm_Null& data) {$/;"	f	class:Intercomm	access:public	signature:(const Comm_Null& data)
Intercomm::operator =	openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm& operator=(const Intercomm& data) {$/;"	f	class:Intercomm	access:public	signature:(const Intercomm& data)
Intercomm::operator =	openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm& operator=(const MPI_Comm& data) {$/;"	f	class:Intercomm	access:public	signature:(const MPI_Comm& data)
Intersect	openmpi/ompi/mpi/cxx/group.h	/^  static Group Intersect(const Group &group1, const Group &group2);$/;"	p	class:Group	access:public	signature:(const Group &group1, const Group &group2)
Intersect	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Intersect(const MPI::Group &group1, const MPI::Group &group2)$/;"	f	class:MPI::Group	signature:(const MPI::Group &group1, const MPI::Group &group2)
Intracomm	openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm() { }$/;"	f	class:Intracomm	access:public	signature:()
Intracomm	openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm(const Comm_Null& data) : Comm(data) { }$/;"	f	class:Intracomm	access:public	signature:(const Comm_Null& data)
Intracomm	openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm(const Intracomm& data) : Comm(data.mpi_comm) { }$/;"	f	class:Intracomm	access:public	signature:(const Intracomm& data)
Intracomm	openmpi/ompi/mpi/cxx/intracomm.h	/^  inline Intracomm(MPI_Comm data);$/;"	p	class:Intracomm	access:public	signature:(MPI_Comm data)
Intracomm	openmpi/ompi/mpi/cxx/intracomm.h	/^class Intracomm : public Comm {$/;"	c	inherits:Comm
Intracomm	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Intracomm(MPI_Comm data) {$/;"	f	class:MPI::Intracomm	signature:(MPI_Comm data)
Intracomm	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Intracomm;$/;"	x
Intracomm::Accept	openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Accept(const char* port_name, const Info& info, int root)$/;"	p	class:Intracomm	access:public	signature:(const char* port_name, const Info& info, int root) const
Intracomm::Clone	openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intracomm& Clone() const;$/;"	p	class:Intracomm	access:public	signature:() const
Intracomm::Connect	openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Connect(const char* port_name, const Info& info, int root)$/;"	p	class:Intracomm	access:public	signature:(const char* port_name, const Info& info, int root) const
Intracomm::Create	openmpi/ompi/mpi/cxx/intracomm.h	/^  Create(const Group& group) const;$/;"	p	class:Intracomm	access:public	signature:(const Group& group) const
Intracomm::Create_cart	openmpi/ompi/mpi/cxx/intracomm.h	/^  Create_cart(int ndims, const int dims[],$/;"	p	class:Intracomm	access:public	signature:(int ndims, const int dims[], const bool periods[], bool reorder) const
Intracomm::Create_graph	openmpi/ompi/mpi/cxx/intracomm.h	/^  Create_graph(int nnodes, const int index[],$/;"	p	class:Intracomm	access:public	signature:(int nnodes, const int index[], const int edges[], bool reorder) const
Intracomm::Create_intercomm	openmpi/ompi/mpi/cxx/intracomm.h	/^  Create_intercomm(int local_leader, const Comm& peer_comm,$/;"	p	class:Intracomm	access:public	signature:(int local_leader, const Comm& peer_comm, int remote_leader, int tag) const
Intracomm::Dup	openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm Dup() const;$/;"	p	class:Intracomm	access:public	signature:() const
Intracomm::Exscan	openmpi/ompi/mpi/cxx/intracomm.h	/^  Exscan(const void *sendbuf, void *recvbuf, int count,$/;"	p	class:Intracomm	access:public	signature:(const void *sendbuf, void *recvbuf, int count, const Datatype & datatype, const Op & op) const
Intracomm::Intracomm	openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm() { }$/;"	f	class:Intracomm	access:public	signature:()
Intracomm::Intracomm	openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm(const Comm_Null& data) : Comm(data) { }$/;"	f	class:Intracomm	access:public	signature:(const Comm_Null& data)
Intracomm::Intracomm	openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm(const Intracomm& data) : Comm(data.mpi_comm) { }$/;"	f	class:Intracomm	access:public	signature:(const Intracomm& data)
Intracomm::Intracomm	openmpi/ompi/mpi/cxx/intracomm.h	/^  inline Intracomm(MPI_Comm data);$/;"	p	class:Intracomm	access:public	signature:(MPI_Comm data)
Intracomm::Scan	openmpi/ompi/mpi/cxx/intracomm.h	/^  Scan(const void *sendbuf, void *recvbuf, int count, $/;"	p	class:Intracomm	access:public	signature:(const void *sendbuf, void *recvbuf, int count, const Datatype & datatype, const Op & op) const
Intracomm::Spawn	openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Spawn(const char* command, const char* argv[],$/;"	p	class:Intracomm	access:public	signature:(const char* command, const char* argv[], int maxprocs, const Info& info, int root) const
Intracomm::Spawn	openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Spawn(const char* command, const char* argv[],$/;"	p	class:Intracomm	access:public	signature:(const char* command, const char* argv[], int maxprocs, const Info& info, int root, int array_of_errcodes[]) const
Intracomm::Spawn_multiple	openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Spawn_multiple(int count, const char* array_of_commands[],$/;"	p	class:Intracomm	access:public	signature:(int count, const char* array_of_commands[], const char** array_of_argv[], const int array_of_maxprocs[], const Info array_of_info[], int root)
Intracomm::Spawn_multiple	openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Spawn_multiple(int count, const char* array_of_commands[],$/;"	p	class:Intracomm	access:public	signature:(int count, const char* array_of_commands[], const char** array_of_argv[], const int array_of_maxprocs[], const Info array_of_info[], int root, int array_of_errcodes[])
Intracomm::Split	openmpi/ompi/mpi/cxx/intracomm.h	/^  Split(int color, int key) const;$/;"	p	class:Intracomm	access:public	signature:(int color, int key) const
Intracomm::convert_info_to_mpi_info	openmpi/ompi/mpi/cxx/intracomm.h	/^  static inline MPI_Info *convert_info_to_mpi_info(int p_nbr, $/;"	p	class:Intracomm	access:protected	signature:(int p_nbr, const Info p_info_tbl[])
Intracomm::operator =	openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm& operator=(const Comm_Null& data) {$/;"	f	class:Intracomm	access:public	signature:(const Comm_Null& data)
Intracomm::operator =	openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm& operator=(const Intracomm& data) {$/;"	f	class:Intracomm	access:public	signature:(const Intracomm& data)
Intracomm::operator =	openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm& operator=(const MPI_Comm& data) {$/;"	f	class:Intracomm	access:public	signature:(const MPI_Comm& data)
Iprobe	openmpi/ompi/mpi/cxx/comm.h	/^  virtual bool Iprobe(int source, int tag) const;$/;"	p	class:Comm	access:public	signature:(int source, int tag) const
Iprobe	openmpi/ompi/mpi/cxx/comm.h	/^  virtual bool Iprobe(int source, int tag, Status & status) const;$/;"	p	class:Comm	access:public	signature:(int source, int tag, Status & status) const
Iprobe	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Iprobe(int source, int tag) const$/;"	f	class:MPI::Comm	signature:(int source, int tag) const
Iprobe	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Iprobe(int source, int tag, MPI::Status & status) const$/;"	f	class:MPI::Comm	signature:(int source, int tag, MPI::Status & status) const
Iread	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iread(void* buf, int count, $/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
Iread	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iread(void* buf, int count, $/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
Iread_at	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iread_at(MPI::Offset offset, void* buf, int count, $/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
Iread_at	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iread_at(MPI::Offset offset, void* buf, int count, $/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
Iread_shared	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iread_shared(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
Iread_shared	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iread_shared(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
Irecv	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Irecv(void *buf, int count,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int source, int tag) const
Irecv	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Irecv(void *buf, int count,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int source, int tag) const
Irsend	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Irsend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Irsend	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Irsend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Is_cancelled	openmpi/ompi/mpi/cxx/status.h	/^  virtual bool Is_cancelled() const;$/;"	p	class:Status	access:public	signature:() const
Is_cancelled	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Is_cancelled() const$/;"	f	class:MPI::Status	signature:() const
Is_commutative	openmpi/ompi/mpi/cxx/op.h	/^  virtual bool Is_commutative(void) const;$/;"	p	class:Op	access:public	signature:(void) const
Is_commutative	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Is_commutative(void) const$/;"	f	class:MPI::Op	signature:(void) const
Is_finalized	openmpi/ompi/mpi/cxx/functions.h	/^Is_finalized();$/;"	p	signature:()
Is_finalized	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Is_finalized()$/;"	f	class:MPI	signature:()
Is_initialized	openmpi/ompi/mpi/cxx/functions.h	/^Is_initialized();$/;"	p	signature:()
Is_initialized	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Is_initialized()$/;"	f	class:MPI	signature:()
Is_inter	openmpi/ompi/mpi/cxx/comm.h	/^  virtual bool Is_inter() const;$/;"	p	class:Comm	access:public	signature:() const
Is_inter	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Is_inter() const$/;"	f	class:MPI::Comm	signature:() const
Is_thread_main	openmpi/ompi/mpi/cxx/functions.h	/^Is_thread_main();$/;"	p	signature:()
Is_thread_main	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Is_thread_main()$/;"	f	class:MPI	signature:()
Isend	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Isend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Isend	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Isend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Issend	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Request Issend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Issend	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Issend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Iwrite	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iwrite(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Iwrite	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iwrite(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Iwrite_at	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iwrite_at(MPI::Offset offset, const void* buf, $/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
Iwrite_at	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iwrite_at(MPI::Offset offset, const void* buf, $/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
Iwrite_shared	openmpi/ompi/mpi/cxx/file.h	/^  MPI::Request Iwrite_shared(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Iwrite_shared	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iwrite_shared(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Join	openmpi/ompi/mpi/cxx/comm.h	/^  static Intercomm Join(const int fd);$/;"	p	class:Comm	access:public	signature:(const int fd)
Join	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Join(const int fd) $/;"	f	class:MPI::Comm	signature:(const int fd)
KEYVAL_INVALID	openmpi/ompi/mpi/cxx/constants.h	/^static const int KEYVAL_INVALID = MPI_KEYVAL_INVALID;$/;"	v
LAND	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Op LAND;$/;"	x
LASTUSEDCODE	openmpi/ompi/mpi/cxx/constants.h	/^static const int LASTUSEDCODE = MPI_LASTUSEDCODE;$/;"	v
LB	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype LB;$/;"	x
LOCK_EXCLUSIVE	openmpi/ompi/mpi/cxx/constants.h	/^static const int LOCK_EXCLUSIVE = MPI_LOCK_EXCLUSIVE;$/;"	v
LOCK_SHARED	openmpi/ompi/mpi/cxx/constants.h	/^static const int LOCK_SHARED = MPI_LOCK_SHARED;$/;"	v
LOCK_SHARED	openmpi/ompi/mpi/cxx/mpicxx.h	/^static const int LOCK_SHARED = ompi_synch_lock_shared;$/;"	v
LOCK_SHARED	openmpi/ompi/mpi/cxx/mpicxx.h	85;"	d
LOGICAL	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype LOGICAL;$/;"	x
LONG	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype LONG;$/;"	x
LONG_DOUBLE	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype LONG_DOUBLE;$/;"	x
LONG_DOUBLE_COMPLEX	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype LONG_DOUBLE_COMPLEX;$/;"	x
LONG_DOUBLE_INT	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype LONG_DOUBLE_INT;$/;"	x
LONG_INT	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype LONG_INT;$/;"	x
LONG_LONG	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype LONG_LONG;$/;"	x
LONG_LONG_INT	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype LONG_LONG_INT;$/;"	x
LOR	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Op LOR;$/;"	x
LXOR	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Op LXOR;$/;"	x
Lock	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Lock(int lock_type, int rank, int assert) const;$/;"	p	class:Win	access:public	signature:(int lock_type, int rank, int assert) const
Lock	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Lock(int lock_type, int rank, int assert) const $/;"	f	class:MPI::Win	signature:(int lock_type, int rank, int assert) const
Lookup_name	openmpi/ompi/mpi/cxx/functions.h	/^Lookup_name(const char* service_name, const Info& info, char* port_name);$/;"	p	signature:(const char* service_name, const Info& info, char* port_name)
Lookup_name	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Lookup_name(const char * service_name, $/;"	f	class:MPI	signature:(const char * service_name, const MPI::Info& info, char* port_name)
MAX	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Op MAX;$/;"	x
MAXLOC	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Op MAXLOC;$/;"	x
MAX_DATAREP_STRING	openmpi/ompi/mpi/cxx/constants.h	/^static const int MAX_DATAREP_STRING = MPI_MAX_DATAREP_STRING;$/;"	v
MAX_ERROR_STRING	openmpi/ompi/mpi/cxx/constants.h	/^static const int MAX_ERROR_STRING = MPI_MAX_ERROR_STRING;$/;"	v
MAX_INFO_KEY	openmpi/ompi/mpi/cxx/constants.h	/^static const int MAX_INFO_KEY = MPI_MAX_INFO_KEY;$/;"	v
MAX_INFO_VAL	openmpi/ompi/mpi/cxx/constants.h	/^static const int MAX_INFO_VAL = MPI_MAX_INFO_VAL;$/;"	v
MAX_OBJECT_NAME	openmpi/ompi/mpi/cxx/constants.h	/^static const int MAX_OBJECT_NAME = MPI_MAX_OBJECT_NAME;$/;"	v
MAX_PORT_NAME	openmpi/ompi/mpi/cxx/constants.h	/^static const int MAX_PORT_NAME = MPI_MAX_PORT_NAME;$/;"	v
MAX_PROCESSOR_NAME	openmpi/ompi/mpi/cxx/constants.h	/^static const int MAX_PROCESSOR_NAME = MPI_MAX_PROCESSOR_NAME;$/;"	v
MIN	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Op MIN;$/;"	x
MINLOC	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Op MINLOC;$/;"	x
MODE_APPEND	openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_APPEND = MPI_MODE_APPEND;$/;"	v
MODE_CREATE	openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_CREATE = MPI_MODE_CREATE;$/;"	v
MODE_DELETE_ON_CLOSE	openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_DELETE_ON_CLOSE = MPI_MODE_DELETE_ON_CLOSE;$/;"	v
MODE_EXCL	openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_EXCL = MPI_MODE_EXCL;$/;"	v
MODE_NOCHECK	openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_NOCHECK = MPI_MODE_NOCHECK;$/;"	v
MODE_NOPRECEDE	openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_NOPRECEDE = MPI_MODE_NOPRECEDE;$/;"	v
MODE_NOPUT	openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_NOPUT = MPI_MODE_NOPUT;$/;"	v
MODE_NOSTORE	openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_NOSTORE = MPI_MODE_NOSTORE;$/;"	v
MODE_NOSUCCEED	openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_NOSUCCEED = MPI_MODE_NOSUCCEED;$/;"	v
MODE_RDONLY	openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_RDONLY = MPI_MODE_RDONLY;$/;"	v
MODE_RDWR	openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_RDWR = MPI_MODE_RDWR;$/;"	v
MODE_SEQUENTIAL	openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_SEQUENTIAL = MPI_MODE_SEQUENTIAL;$/;"	v
MODE_UNIQUE_OPEN	openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_UNIQUE_OPEN = MPI_MODE_UNIQUE_OPEN;$/;"	v
MODE_WRONLY	openmpi/ompi/mpi/cxx/constants.h	/^static const int MODE_WRONLY = MPI_MODE_WRONLY;$/;"	v
MPI	openmpi/ompi/mpi/cxx/mpicxx.h	/^namespace MPI {$/;"	n
MPI::Add_error_class	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Add_error_class()$/;"	f	class:MPI	signature:()
MPI::Add_error_code	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Add_error_code(int errorclass)$/;"	f	class:MPI	signature:(int errorclass)
MPI::Add_error_string	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Add_error_string(int errorcode, const char* string)$/;"	f	class:MPI	signature:(int errorcode, const char* string)
MPI::Aint	openmpi/ompi/mpi/cxx/mpicxx.h	/^  typedef MPI_Aint Aint;$/;"	t	namespace:MPI
MPI::Alloc_mem	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Alloc_mem(MPI::Aint size, const MPI::Info& info) $/;"	f	class:MPI	signature:(MPI::Aint size, const MPI::Info& info)
MPI::Attach_buffer	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Attach_buffer(void* buffer, int size)$/;"	f	class:MPI	signature:(void* buffer, int size)
MPI::Cartcomm	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Cartcomm;$/;"	x
MPI::Cartcomm::Cartcomm	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Cartcomm(const MPI_Comm& data) {$/;"	f	class:MPI::Cartcomm	signature:(const MPI_Comm& data)
MPI::Cartcomm::Clone	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Clone() const$/;"	f	class:MPI::Cartcomm	signature:() const
MPI::Cartcomm::Dup	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Dup() const$/;"	f	class:MPI::Cartcomm	signature:() const
MPI::Cartcomm::Get_cart_rank	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Get_cart_rank(const int coords[]) const $/;"	f	class:MPI::Cartcomm	signature:(const int coords[]) const
MPI::Cartcomm::Get_coords	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Get_coords(int rank, int maxdims, int coords[]) const $/;"	f	class:MPI::Cartcomm	signature:(int rank, int maxdims, int coords[]) const
MPI::Cartcomm::Get_dim	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Get_dim() const $/;"	f	class:MPI::Cartcomm	signature:() const
MPI::Cartcomm::Get_topo	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Get_topo(int maxdims, int dims[], bool periods[],$/;"	f	class:MPI::Cartcomm	signature:(int maxdims, int dims[], bool periods[], int coords[]) const
MPI::Cartcomm::Map	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Map(int ndims, const int dims[], const bool periods[]) const $/;"	f	class:MPI::Cartcomm	signature:(int ndims, const int dims[], const bool periods[]) const
MPI::Cartcomm::Shift	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Shift(int direction, int disp,$/;"	f	class:MPI::Cartcomm	signature:(int direction, int disp, int &rank_source, int &rank_dest) const
MPI::Cartcomm::Sub	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Sub(const bool remain_dims[]) const$/;"	f	class:MPI::Cartcomm	signature:(const bool remain_dims[]) const
MPI::Close_port	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Close_port(const char* port_name) $/;"	f	class:MPI	signature:(const char* port_name)
MPI::Comm	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Comm;$/;"	x
MPI::Comm::Abort	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Abort(int errorcode) $/;"	f	class:MPI::Comm	signature:(int errorcode)
MPI::Comm::Allgather	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Allgather(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype) const
MPI::Comm::Allgatherv	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Allgatherv(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, const int recvcounts[], const int displs[], const MPI::Datatype & recvtype) const
MPI::Comm::Allreduce	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Allreduce(const void *sendbuf, void *recvbuf, int count,$/;"	f	class:MPI::Comm	signature:(const void *sendbuf, void *recvbuf, int count, const MPI::Datatype & datatype, const MPI::Op& op) const
MPI::Comm::Alltoall	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Alltoall(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype) const
MPI::Comm::Alltoallv	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Alltoallv(const void *sendbuf, const int sendcounts[], $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI::Datatype & sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], const MPI::Datatype & recvtype) const
MPI::Comm::Alltoallw	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Alltoallw(const void *sendbuf, const int sendcounts[],$/;"	f	class:MPI::Comm	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI::Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const MPI::Datatype recvtypes[]) const
MPI::Comm::Barrier	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Barrier() const$/;"	f	class:MPI::Comm	signature:() const
MPI::Comm::Bcast	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Bcast(void *buffer, int count, $/;"	f	class:MPI::Comm	signature:(void *buffer, int count, const MPI::Datatype& datatype, int root) const
MPI::Comm::Bsend	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Bsend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Bsend_init	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Bsend_init(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Call_errhandler	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Call_errhandler(int errorcode) const$/;"	f	class:MPI::Comm	signature:(int errorcode) const
MPI::Comm::Compare	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Compare(const MPI::Comm & comm1,$/;"	f	class:MPI::Comm	signature:(const MPI::Comm & comm1, const MPI::Comm & comm2)
MPI::Comm::Create_keyval	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Create_keyval(MPI::Comm::Copy_attr_function* comm_copy_attr_fn,$/;"	f	class:MPI::Comm	signature:(MPI::Comm::Copy_attr_function* comm_copy_attr_fn, MPI::Comm::Delete_attr_function* comm_delete_attr_fn, void* extra_state)
MPI::Comm::Create_keyval	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Create_keyval(MPI::Comm::Copy_attr_function* comm_copy_attr_fn,$/;"	f	class:MPI::Comm	signature:(MPI::Comm::Copy_attr_function* comm_copy_attr_fn, MPI_Comm_delete_attr_function* comm_delete_attr_fn, void* extra_state)
MPI::Comm::Create_keyval	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Create_keyval(MPI_Comm_copy_attr_function* comm_copy_attr_fn,$/;"	f	class:MPI::Comm	signature:(MPI_Comm_copy_attr_function* comm_copy_attr_fn, MPI::Comm::Delete_attr_function* comm_delete_attr_fn, void* extra_state)
MPI::Comm::Create_keyval	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Create_keyval(MPI_Comm_copy_attr_function* comm_copy_attr_fn,$/;"	f	class:MPI::Comm	signature:(MPI_Comm_copy_attr_function* comm_copy_attr_fn, MPI_Comm_delete_attr_function* comm_delete_attr_fn, void* extra_state)
MPI::Comm::DUP_FN	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::DUP_FN(const MPI::Comm& oldcomm, int comm_keyval,$/;"	f	class:MPI::Comm	signature:(const MPI::Comm& oldcomm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, bool& flag)
MPI::Comm::Delete_attr	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Delete_attr(int comm_keyval)$/;"	f	class:MPI::Comm	signature:(int comm_keyval)
MPI::Comm::Disconnect	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Disconnect()$/;"	f	class:MPI::Comm	signature:()
MPI::Comm::Free	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Free(void) $/;"	f	class:MPI::Comm	signature:(void)
MPI::Comm::Free_keyval	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Free_keyval(int& comm_keyval)$/;"	f	class:MPI::Comm	signature:(int& comm_keyval)
MPI::Comm::Gather	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Gather(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int root) const
MPI::Comm::Gatherv	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Gatherv(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, const int recvcounts[], const int displs[], const MPI::Datatype & recvtype, int root) const
MPI::Comm::Get_attr	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_attr(int comm_keyval, void* attribute_val) const$/;"	f	class:MPI::Comm	signature:(int comm_keyval, void* attribute_val) const
MPI::Comm::Get_errhandler	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_errhandler() const$/;"	f	class:MPI::Comm	signature:() const
MPI::Comm::Get_group	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_group() const $/;"	f	class:MPI::Comm	signature:() const
MPI::Comm::Get_name	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_name(char* comm_name, int& resultlen) const$/;"	f	class:MPI::Comm	signature:(char* comm_name, int& resultlen) const
MPI::Comm::Get_parent	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_parent()$/;"	f	class:MPI::Comm	signature:()
MPI::Comm::Get_rank	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_rank() const $/;"	f	class:MPI::Comm	signature:() const
MPI::Comm::Get_size	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_size() const $/;"	f	class:MPI::Comm	signature:() const
MPI::Comm::Get_topology	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Get_topology() const $/;"	f	class:MPI::Comm	signature:() const
MPI::Comm::Ibsend	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Ibsend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Iprobe	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Iprobe(int source, int tag) const$/;"	f	class:MPI::Comm	signature:(int source, int tag) const
MPI::Comm::Iprobe	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Iprobe(int source, int tag, MPI::Status & status) const$/;"	f	class:MPI::Comm	signature:(int source, int tag, MPI::Status & status) const
MPI::Comm::Irecv	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Irecv(void *buf, int count,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int source, int tag) const
MPI::Comm::Irsend	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Irsend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Is_inter	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Is_inter() const$/;"	f	class:MPI::Comm	signature:() const
MPI::Comm::Isend	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Isend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Issend	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Issend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Join	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Join(const int fd) $/;"	f	class:MPI::Comm	signature:(const int fd)
MPI::Comm::NULL_COPY_FN	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::NULL_COPY_FN(const MPI::Comm& \/* oldcomm *\/, $/;"	f	class:MPI::Comm	signature:(const MPI::Comm& , int , void* , void* , void* , bool& flag)
MPI::Comm::NULL_DELETE_FN	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::NULL_DELETE_FN(MPI::Comm& \/* comm *\/, $/;"	f	class:MPI::Comm	signature:(MPI::Comm& , int , void* , void* )
MPI::Comm::Probe	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Probe(int source, int tag) const$/;"	f	class:MPI::Comm	signature:(int source, int tag) const
MPI::Comm::Probe	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Probe(int source, int tag, MPI::Status & status) const$/;"	f	class:MPI::Comm	signature:(int source, int tag, MPI::Status & status) const
MPI::Comm::Recv	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Recv(void *buf, int count, const MPI::Datatype & datatype,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int source, int tag) const
MPI::Comm::Recv	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Recv(void *buf, int count, const MPI::Datatype & datatype,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int source, int tag, MPI::Status & status) const
MPI::Comm::Recv_init	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Recv_init(void *buf, int count,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int source, int tag) const
MPI::Comm::Reduce	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Reduce(const void *sendbuf, void *recvbuf, int count, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, void *recvbuf, int count, const MPI::Datatype & datatype, const MPI::Op& op, int root) const
MPI::Comm::Reduce_scatter	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Reduce_scatter(const void *sendbuf, void *recvbuf, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, void *recvbuf, int recvcounts[], const MPI::Datatype & datatype, const MPI::Op& op) const
MPI::Comm::Rsend	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Rsend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Rsend_init	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Rsend_init(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Scatter	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Scatter(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int root) const
MPI::Comm::Scatterv	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Scatterv(const void *sendbuf, const int sendcounts[], $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, const int sendcounts[], const int displs[], const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int root) const
MPI::Comm::Send	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Send(const void *buf, int count, $/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Send_init	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Send_init(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Sendrecv	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Sendrecv(const void *sendbuf, int sendcount,$/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, int dest, int sendtag, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int source, int recvtag) const
MPI::Comm::Sendrecv	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Sendrecv(const void *sendbuf, int sendcount,$/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, int dest, int sendtag, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int source, int recvtag, MPI::Status & status) const
MPI::Comm::Sendrecv_replace	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Sendrecv_replace(void *buf, int count,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int dest, int sendtag, int source, int recvtag) const
MPI::Comm::Sendrecv_replace	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Sendrecv_replace(void *buf, int count,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int dest, int sendtag, int source, int recvtag, MPI::Status & status) const
MPI::Comm::Set_attr	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Set_attr(int comm_keyval, const void* attribute_val) const$/;"	f	class:MPI::Comm	signature:(int comm_keyval, const void* attribute_val) const
MPI::Comm::Set_errhandler	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Set_errhandler(const MPI::Errhandler& errhandler)$/;"	f	class:MPI::Comm	signature:(const MPI::Errhandler& errhandler)
MPI::Comm::Set_name	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Set_name(const char* comm_name) $/;"	f	class:MPI::Comm	signature:(const char* comm_name)
MPI::Comm::Ssend	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Ssend(const void *buf, int count, $/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm::Ssend_init	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Ssend_init(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
MPI::Comm_Null	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Comm_Null;$/;"	x
MPI::Compute_dims	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Compute_dims(int nnodes, int ndims, int dims[])$/;"	f	class:MPI	signature:(int nnodes, int ndims, int dims[])
MPI::Datatype	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Datatype;$/;"	x
MPI::Datatype::Commit	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Commit() $/;"	f	class:MPI::Datatype	signature:()
MPI::Datatype::Create_contiguous	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_contiguous(int count) const$/;"	f	class:MPI::Datatype	signature:(int count) const
MPI::Datatype::Create_darray	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_darray(int size, int rank, int ndims,$/;"	f	class:MPI::Datatype	signature:(int size, int rank, int ndims, const int array_of_gsizes[], const int array_of_distribs[], const int array_of_dargs[], const int array_of_psizes[], int order) const
MPI::Datatype::Create_f90_complex	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_f90_complex(int p, int r)$/;"	f	class:MPI::Datatype	signature:(int p, int r)
MPI::Datatype::Create_f90_integer	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_f90_integer(int r)$/;"	f	class:MPI::Datatype	signature:(int r)
MPI::Datatype::Create_f90_real	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_f90_real(int p, int r)$/;"	f	class:MPI::Datatype	signature:(int p, int r)
MPI::Datatype::Create_hindexed	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_hindexed(int count, const int array_of_blocklengths[],$/;"	f	class:MPI::Datatype	signature:(int count, const int array_of_blocklengths[], const MPI::Aint array_of_displacements[]) const
MPI::Datatype::Create_hvector	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_hvector(int count, int blocklength,$/;"	f	class:MPI::Datatype	signature:(int count, int blocklength, MPI::Aint stride) const
MPI::Datatype::Create_indexed	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_indexed(int count,$/;"	f	class:MPI::Datatype	signature:(int count, const int array_of_blocklengths[], const int array_of_displacements[]) const
MPI::Datatype::Create_indexed_block	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_indexed_block(int count, int blocklength,$/;"	f	class:MPI::Datatype	signature:(int count, int blocklength, const int array_of_displacements[]) const
MPI::Datatype::Create_keyval	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_keyval(MPI::Datatype::Copy_attr_function* type_copy_attr_fn,$/;"	f	class:MPI::Datatype	signature:(MPI::Datatype::Copy_attr_function* type_copy_attr_fn, MPI::Datatype::Delete_attr_function* type_delete_attr_fn, void* extra_state)
MPI::Datatype::Create_keyval	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_keyval(MPI::Datatype::Copy_attr_function* type_copy_attr_fn,$/;"	f	class:MPI::Datatype	signature:(MPI::Datatype::Copy_attr_function* type_copy_attr_fn, MPI_Type_delete_attr_function* type_delete_attr_fn, void* extra_state)
MPI::Datatype::Create_keyval	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_keyval(MPI_Type_copy_attr_function* type_copy_attr_fn,$/;"	f	class:MPI::Datatype	signature:(MPI_Type_copy_attr_function* type_copy_attr_fn, MPI::Datatype::Delete_attr_function* type_delete_attr_fn, void* extra_state)
MPI::Datatype::Create_keyval	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_keyval(MPI_Type_copy_attr_function* type_copy_attr_fn,$/;"	f	class:MPI::Datatype	signature:(MPI_Type_copy_attr_function* type_copy_attr_fn, MPI_Type_delete_attr_function* type_delete_attr_fn, void* extra_state)
MPI::Datatype::Create_resized	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_resized(const MPI::Aint lb, const MPI::Aint extent) const$/;"	f	class:MPI::Datatype	signature:(const MPI::Aint lb, const MPI::Aint extent) const
MPI::Datatype::Create_struct	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_struct(int count, const int array_of_blocklengths[],$/;"	f	class:MPI::Datatype	signature:(int count, const int array_of_blocklengths[], const MPI::Aint array_of_displacements[], const MPI::Datatype array_of_types[])
MPI::Datatype::Create_subarray	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_subarray(int ndims, const int array_of_sizes[],$/;"	f	class:MPI::Datatype	signature:(int ndims, const int array_of_sizes[], const int array_of_subsizes[], const int array_of_starts[], int order) const
MPI::Datatype::Create_vector	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Create_vector(int count, int blocklength,$/;"	f	class:MPI::Datatype	signature:(int count, int blocklength, int stride) const
MPI::Datatype::Delete_attr	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Delete_attr(int type_keyval)$/;"	f	class:MPI::Datatype	signature:(int type_keyval)
MPI::Datatype::Dup	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Dup() const$/;"	f	class:MPI::Datatype	signature:() const
MPI::Datatype::Free_keyval	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Free_keyval(int& type_keyval)$/;"	f	class:MPI::Datatype	signature:(int& type_keyval)
MPI::Datatype::Get_attr	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_attr(int type_keyval,$/;"	f	class:MPI::Datatype	signature:(int type_keyval, void* attribute_val) const
MPI::Datatype::Get_contents	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_contents(int max_integers, int max_addresses,$/;"	f	class:MPI::Datatype	signature:(int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], MPI::Aint array_of_addresses[], MPI::Datatype array_of_datatypes[]) const
MPI::Datatype::Get_envelope	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_envelope(int& num_integers, int& num_addresses,$/;"	f	class:MPI::Datatype	signature:(int& num_integers, int& num_addresses, int& num_datatypes, int& combiner) const
MPI::Datatype::Get_extent	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_extent(MPI::Aint& lb, MPI::Aint& extent) const$/;"	f	class:MPI::Datatype	signature:(MPI::Aint& lb, MPI::Aint& extent) const
MPI::Datatype::Get_name	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_name(char* type_name, int& resultlen) const$/;"	f	class:MPI::Datatype	signature:(char* type_name, int& resultlen) const
MPI::Datatype::Get_size	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_size() const $/;"	f	class:MPI::Datatype	signature:() const
MPI::Datatype::Get_true_extent	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Get_true_extent(MPI::Aint& lb, MPI::Aint& extent) const$/;"	f	class:MPI::Datatype	signature:(MPI::Aint& lb, MPI::Aint& extent) const
MPI::Datatype::Match_size	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Match_size(int typeclass, int size)$/;"	f	class:MPI::Datatype	signature:(int typeclass, int size)
MPI::Datatype::Pack	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Pack(const void* inbuf, int incount,$/;"	f	class:MPI::Datatype	signature:(const void* inbuf, int incount, void *outbuf, int outsize, int& position, const MPI::Comm &comm) const
MPI::Datatype::Pack_external	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Pack_external(const char* datarep, const void* inbuf, int incount,$/;"	f	class:MPI::Datatype	signature:(const char* datarep, const void* inbuf, int incount, void* outbuf, MPI::Aint outsize, MPI::Aint& position) const
MPI::Datatype::Pack_external_size	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Pack_external_size(const char* datarep, int incount) const$/;"	f	class:MPI::Datatype	signature:(const char* datarep, int incount) const
MPI::Datatype::Pack_size	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Pack_size(int incount, const MPI::Comm& comm) const $/;"	f	class:MPI::Datatype	signature:(int incount, const MPI::Comm& comm) const
MPI::Datatype::Set_attr	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Set_attr(int type_keyval, const void* attribute_val)$/;"	f	class:MPI::Datatype	signature:(int type_keyval, const void* attribute_val)
MPI::Datatype::Set_name	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Set_name(const char* type_name)$/;"	f	class:MPI::Datatype	signature:(const char* type_name)
MPI::Datatype::Unpack	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Unpack(const void* inbuf, int insize,$/;"	f	class:MPI::Datatype	signature:(const void* inbuf, int insize, void *outbuf, int outcount, int& position, const MPI::Comm& comm) const
MPI::Datatype::Unpack_external	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Unpack_external(const char* datarep, const void* inbuf,$/;"	f	class:MPI::Datatype	signature:(const char* datarep, const void* inbuf, MPI::Aint insize, MPI::Aint& position, void* outbuf, int outcount) const
MPI::Detach_buffer	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Detach_buffer(void*& buffer)$/;"	f	class:MPI	signature:(void*& buffer)
MPI::Errhandler	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Errhandler;$/;"	x
MPI::Errhandler::Free	openmpi/ompi/mpi/cxx/errhandler_inln.h	/^MPI::Errhandler::Free()$/;"	f	class:MPI::Errhandler	signature:()
MPI::File	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class File;$/;"	x
MPI::File::Call_errhandler	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Call_errhandler(int errorcode) const$/;"	f	class:MPI::File	signature:(int errorcode) const
MPI::File::Delete	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Delete(const char* filename, const MPI::Info& info) $/;"	f	class:MPI::File	signature:(const char* filename, const MPI::Info& info)
MPI::File::Get_amode	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_amode() const $/;"	f	class:MPI::File	signature:() const
MPI::File::Get_atomicity	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_atomicity() const $/;"	f	class:MPI::File	signature:() const
MPI::File::Get_byte_offset	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_byte_offset(const MPI::Offset disp) const $/;"	f	class:MPI::File	signature:(const MPI::Offset disp) const
MPI::File::Get_errhandler	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_errhandler() const$/;"	f	class:MPI::File	signature:() const
MPI::File::Get_group	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_group() const$/;"	f	class:MPI::File	signature:() const
MPI::File::Get_info	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_info() const$/;"	f	class:MPI::File	signature:() const
MPI::File::Get_position	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_position() const$/;"	f	class:MPI::File	signature:() const
MPI::File::Get_position_shared	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_position_shared() const$/;"	f	class:MPI::File	signature:() const
MPI::File::Get_size	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_size() const$/;"	f	class:MPI::File	signature:() const
MPI::File::Get_type_extent	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_type_extent(const MPI::Datatype& datatype) const$/;"	f	class:MPI::File	signature:(const MPI::Datatype& datatype) const
MPI::File::Get_view	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Get_view(MPI::Offset& disp,$/;"	f	class:MPI::File	signature:(MPI::Offset& disp, MPI::Datatype& etype, MPI::Datatype& filetype, char* datarep) const
MPI::File::Iread	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iread(void* buf, int count, $/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Iread_at	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iread_at(MPI::Offset offset, void* buf, int count, $/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Iread_shared	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iread_shared(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Iwrite	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iwrite(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Iwrite_at	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iwrite_at(MPI::Offset offset, const void* buf, $/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Iwrite_shared	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Iwrite_shared(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Open	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Open(const MPI::Intracomm& comm,$/;"	f	class:MPI::File	signature:(const MPI::Intracomm& comm, const char* filename, int amode, const MPI::Info& info)
MPI::File::Preallocate	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Preallocate(MPI::Offset size)$/;"	f	class:MPI::File	signature:(MPI::Offset size)
MPI::File::Read	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Read	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Read_all	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Read_all	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Read_all_begin	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all_begin(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Read_all_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all_end(void* buf)$/;"	f	class:MPI::File	signature:(void* buf)
MPI::File::Read_all_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all_end(void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(void* buf, MPI::Status& status)
MPI::File::Read_at	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at(MPI::Offset offset, $/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Read_at	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at(MPI::Offset offset, void* buf, int count,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Read_at_all	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all(MPI::Offset offset, void* buf, int count, $/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Read_at_all	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all(MPI::Offset offset, void* buf, int count,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Read_at_all_begin	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all_begin(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Read_at_all_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all_end(void* buf)$/;"	f	class:MPI::File	signature:(void* buf)
MPI::File::Read_at_all_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all_end(void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(void* buf, MPI::Status& status)
MPI::File::Read_ordered	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Read_ordered	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Read_ordered_begin	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered_begin(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Read_ordered_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered_end(void* buf)$/;"	f	class:MPI::File	signature:(void* buf)
MPI::File::Read_ordered_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered_end(void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(void* buf, MPI::Status& status)
MPI::File::Read_shared	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_shared(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Read_shared	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_shared(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Seek	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Seek(MPI::Offset offset, int whence)$/;"	f	class:MPI::File	signature:(MPI::Offset offset, int whence)
MPI::File::Seek_shared	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Seek_shared(MPI::Offset offset, int whence)$/;"	f	class:MPI::File	signature:(MPI::Offset offset, int whence)
MPI::File::Set_atomicity	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_atomicity(bool flag)$/;"	f	class:MPI::File	signature:(bool flag)
MPI::File::Set_errhandler	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_errhandler(const MPI::Errhandler& errhandler) const$/;"	f	class:MPI::File	signature:(const MPI::Errhandler& errhandler) const
MPI::File::Set_info	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_info(const MPI::Info& info)$/;"	f	class:MPI::File	signature:(const MPI::Info& info)
MPI::File::Set_size	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_size(MPI::Offset size)$/;"	f	class:MPI::File	signature:(MPI::Offset size)
MPI::File::Set_view	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_view(MPI::Offset disp,$/;"	f	class:MPI::File	signature:(MPI::Offset disp, const MPI::Datatype& etype, const MPI::Datatype& filetype, const char* datarep, const MPI::Info& info)
MPI::File::Sync	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Sync()$/;"	f	class:MPI::File	signature:()
MPI::File::Write	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Write	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Write_all	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Write_all	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Write_all_begin	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all_begin(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Write_all_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all_end(const void* buf)$/;"	f	class:MPI::File	signature:(const void* buf)
MPI::File::Write_all_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all_end(const void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(const void* buf, MPI::Status& status)
MPI::File::Write_at	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Write_at	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Write_at_all	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Write_at_all	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Write_at_all_begin	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all_begin(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Write_at_all_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all_end(const void* buf)$/;"	f	class:MPI::File	signature:(const void* buf)
MPI::File::Write_at_all_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all_end(const void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(const void* buf, MPI::Status& status)
MPI::File::Write_ordered	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Write_ordered	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::File::Write_ordered_begin	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered_begin(const void* buf, int count, $/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Write_ordered_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered_end(const void* buf)$/;"	f	class:MPI::File	signature:(const void* buf)
MPI::File::Write_ordered_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered_end(const void* buf,$/;"	f	class:MPI::File	signature:(const void* buf, MPI::Status& status)
MPI::File::Write_shared	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_shared(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
MPI::File::Write_shared	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_shared(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
MPI::Finalize	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Finalize()$/;"	f	class:MPI	signature:()
MPI::Fint	openmpi/ompi/mpi/cxx/mpicxx.h	/^  typedef MPI_Fint Fint;$/;"	t	namespace:MPI
MPI::Free_mem	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Free_mem(void* base)$/;"	f	class:MPI	signature:(void* base)
MPI::Get_address	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_address(void* location)$/;"	f	class:MPI	signature:(void* location)
MPI::Get_error_class	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_error_class(int errorcode) $/;"	f	class:MPI	signature:(int errorcode)
MPI::Get_error_string	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_error_string(int errorcode, char* string, int& resultlen)$/;"	f	class:MPI	signature:(int errorcode, char* string, int& resultlen)
MPI::Get_processor_name	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_processor_name(char* name, int& resultlen)$/;"	f	class:MPI	signature:(char* name, int& resultlen)
MPI::Get_version	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Get_version(int& version, int& subversion)$/;"	f	class:MPI	signature:(int& version, int& subversion)
MPI::Graphcomm	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Graphcomm;$/;"	x
MPI::Graphcomm::Clone	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Clone() const$/;"	f	class:MPI::Graphcomm	signature:() const
MPI::Graphcomm::Dup	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Dup() const$/;"	f	class:MPI::Graphcomm	signature:() const
MPI::Graphcomm::Get_dims	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Get_dims(int nnodes[], int nedges[]) const $/;"	f	class:MPI::Graphcomm	signature:(int nnodes[], int nedges[]) const
MPI::Graphcomm::Get_neighbors	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Get_neighbors(int rank, int maxneighbors, $/;"	f	class:MPI::Graphcomm	signature:(int rank, int maxneighbors, int neighbors[]) const
MPI::Graphcomm::Get_neighbors_count	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Get_neighbors_count(int rank) const $/;"	f	class:MPI::Graphcomm	signature:(int rank) const
MPI::Graphcomm::Get_topo	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Get_topo(int maxindex, int maxedges, int index[], $/;"	f	class:MPI::Graphcomm	signature:(int maxindex, int maxedges, int index[], int edges[]) const
MPI::Graphcomm::Graphcomm	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Graphcomm(const MPI_Comm& data) {$/;"	f	class:MPI::Graphcomm	signature:(const MPI_Comm& data)
MPI::Graphcomm::Map	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Map(int nnodes, const int index[], $/;"	f	class:MPI::Graphcomm	signature:(int nnodes, const int index[], const int edges[]) const
MPI::Grequest	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Grequest;$/;"	x
MPI::Grequest::Complete	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Grequest::Complete()$/;"	f	class:MPI::Grequest	signature:()
MPI::Grequest::Start	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Grequest::Start(Query_function *query_fn, Free_function *free_fn,$/;"	f	class:MPI::Grequest	signature:(Query_function *query_fn, Free_function *free_fn, Cancel_function *cancel_fn, void *extra)
MPI::Group	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Group;$/;"	x
MPI::Group::Compare	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Compare(const MPI::Group& group1, const MPI::Group& group2)$/;"	f	class:MPI::Group	signature:(const MPI::Group& group1, const MPI::Group& group2)
MPI::Group::Difference	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Difference(const MPI::Group &group1, const MPI::Group &group2)$/;"	f	class:MPI::Group	signature:(const MPI::Group &group1, const MPI::Group &group2)
MPI::Group::Excl	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Excl(int n, const int ranks[]) const$/;"	f	class:MPI::Group	signature:(int n, const int ranks[]) const
MPI::Group::Free	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Free()$/;"	f	class:MPI::Group	signature:()
MPI::Group::Get_rank	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Get_rank() const $/;"	f	class:MPI::Group	signature:() const
MPI::Group::Get_size	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Get_size() const$/;"	f	class:MPI::Group	signature:() const
MPI::Group::Incl	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Incl(int n, const int ranks[]) const$/;"	f	class:MPI::Group	signature:(int n, const int ranks[]) const
MPI::Group::Intersect	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Intersect(const MPI::Group &group1, const MPI::Group &group2)$/;"	f	class:MPI::Group	signature:(const MPI::Group &group1, const MPI::Group &group2)
MPI::Group::Range_excl	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Range_excl(int n, const int ranges[][3]) const$/;"	f	class:MPI::Group	signature:(int n, const int ranges[][3]) const
MPI::Group::Range_incl	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Range_incl(int n, const int ranges[][3]) const$/;"	f	class:MPI::Group	signature:(int n, const int ranges[][3]) const
MPI::Group::Translate_ranks	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Translate_ranks (const MPI::Group& group1, int n,$/;"	f	class:MPI::Group	signature:(const MPI::Group& group1, int n, const int ranks1[], const MPI::Group& group2, int ranks2[])
MPI::Group::Union	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Union(const MPI::Group &group1, const MPI::Group &group2)$/;"	f	class:MPI::Group	signature:(const MPI::Group &group1, const MPI::Group &group2)
MPI::Info	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Info;$/;"	x
MPI::Info::Create	openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Create()$/;"	f	class:MPI::Info	signature:()
MPI::Info::Delete	openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Delete(const char* key)$/;"	f	class:MPI::Info	signature:(const char* key)
MPI::Info::Dup	openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Dup() const$/;"	f	class:MPI::Info	signature:() const
MPI::Info::Free	openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Free()$/;"	f	class:MPI::Info	signature:()
MPI::Info::Get	openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Get(const char* key, int valuelen, char* value) const$/;"	f	class:MPI::Info	signature:(const char* key, int valuelen, char* value) const
MPI::Info::Get_nkeys	openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Get_nkeys() const$/;"	f	class:MPI::Info	signature:() const
MPI::Info::Get_nthkey	openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Get_nthkey(int n, char* key) const$/;"	f	class:MPI::Info	signature:(int n, char* key) const
MPI::Info::Get_valuelen	openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Get_valuelen(const char* key, int& valuelen) const$/;"	f	class:MPI::Info	signature:(const char* key, int& valuelen) const
MPI::Info::Set	openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Set(const char* key, const char* value)$/;"	f	class:MPI::Info	signature:(const char* key, const char* value)
MPI::Init	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Init()$/;"	f	class:MPI	signature:()
MPI::Init	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Init(int& argc, char**& argv)$/;"	f	class:MPI	signature:(int& argc, char**& argv)
MPI::Init_thread	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Init_thread(int required)$/;"	f	class:MPI	signature:(int required)
MPI::Init_thread	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Init_thread(int& argc, char**& argv, int required)$/;"	f	class:MPI	signature:(int& argc, char**& argv, int required)
MPI::Intercomm	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Intercomm;$/;"	x
MPI::Intercomm::Clone	openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Clone() const$/;"	f	class:MPI::Intercomm	signature:() const
MPI::Intercomm::Create	openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Create(const Group& group) const$/;"	f	class:MPI::Intercomm	signature:(const Group& group) const
MPI::Intercomm::Dup	openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Dup() const$/;"	f	class:MPI::Intercomm	signature:() const
MPI::Intercomm::Get_remote_group	openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Get_remote_group() const $/;"	f	class:MPI::Intercomm	signature:() const
MPI::Intercomm::Get_remote_size	openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Get_remote_size() const $/;"	f	class:MPI::Intercomm	signature:() const
MPI::Intercomm::Merge	openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Merge(bool high) const$/;"	f	class:MPI::Intercomm	signature:(bool high) const
MPI::Intercomm::Split	openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Split(int color, int key) const$/;"	f	class:MPI::Intercomm	signature:(int color, int key) const
MPI::Intracomm	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Intracomm;$/;"	x
MPI::Intracomm::Accept	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Accept(const char* port_name, $/;"	f	class:MPI::Intracomm	signature:(const char* port_name, const MPI::Info& info, int root) const
MPI::Intracomm::Clone	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Clone() const$/;"	f	class:MPI::Intracomm	signature:() const
MPI::Intracomm::Connect	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Connect(const char* port_name,$/;"	f	class:MPI::Intracomm	signature:(const char* port_name, const MPI::Info& info, int root) const
MPI::Intracomm::Create	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Create(const MPI::Group& group) const$/;"	f	class:MPI::Intracomm	signature:(const MPI::Group& group) const
MPI::Intracomm::Create_cart	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Create_cart(int ndims, const int dims[],$/;"	f	class:MPI::Intracomm	signature:(int ndims, const int dims[], const bool periods[], bool reorder) const
MPI::Intracomm::Create_graph	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Create_graph(int nnodes, const int index[],$/;"	f	class:MPI::Intracomm	signature:(int nnodes, const int index[], const int edges[], bool reorder) const
MPI::Intracomm::Create_intercomm	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Create_intercomm(int local_leader,$/;"	f	class:MPI::Intracomm	signature:(int local_leader, const MPI::Comm& peer_comm, int remote_leader, int tag) const
MPI::Intracomm::Dup	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Dup() const$/;"	f	class:MPI::Intracomm	signature:() const
MPI::Intracomm::Exscan	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Exscan(const void *sendbuf, void *recvbuf, int count,$/;"	f	class:MPI::Intracomm	signature:(const void *sendbuf, void *recvbuf, int count, const MPI::Datatype & datatype, const MPI::Op& op) const
MPI::Intracomm::Intracomm	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Intracomm(MPI_Comm data) {$/;"	f	class:MPI::Intracomm	signature:(MPI_Comm data)
MPI::Intracomm::Scan	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Scan(const void *sendbuf, void *recvbuf, int count, $/;"	f	class:MPI::Intracomm	signature:(const void *sendbuf, void *recvbuf, int count, const MPI::Datatype & datatype, const MPI::Op& op) const
MPI::Intracomm::Spawn	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Spawn(const char* command, const char* argv[],$/;"	f	class:MPI::Intracomm	signature:(const char* command, const char* argv[], int maxprocs, const MPI::Info& info, int root) const
MPI::Intracomm::Spawn	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Spawn(const char* command, const char* argv[],$/;"	f	class:MPI::Intracomm	signature:(const char* command, const char* argv[], int maxprocs, const MPI::Info& info, int root, int array_of_errcodes[]) const
MPI::Intracomm::Spawn_multiple	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Spawn_multiple(int count, $/;"	f	class:MPI::Intracomm	signature:(int count, const char* array_of_commands[], const char** array_of_argv[], const int array_of_maxprocs[], const Info array_of_info[], int root)
MPI::Intracomm::Spawn_multiple	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Spawn_multiple(int count,$/;"	f	class:MPI::Intracomm	signature:(int count, const char* array_of_commands[], const char** array_of_argv[], const int array_of_maxprocs[], const Info array_of_info[], int root, int array_of_errcodes[])
MPI::Intracomm::Split	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Split(int color, int key) const$/;"	f	class:MPI::Intracomm	signature:(int color, int key) const
MPI::Intracomm::convert_info_to_mpi_info	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::convert_info_to_mpi_info(int p_nbr, const Info p_info_tbl[])$/;"	f	class:MPI::Intracomm	signature:(int p_nbr, const Info p_info_tbl[])
MPI::Is_finalized	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Is_finalized()$/;"	f	class:MPI	signature:()
MPI::Is_initialized	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Is_initialized()$/;"	f	class:MPI	signature:()
MPI::Is_thread_main	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Is_thread_main()$/;"	f	class:MPI	signature:()
MPI::Lookup_name	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Lookup_name(const char * service_name, $/;"	f	class:MPI	signature:(const char * service_name, const MPI::Info& info, char* port_name)
MPI::Offset	openmpi/ompi/mpi/cxx/mpicxx.h	/^  typedef MPI_Offset Offset;$/;"	t	namespace:MPI
MPI::Op	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Op;$/;"	x
MPI::Op::Free	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Free()$/;"	f	class:MPI::Op	signature:()
MPI::Op::Init	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Init(MPI::User_function *func, bool commute)$/;"	f	class:MPI::Op	signature:(MPI::User_function *func, bool commute)
MPI::Op::Is_commutative	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Is_commutative(void) const$/;"	f	class:MPI::Op	signature:(void) const
MPI::Op::Op	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Op() : mpi_op(MPI_OP_NULL) { }$/;"	f	class:MPI::Op	signature:()
MPI::Op::Op	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Op(MPI_Op i) : mpi_op(i) { }$/;"	f	class:MPI::Op	signature:(MPI_Op i)
MPI::Op::Op	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Op(const MPI::Op& op)$/;"	f	class:MPI::Op	signature:(const MPI::Op& op)
MPI::Op::Reduce_local	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Reduce_local(const void *inbuf, void *inoutbuf, int count, $/;"	f	class:MPI::Op	signature:(const void *inbuf, void *inoutbuf, int count, const MPI::Datatype& datatype) const
MPI::Op::operator !=	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator!= (const MPI::Op &a) { return (bool)!(*this == a); }$/;"	f	class:MPI::Op	signature:(const MPI::Op &a)
MPI::Op::operator =	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator= (const MPI_Op &i) { mpi_op = i; return *this; }$/;"	f	class:MPI::Op	signature:(const MPI_Op &i)
MPI::Op::operator =	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator=(const MPI::Op& op) {$/;"	f	class:MPI::Op	signature:(const MPI::Op& op)
MPI::Op::operator ==	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator== (const MPI::Op &a) { return (bool)(mpi_op == a.mpi_op); }$/;"	f	class:MPI::Op	signature:(const MPI::Op &a)
MPI::Op::operator MPI_Op	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator MPI_Op () const { return mpi_op; }$/;"	f	class:MPI::Op	signature:() const
MPI::Op::~Op	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::~Op() $/;"	f	class:MPI::Op	signature:()
MPI::Open_port	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Open_port(const MPI::Info& info, char* port_name)$/;"	f	class:MPI	signature:(const MPI::Info& info, char* port_name)
MPI::Pcontrol	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Pcontrol(const int level, ...)$/;"	f	class:MPI	signature:(const int level, ...)
MPI::Prequest::Start	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Prequest::Start()$/;"	f	class:MPI::Prequest	signature:()
MPI::Prequest::Startall	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Prequest::Startall(int count, MPI:: Prequest array_of_requests[])$/;"	f	class:MPI::Prequest	signature:(int count, MPI:: Prequest array_of_requests[])
MPI::Publish_name	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Publish_name(const char* service_name, $/;"	f	class:MPI	signature:(const char* service_name, const MPI::Info& info, const char* port_name)
MPI::Query_thread	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Query_thread()$/;"	f	class:MPI	signature:()
MPI::Real_init	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Real_init()$/;"	f	class:MPI	signature:()
MPI::Request	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Request;$/;"	x
MPI::Request::Cancel	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Cancel(void) const$/;"	f	class:MPI::Request	signature:(void) const
MPI::Request::Free	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Free() $/;"	f	class:MPI::Request	signature:()
MPI::Request::Get_status	openmpi/ompi/mpi/cxx/request_inln.h	/^inline bool MPI::Request::Get_status() const$/;"	f	class:MPI::Request	signature:() const
MPI::Request::Get_status	openmpi/ompi/mpi/cxx/request_inln.h	/^inline bool MPI::Request::Get_status(MPI::Status& status) const$/;"	f	class:MPI::Request	signature:(MPI::Status& status) const
MPI::Request::Test	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Test() $/;"	f	class:MPI::Request	signature:()
MPI::Request::Test	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Test(MPI::Status &status) $/;"	f	class:MPI::Request	signature:(MPI::Status &status)
MPI::Request::Testall	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testall(int count, MPI::Request req_array[])$/;"	f	class:MPI::Request	signature:(int count, MPI::Request req_array[])
MPI::Request::Testall	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testall(int count, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int count, MPI::Request req_array[], MPI::Status stat_array[])
MPI::Request::Testany	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testany(int count, MPI::Request array[], int& index)$/;"	f	class:MPI::Request	signature:(int count, MPI::Request array[], int& index)
MPI::Request::Testany	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testany(int count, MPI::Request array[],$/;"	f	class:MPI::Request	signature:(int count, MPI::Request array[], int& index, MPI::Status& status)
MPI::Request::Testsome	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testsome(int incount, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int incount, MPI::Request req_array[], int array_of_indices[])
MPI::Request::Testsome	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testsome(int incount, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int incount, MPI::Request req_array[], int array_of_indices[], MPI::Status stat_array[])
MPI::Request::Wait	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Wait() $/;"	f	class:MPI::Request	signature:()
MPI::Request::Wait	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Wait(MPI::Status &status) $/;"	f	class:MPI::Request	signature:(MPI::Status &status)
MPI::Request::Waitall	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitall(int count, MPI::Request req_array[])$/;"	f	class:MPI::Request	signature:(int count, MPI::Request req_array[])
MPI::Request::Waitall	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitall(int count, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int count, MPI::Request req_array[], MPI::Status stat_array[])
MPI::Request::Waitany	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitany(int count, MPI::Request array[])$/;"	f	class:MPI::Request	signature:(int count, MPI::Request array[])
MPI::Request::Waitany	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitany(int count, MPI::Request array[],$/;"	f	class:MPI::Request	signature:(int count, MPI::Request array[], MPI::Status& status)
MPI::Request::Waitsome	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitsome(int incount, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int incount, MPI::Request req_array[], int array_of_indices[])
MPI::Request::Waitsome	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitsome(int incount, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int incount, MPI::Request req_array[], int array_of_indices[], MPI::Status stat_array[])
MPI::Status	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Status;$/;"	x
MPI::Status::Get_count	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_count(const MPI::Datatype& datatype) const$/;"	f	class:MPI::Status	signature:(const MPI::Datatype& datatype) const
MPI::Status::Get_elements	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_elements(const MPI::Datatype& datatype) const$/;"	f	class:MPI::Status	signature:(const MPI::Datatype& datatype) const
MPI::Status::Get_error	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_error() const$/;"	f	class:MPI::Status	signature:() const
MPI::Status::Get_source	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_source() const$/;"	f	class:MPI::Status	signature:() const
MPI::Status::Get_tag	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Get_tag() const$/;"	f	class:MPI::Status	signature:() const
MPI::Status::Is_cancelled	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Is_cancelled() const$/;"	f	class:MPI::Status	signature:() const
MPI::Status::Set_cancelled	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_cancelled(bool flag)$/;"	f	class:MPI::Status	signature:(bool flag)
MPI::Status::Set_elements	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_elements(const MPI::Datatype& datatype, int count)$/;"	f	class:MPI::Status	signature:(const MPI::Datatype& datatype, int count)
MPI::Status::Set_error	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_error(int error)$/;"	f	class:MPI::Status	signature:(int error)
MPI::Status::Set_source	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_source(int source)$/;"	f	class:MPI::Status	signature:(int source)
MPI::Status::Set_tag	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_tag(int tag)$/;"	f	class:MPI::Status	signature:(int tag)
MPI::Unpublish_name	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Unpublish_name(const char* service_name, $/;"	f	class:MPI	signature:(const char* service_name, const MPI::Info& info, const char* port_name)
MPI::User_function	openmpi/ompi/mpi/cxx/mpicxx.h	/^  typedef void User_function(const void* invec, void* inoutvec, int len,$/;"	t	namespace:MPI
MPI::Win	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Win;$/;"	x
MPI::Win::Accumulate	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Accumulate(const void* origin_addr, int origin_count,$/;"	f	class:MPI::Win	signature:(const void* origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype, const MPI::Op& op) const
MPI::Win::Call_errhandler	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Call_errhandler(int errorcode) const$/;"	f	class:MPI::Win	signature:(int errorcode) const
MPI::Win::Complete	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Complete() const $/;"	f	class:MPI::Win	signature:() const
MPI::Win::Create	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create(const void* base, MPI::Aint size, $/;"	f	class:MPI::Win	signature:(const void* base, MPI::Aint size, int disp_unit, const MPI::Info& info, const MPI::Intracomm& comm)
MPI::Win::Create_keyval	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create_keyval(MPI::Win::Copy_attr_function* win_copy_attr_fn,$/;"	f	class:MPI::Win	signature:(MPI::Win::Copy_attr_function* win_copy_attr_fn, MPI::Win::Delete_attr_function* win_delete_attr_fn, void* extra_state)
MPI::Win::Create_keyval	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create_keyval(MPI::Win::Copy_attr_function* win_copy_attr_fn,$/;"	f	class:MPI::Win	signature:(MPI::Win::Copy_attr_function* win_copy_attr_fn, MPI_Win_delete_attr_function* win_delete_attr_fn, void* extra_state)
MPI::Win::Create_keyval	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create_keyval(MPI_Win_copy_attr_function* win_copy_attr_fn,$/;"	f	class:MPI::Win	signature:(MPI_Win_copy_attr_function* win_copy_attr_fn, MPI::Win::Delete_attr_function* win_delete_attr_fn, void* extra_state)
MPI::Win::Create_keyval	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Create_keyval(MPI_Win_copy_attr_function* win_copy_attr_fn,$/;"	f	class:MPI::Win	signature:(MPI_Win_copy_attr_function* win_copy_attr_fn, MPI_Win_delete_attr_function* win_delete_attr_fn, void* extra_state)
MPI::Win::Delete_attr	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Delete_attr(int win_keyval) $/;"	f	class:MPI::Win	signature:(int win_keyval)
MPI::Win::Fence	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Fence(int assert) const $/;"	f	class:MPI::Win	signature:(int assert) const
MPI::Win::Free_keyval	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Free_keyval(int& win_keyval)$/;"	f	class:MPI::Win	signature:(int& win_keyval)
MPI::Win::Get	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get(const void *origin_addr, int origin_count, $/;"	f	class:MPI::Win	signature:(const void *origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype) const
MPI::Win::Get_attr	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get_attr(const Win& win, int win_keyval,$/;"	f	class:MPI::Win	signature:(const Win& win, int win_keyval, void* attribute_val) const
MPI::Win::Get_attr	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get_attr(int win_keyval, void* attribute_val) const$/;"	f	class:MPI::Win	signature:(int win_keyval, void* attribute_val) const
MPI::Win::Get_errhandler	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win:: Get_errhandler() const $/;"	f	class:MPI::Win	signature:() const
MPI::Win::Get_group	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get_group() const$/;"	f	class:MPI::Win	signature:() const
MPI::Win::Get_name	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Get_name(char* win_name, int& resultlen) const$/;"	f	class:MPI::Win	signature:(char* win_name, int& resultlen) const
MPI::Win::Lock	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Lock(int lock_type, int rank, int assert) const $/;"	f	class:MPI::Win	signature:(int lock_type, int rank, int assert) const
MPI::Win::Post	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Post(const MPI::Group& group, int assert) const $/;"	f	class:MPI::Win	signature:(const MPI::Group& group, int assert) const
MPI::Win::Put	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Put(const void* origin_addr, int origin_count, $/;"	f	class:MPI::Win	signature:(const void* origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype) const
MPI::Win::Set_attr	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Set_attr(int win_keyval, const void* attribute_val) $/;"	f	class:MPI::Win	signature:(int win_keyval, const void* attribute_val)
MPI::Win::Set_errhandler	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Set_errhandler(const MPI::Errhandler& errhandler) const$/;"	f	class:MPI::Win	signature:(const MPI::Errhandler& errhandler) const
MPI::Win::Set_name	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Set_name(const char* win_name) $/;"	f	class:MPI::Win	signature:(const char* win_name)
MPI::Win::Start	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Start(const MPI::Group& group, int assert) const$/;"	f	class:MPI::Win	signature:(const MPI::Group& group, int assert) const
MPI::Win::Test	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Test() const$/;"	f	class:MPI::Win	signature:() const
MPI::Win::Unlock	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Unlock(int rank) const$/;"	f	class:MPI::Win	signature:(int rank) const
MPI::Win::Wait	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Wait() const$/;"	f	class:MPI::Win	signature:() const
MPI::Wtick	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Wtick()$/;"	f	class:MPI	signature:()
MPI::Wtime	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Wtime()$/;"	f	class:MPI	signature:()
MPIO_Request	mpi.h	292;"	d
MPIO_Test	mpi.h	293;"	d
MPIO_Wait	mpi.h	294;"	d
MPIPP_H	openmpi/ompi/mpi/cxx/mpicxx.h	24;"	d
MPI_2COMPLEX	mpi.h	1068;"	d
MPI_2DOUBLE_COMPLEX	mpi.h	1069;"	d
MPI_2DOUBLE_PRECISION	mpi.h	1125;"	d
MPI_2INT	mpi.h	1059;"	d
MPI_2INTEGER	mpi.h	1126;"	d
MPI_2REAL	mpi.h	1124;"	d
MPI_AINT	mpi.h	1137;"	d
MPI_ANY_SOURCE	mpi.h	416;"	d
MPI_ANY_TAG	mpi.h	419;"	d
MPI_APPNUM	mpi.h	/^    MPI_APPNUM,$/;"	e	enum:__anon1
MPI_ARGVS_NULL	mpi.h	441;"	d
MPI_ARGV_NULL	mpi.h	440;"	d
MPI_Abort	mpi.h	/^OMPI_DECLSPEC  int MPI_Abort(MPI_Comm comm, int errorcode);$/;"	p	signature:(MPI_Comm comm, int errorcode)
MPI_Accumulate	mpi.h	/^OMPI_DECLSPEC  int MPI_Accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype,$/;"	p	signature:(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win)
MPI_Add_error_class	mpi.h	/^OMPI_DECLSPEC  int MPI_Add_error_class(int *errorclass);$/;"	p	signature:(int *errorclass)
MPI_Add_error_code	mpi.h	/^OMPI_DECLSPEC  int MPI_Add_error_code(int errorclass, int *errorcode);$/;"	p	signature:(int errorclass, int *errorcode)
MPI_Add_error_string	mpi.h	/^OMPI_DECLSPEC  int MPI_Add_error_string(int errorcode, const char *string);$/;"	p	signature:(int errorcode, const char *string)
MPI_Aint	mpi.h	/^typedef OPAL_PTRDIFF_TYPE MPI_Aint;$/;"	t
MPI_Allgather	mpi.h	/^OMPI_DECLSPEC  int MPI_Allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm)
MPI_Allgatherv	mpi.h	/^OMPI_DECLSPEC  int MPI_Allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm)
MPI_Alloc_mem	mpi.h	/^OMPI_DECLSPEC  int MPI_Alloc_mem(MPI_Aint size, MPI_Info info,$/;"	p	signature:(MPI_Aint size, MPI_Info info, void *baseptr)
MPI_Allreduce	mpi.h	/^OMPI_DECLSPEC  int MPI_Allreduce(const void *sendbuf, void *recvbuf, int count,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)
MPI_Alltoall	mpi.h	/^OMPI_DECLSPEC  int MPI_Alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm)
MPI_Alltoallv	mpi.h	/^OMPI_DECLSPEC  int MPI_Alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[],$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm)
MPI_Alltoallw	mpi.h	/^OMPI_DECLSPEC  int MPI_Alltoallw(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[],$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm)
MPI_BAND	mpi.h	1028;"	d
MPI_BOR	mpi.h	1030;"	d
MPI_BOTTOM	mpi.h	435;"	d
MPI_BSEND_OVERHEAD	mpi.h	437;"	d
MPI_BXOR	mpi.h	1032;"	d
MPI_BYTE	mpi.h	1040;"	d
MPI_Barrier	mpi.h	/^OMPI_DECLSPEC  int MPI_Barrier(MPI_Comm comm);$/;"	p	signature:(MPI_Comm comm)
MPI_Bcast	mpi.h	/^OMPI_DECLSPEC  int MPI_Bcast(void *buffer, int count, MPI_Datatype datatype,$/;"	p	signature:(void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm)
MPI_Bsend	mpi.h	/^OMPI_DECLSPEC  int MPI_Bsend(const void *buf, int count, MPI_Datatype datatype,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm)
MPI_Bsend_init	mpi.h	/^OMPI_DECLSPEC  int MPI_Bsend_init(const void *buf, int count, MPI_Datatype datatype,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request)
MPI_Buffer_attach	mpi.h	/^OMPI_DECLSPEC  int MPI_Buffer_attach(void *buffer, int size);$/;"	p	signature:(void *buffer, int size)
MPI_Buffer_detach	mpi.h	/^OMPI_DECLSPEC  int MPI_Buffer_detach(void *buffer, int *size);$/;"	p	signature:(void *buffer, int *size)
MPI_CART	mpi.h	426;"	d
MPI_CHAR	mpi.h	1042;"	d
MPI_CHARACTER	mpi.h	1072;"	d
MPI_COMBINER_CONTIGUOUS	mpi.h	/^  MPI_COMBINER_CONTIGUOUS,$/;"	e	enum:__anon4
MPI_COMBINER_DARRAY	mpi.h	/^  MPI_COMBINER_DARRAY,$/;"	e	enum:__anon4
MPI_COMBINER_DUP	mpi.h	/^  MPI_COMBINER_DUP,$/;"	e	enum:__anon4
MPI_COMBINER_F90_COMPLEX	mpi.h	/^  MPI_COMBINER_F90_COMPLEX,$/;"	e	enum:__anon4
MPI_COMBINER_F90_INTEGER	mpi.h	/^  MPI_COMBINER_F90_INTEGER,$/;"	e	enum:__anon4
MPI_COMBINER_F90_REAL	mpi.h	/^  MPI_COMBINER_F90_REAL,$/;"	e	enum:__anon4
MPI_COMBINER_HINDEXED	mpi.h	/^  MPI_COMBINER_HINDEXED,$/;"	e	enum:__anon4
MPI_COMBINER_HINDEXED_BLOCK	mpi.h	/^  MPI_COMBINER_HINDEXED_BLOCK$/;"	e	enum:__anon4
MPI_COMBINER_HINDEXED_INTEGER	mpi.h	/^  MPI_COMBINER_HINDEXED_INTEGER,$/;"	e	enum:__anon4
MPI_COMBINER_HVECTOR	mpi.h	/^  MPI_COMBINER_HVECTOR,$/;"	e	enum:__anon4
MPI_COMBINER_HVECTOR_INTEGER	mpi.h	/^  MPI_COMBINER_HVECTOR_INTEGER,$/;"	e	enum:__anon4
MPI_COMBINER_INDEXED	mpi.h	/^  MPI_COMBINER_INDEXED,$/;"	e	enum:__anon4
MPI_COMBINER_INDEXED_BLOCK	mpi.h	/^  MPI_COMBINER_INDEXED_BLOCK,$/;"	e	enum:__anon4
MPI_COMBINER_NAMED	mpi.h	/^  MPI_COMBINER_NAMED,$/;"	e	enum:__anon4
MPI_COMBINER_RESIZED	mpi.h	/^  MPI_COMBINER_RESIZED,$/;"	e	enum:__anon4
MPI_COMBINER_STRUCT	mpi.h	/^  MPI_COMBINER_STRUCT,$/;"	e	enum:__anon4
MPI_COMBINER_STRUCT_INTEGER	mpi.h	/^  MPI_COMBINER_STRUCT_INTEGER,$/;"	e	enum:__anon4
MPI_COMBINER_SUBARRAY	mpi.h	/^  MPI_COMBINER_SUBARRAY,$/;"	e	enum:__anon4
MPI_COMBINER_VECTOR	mpi.h	/^  MPI_COMBINER_VECTOR,$/;"	e	enum:__anon4
MPI_COMM_DUP_FN	mpi.h	792;"	d
MPI_COMM_NULL	mpi.h	738;"	d
MPI_COMM_NULL_COPY_FN	mpi.h	791;"	d
MPI_COMM_NULL_DELETE_FN	mpi.h	790;"	d
MPI_COMM_SELF	mpi.h	1017;"	d
MPI_COMM_TYPE_SHARED	mpi.h	/^  MPI_COMM_TYPE_SHARED$/;"	e	enum:__anon5
MPI_COMM_WORLD	mpi.h	1016;"	d
MPI_COMPLEX	mpi.h	1113;"	d
MPI_COMPLEX16	mpi.h	1118;"	d
MPI_COMPLEX32	mpi.h	1121;"	d
MPI_COMPLEX8	mpi.h	1115;"	d
MPI_CONGRUENT	mpi.h	/^  MPI_CONGRUENT,$/;"	e	enum:__anon2
MPI_CONVERSION_FN_NULL	mpi.h	805;"	d
MPI_COUNT	mpi.h	1156;"	d
MPI_CXX_BOOL	mpi.h	1150;"	d
MPI_CXX_DOUBLE_COMPLEX	mpi.h	1152;"	d
MPI_CXX_FLOAT_COMPLEX	mpi.h	1151;"	d
MPI_CXX_LONG_DOUBLE_COMPLEX	mpi.h	1153;"	d
MPI_C_BOOL	mpi.h	1139;"	d
MPI_C_COMPLEX	mpi.h	1141;"	d
MPI_C_DOUBLE_COMPLEX	mpi.h	1145;"	d
MPI_C_FLOAT_COMPLEX	mpi.h	1142;"	d
MPI_C_LONG_DOUBLE_COMPLEX	mpi.h	1148;"	d
MPI_Cancel	mpi.h	/^OMPI_DECLSPEC  int MPI_Cancel(MPI_Request *request);$/;"	p	signature:(MPI_Request *request)
MPI_Cart_coords	mpi.h	/^OMPI_DECLSPEC  int MPI_Cart_coords(MPI_Comm comm, int rank, int maxdims, int coords[]);$/;"	p	signature:(MPI_Comm comm, int rank, int maxdims, int coords[])
MPI_Cart_create	mpi.h	/^OMPI_DECLSPEC  int MPI_Cart_create(MPI_Comm old_comm, int ndims, const int dims[],$/;"	p	signature:(MPI_Comm old_comm, int ndims, const int dims[], const int periods[], int reorder, MPI_Comm *comm_cart)
MPI_Cart_get	mpi.h	/^OMPI_DECLSPEC  int MPI_Cart_get(MPI_Comm comm, int maxdims, int dims[],$/;"	p	signature:(MPI_Comm comm, int maxdims, int dims[], int periods[], int coords[])
MPI_Cart_map	mpi.h	/^OMPI_DECLSPEC  int MPI_Cart_map(MPI_Comm comm, int ndims, const int dims[],$/;"	p	signature:(MPI_Comm comm, int ndims, const int dims[], const int periods[], int *newrank)
MPI_Cart_rank	mpi.h	/^OMPI_DECLSPEC  int MPI_Cart_rank(MPI_Comm comm, const int coords[], int *rank);$/;"	p	signature:(MPI_Comm comm, const int coords[], int *rank)
MPI_Cart_shift	mpi.h	/^OMPI_DECLSPEC  int MPI_Cart_shift(MPI_Comm comm, int direction, int disp,$/;"	p	signature:(MPI_Comm comm, int direction, int disp, int *rank_source, int *rank_dest)
MPI_Cart_sub	mpi.h	/^OMPI_DECLSPEC  int MPI_Cart_sub(MPI_Comm comm, const int remain_dims[], MPI_Comm *new_comm);$/;"	p	signature:(MPI_Comm comm, const int remain_dims[], MPI_Comm *new_comm)
MPI_Cartdim_get	mpi.h	/^OMPI_DECLSPEC  int MPI_Cartdim_get(MPI_Comm comm, int *ndims);$/;"	p	signature:(MPI_Comm comm, int *ndims)
MPI_Close_port	mpi.h	/^OMPI_DECLSPEC  int MPI_Close_port(const char *port_name);$/;"	p	signature:(const char *port_name)
MPI_Comm	mpi.h	/^typedef struct ompi_communicator_t *MPI_Comm;$/;"	t	typeref:struct:ompi_communicator_t
MPI_Comm_accept	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_accept(const char *port_name, MPI_Info info, int root,$/;"	p	signature:(const char *port_name, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *newcomm)
MPI_Comm_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint MPI_Comm_c2f(MPI_Comm comm);$/;"	p	signature:(MPI_Comm comm)
MPI_Comm_call_errhandler	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_call_errhandler(MPI_Comm comm, int errorcode);$/;"	p	signature:(MPI_Comm comm, int errorcode)
MPI_Comm_compare	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int *result);$/;"	p	signature:(MPI_Comm comm1, MPI_Comm comm2, int *result)
MPI_Comm_connect	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_connect(const char *port_name, MPI_Info info, int root,$/;"	p	signature:(const char *port_name, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *newcomm)
MPI_Comm_copy_attr_function	mpi.h	/^typedef int (MPI_Comm_copy_attr_function)(MPI_Comm, int, void *,$/;"	t
MPI_Comm_create	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_create(MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm);$/;"	p	signature:(MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm)
MPI_Comm_create_errhandler	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_create_errhandler(MPI_Comm_errhandler_function *function,$/;"	p	signature:(MPI_Comm_errhandler_function *function, MPI_Errhandler *errhandler)
MPI_Comm_create_group	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_create_group(MPI_Comm comm, MPI_Group group, int tag, MPI_Comm *newcomm);$/;"	p	signature:(MPI_Comm comm, MPI_Group group, int tag, MPI_Comm *newcomm)
MPI_Comm_create_keyval	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_create_keyval(MPI_Comm_copy_attr_function *comm_copy_attr_fn,$/;"	p	signature:(MPI_Comm_copy_attr_function *comm_copy_attr_fn, MPI_Comm_delete_attr_function *comm_delete_attr_fn, int *comm_keyval, void *extra_state)
MPI_Comm_delete_attr	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval);$/;"	p	signature:(MPI_Comm comm, int comm_keyval)
MPI_Comm_delete_attr_function	mpi.h	/^typedef int (MPI_Comm_delete_attr_function)(MPI_Comm, int, void *, void *);$/;"	t
MPI_Comm_disconnect	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_disconnect(MPI_Comm *comm);$/;"	p	signature:(MPI_Comm *comm)
MPI_Comm_dup	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_dup(MPI_Comm comm, MPI_Comm *newcomm);$/;"	p	signature:(MPI_Comm comm, MPI_Comm *newcomm)
MPI_Comm_dup_with_info	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_dup_with_info(MPI_Comm comm, MPI_Info info, MPI_Comm *newcomm);$/;"	p	signature:(MPI_Comm comm, MPI_Info info, MPI_Comm *newcomm)
MPI_Comm_errhandler_function	mpi.h	/^typedef void (MPI_Comm_errhandler_function)(MPI_Comm *, int *, ...);$/;"	t
MPI_Comm_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_Comm MPI_Comm_f2c(MPI_Fint comm);$/;"	p	signature:(MPI_Fint comm)
MPI_Comm_free	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_free(MPI_Comm *comm);$/;"	p	signature:(MPI_Comm *comm)
MPI_Comm_free_keyval	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_free_keyval(int *comm_keyval);$/;"	p	signature:(int *comm_keyval)
MPI_Comm_get_attr	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_get_attr(MPI_Comm comm, int comm_keyval,$/;"	p	signature:(MPI_Comm comm, int comm_keyval, void *attribute_val, int *flag)
MPI_Comm_get_errhandler	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_get_errhandler(MPI_Comm comm, MPI_Errhandler *erhandler);$/;"	p	signature:(MPI_Comm comm, MPI_Errhandler *erhandler)
MPI_Comm_get_info	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_get_info(MPI_Comm comm, MPI_Info *info_used);$/;"	p	signature:(MPI_Comm comm, MPI_Info *info_used)
MPI_Comm_get_name	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_get_name(MPI_Comm comm, char *comm_name, int *resultlen);$/;"	p	signature:(MPI_Comm comm, char *comm_name, int *resultlen)
MPI_Comm_get_parent	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_get_parent(MPI_Comm *parent);$/;"	p	signature:(MPI_Comm *parent)
MPI_Comm_group	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_group(MPI_Comm comm, MPI_Group *group);$/;"	p	signature:(MPI_Comm comm, MPI_Group *group)
MPI_Comm_idup	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_idup(MPI_Comm comm, MPI_Comm *newcomm, MPI_Request *request);$/;"	p	signature:(MPI_Comm comm, MPI_Comm *newcomm, MPI_Request *request)
MPI_Comm_join	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_join(int fd, MPI_Comm *intercomm);$/;"	p	signature:(int fd, MPI_Comm *intercomm)
MPI_Comm_rank	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_rank(MPI_Comm comm, int *rank);$/;"	p	signature:(MPI_Comm comm, int *rank)
MPI_Comm_remote_group	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_remote_group(MPI_Comm comm, MPI_Group *group);$/;"	p	signature:(MPI_Comm comm, MPI_Group *group)
MPI_Comm_remote_size	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_remote_size(MPI_Comm comm, int *size);$/;"	p	signature:(MPI_Comm comm, int *size)
MPI_Comm_set_attr	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, void *attribute_val);$/;"	p	signature:(MPI_Comm comm, int comm_keyval, void *attribute_val)
MPI_Comm_set_errhandler	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_set_errhandler(MPI_Comm comm, MPI_Errhandler errhandler);$/;"	p	signature:(MPI_Comm comm, MPI_Errhandler errhandler)
MPI_Comm_set_info	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_set_info(MPI_Comm comm, MPI_Info info);$/;"	p	signature:(MPI_Comm comm, MPI_Info info)
MPI_Comm_set_name	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_set_name(MPI_Comm comm, const char *comm_name);$/;"	p	signature:(MPI_Comm comm, const char *comm_name)
MPI_Comm_size	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_size(MPI_Comm comm, int *size);$/;"	p	signature:(MPI_Comm comm, int *size)
MPI_Comm_spawn	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_spawn(const char *command, char *argv[], int maxprocs, MPI_Info info,$/;"	p	signature:(const char *command, char *argv[], int maxprocs, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[])
MPI_Comm_spawn_multiple	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_spawn_multiple(int count, char *array_of_commands[], char **array_of_argv[],$/;"	p	signature:(int count, char *array_of_commands[], char **array_of_argv[], const int array_of_maxprocs[], const MPI_Info array_of_info[], int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[])
MPI_Comm_split	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm *newcomm);$/;"	p	signature:(MPI_Comm comm, int color, int key, MPI_Comm *newcomm)
MPI_Comm_split_type	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_split_type(MPI_Comm comm, int split_type, int key, MPI_Info info, MPI_Comm *newcomm);$/;"	p	signature:(MPI_Comm comm, int split_type, int key, MPI_Info info, MPI_Comm *newcomm)
MPI_Comm_test_inter	mpi.h	/^OMPI_DECLSPEC  int MPI_Comm_test_inter(MPI_Comm comm, int *flag);$/;"	p	signature:(MPI_Comm comm, int *flag)
MPI_Compare_and_swap	mpi.h	/^OMPI_DECLSPEC  int MPI_Compare_and_swap(void *origin_addr, void *compare_addr,$/;"	p	signature:(void *origin_addr, void *compare_addr, void *result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Win win)
MPI_Copy_function	mpi.h	/^typedef int (MPI_Copy_function)(MPI_Comm, int, void *,$/;"	t
MPI_Count	mpi.h	/^typedef OMPI_MPI_COUNT_TYPE MPI_Count;$/;"	t
MPI_DATATYPE_NULL	mpi.h	1039;"	d
MPI_DISPLACEMENT_CURRENT	mpi.h	467;"	d
MPI_DISTRIBUTE_BLOCK	mpi.h	446;"	d
MPI_DISTRIBUTE_CYCLIC	mpi.h	447;"	d
MPI_DISTRIBUTE_DFLT_DARG	mpi.h	449;"	d
MPI_DISTRIBUTE_NONE	mpi.h	448;"	d
MPI_DIST_GRAPH	mpi.h	425;"	d
MPI_DOUBLE	mpi.h	1047;"	d
MPI_DOUBLE_COMPLEX	mpi.h	1123;"	d
MPI_DOUBLE_INT	mpi.h	1055;"	d
MPI_DOUBLE_PRECISION	mpi.h	1112;"	d
MPI_DUP_FN	mpi.h	784;"	d
MPI_Datarep_conversion_function	mpi.h	/^typedef int (MPI_Datarep_conversion_function)(void *, MPI_Datatype,$/;"	t
MPI_Datarep_extent_function	mpi.h	/^typedef int (MPI_Datarep_extent_function)(MPI_Datatype, MPI_Aint *, void *);$/;"	t
MPI_Datatype	mpi.h	/^typedef struct ompi_datatype_t *MPI_Datatype;$/;"	t	typeref:struct:ompi_datatype_t
MPI_Delete_function	mpi.h	/^typedef int (MPI_Delete_function)(MPI_Comm, int, void *, void *);$/;"	t
MPI_Dims_create	mpi.h	/^OMPI_DECLSPEC  int MPI_Dims_create(int nnodes, int ndims, int dims[]);$/;"	p	signature:(int nnodes, int ndims, int dims[])
MPI_Dist_graph_create	mpi.h	/^OMPI_DECLSPEC  int MPI_Dist_graph_create(MPI_Comm comm_old, int n, const int nodes[],$/;"	p	signature:(MPI_Comm comm_old, int n, const int nodes[], const int degrees[], const int targets[], const int weights[], MPI_Info info, int reorder, MPI_Comm * newcomm)
MPI_Dist_graph_create_adjacent	mpi.h	/^OMPI_DECLSPEC  int MPI_Dist_graph_create_adjacent(MPI_Comm comm_old,$/;"	p	signature:(MPI_Comm comm_old, int indegree, const int sources[], const int sourceweights[], int outdegree, const int destinations[], const int destweights[], MPI_Info info, int reorder, MPI_Comm *comm_dist_graph)
MPI_Dist_graph_neighbors	mpi.h	/^OMPI_DECLSPEC int MPI_Dist_graph_neighbors(MPI_Comm comm, int maxindegree,$/;"	p	signature:(MPI_Comm comm, int maxindegree, int sources[], int sourceweights[], int maxoutdegree, int destinations[], int destweights[])
MPI_Dist_graph_neighbors_count	mpi.h	/^OMPI_DECLSPEC  int MPI_Dist_graph_neighbors_count(MPI_Comm comm,$/;"	p	signature:(MPI_Comm comm, int *inneighbors, int *outneighbors, int *weighted)
MPI_ERRCODES_IGNORE	mpi.h	442;"	d
MPI_ERRHANDLER_NULL	mpi.h	742;"	d
MPI_ERROR	mpi.h	/^    int MPI_ERROR;$/;"	m	struct:ompi_status_public_t	access:public
MPI_ERRORS_ARE_FATAL	mpi.h	1158;"	d
MPI_ERRORS_RETURN	mpi.h	1159;"	d
MPI_ERR_ACCESS	mpi.h	553;"	d
MPI_ERR_AMODE	mpi.h	554;"	d
MPI_ERR_ARG	mpi.h	546;"	d
MPI_ERR_ASSERT	mpi.h	555;"	d
MPI_ERR_BAD_FILE	mpi.h	556;"	d
MPI_ERR_BASE	mpi.h	557;"	d
MPI_ERR_BUFFER	mpi.h	534;"	d
MPI_ERR_COMM	mpi.h	538;"	d
MPI_ERR_CONVERSION	mpi.h	558;"	d
MPI_ERR_COUNT	mpi.h	535;"	d
MPI_ERR_DIMS	mpi.h	545;"	d
MPI_ERR_DISP	mpi.h	559;"	d
MPI_ERR_DUP_DATAREP	mpi.h	560;"	d
MPI_ERR_FILE	mpi.h	563;"	d
MPI_ERR_FILE_EXISTS	mpi.h	561;"	d
MPI_ERR_FILE_IN_USE	mpi.h	562;"	d
MPI_ERR_GROUP	mpi.h	542;"	d
MPI_ERR_INFO	mpi.h	567;"	d
MPI_ERR_INFO_KEY	mpi.h	564;"	d
MPI_ERR_INFO_NOKEY	mpi.h	565;"	d
MPI_ERR_INFO_VALUE	mpi.h	566;"	d
MPI_ERR_INTERN	mpi.h	550;"	d
MPI_ERR_IN_STATUS	mpi.h	551;"	d
MPI_ERR_IO	mpi.h	568;"	d
MPI_ERR_KEYVAL	mpi.h	569;"	d
MPI_ERR_LASTCODE	mpi.h	609;"	d
MPI_ERR_LOCKTYPE	mpi.h	570;"	d
MPI_ERR_NAME	mpi.h	571;"	d
MPI_ERR_NOT_SAME	mpi.h	573;"	d
MPI_ERR_NO_MEM	mpi.h	572;"	d
MPI_ERR_NO_SPACE	mpi.h	574;"	d
MPI_ERR_NO_SUCH_FILE	mpi.h	575;"	d
MPI_ERR_OP	mpi.h	543;"	d
MPI_ERR_OTHER	mpi.h	549;"	d
MPI_ERR_PENDING	mpi.h	552;"	d
MPI_ERR_PORT	mpi.h	576;"	d
MPI_ERR_QUOTA	mpi.h	577;"	d
MPI_ERR_RANK	mpi.h	539;"	d
MPI_ERR_READ_ONLY	mpi.h	578;"	d
MPI_ERR_REQUEST	mpi.h	540;"	d
MPI_ERR_RMA_ATTACH	mpi.h	602;"	d
MPI_ERR_RMA_CONFLICT	mpi.h	579;"	d
MPI_ERR_RMA_FLAVOR	mpi.h	603;"	d
MPI_ERR_RMA_RANGE	mpi.h	601;"	d
MPI_ERR_RMA_SHARED	mpi.h	604;"	d
MPI_ERR_RMA_SYNC	mpi.h	580;"	d
MPI_ERR_ROOT	mpi.h	541;"	d
MPI_ERR_SERVICE	mpi.h	581;"	d
MPI_ERR_SIZE	mpi.h	582;"	d
MPI_ERR_SPAWN	mpi.h	583;"	d
MPI_ERR_SYSRESOURCE	mpi.h	611;"	d
MPI_ERR_TAG	mpi.h	537;"	d
MPI_ERR_TOPOLOGY	mpi.h	544;"	d
MPI_ERR_TRUNCATE	mpi.h	548;"	d
MPI_ERR_TYPE	mpi.h	536;"	d
MPI_ERR_UNKNOWN	mpi.h	547;"	d
MPI_ERR_UNSUPPORTED_DATAREP	mpi.h	584;"	d
MPI_ERR_UNSUPPORTED_OPERATION	mpi.h	585;"	d
MPI_ERR_WIN	mpi.h	586;"	d
MPI_Errhandler	mpi.h	/^typedef struct ompi_errhandler_t *MPI_Errhandler;$/;"	t	typeref:struct:ompi_errhandler_t
MPI_Errhandler_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint MPI_Errhandler_c2f(MPI_Errhandler errhandler);$/;"	p	signature:(MPI_Errhandler errhandler)
MPI_Errhandler_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_Errhandler MPI_Errhandler_f2c(MPI_Fint errhandler);$/;"	p	signature:(MPI_Fint errhandler)
MPI_Errhandler_free	mpi.h	/^OMPI_DECLSPEC  int MPI_Errhandler_free(MPI_Errhandler *errhandler);$/;"	p	signature:(MPI_Errhandler *errhandler)
MPI_Error_class	mpi.h	/^OMPI_DECLSPEC  int MPI_Error_class(int errorcode, int *errorclass);$/;"	p	signature:(int errorcode, int *errorclass)
MPI_Error_string	mpi.h	/^OMPI_DECLSPEC  int MPI_Error_string(int errorcode, char *string, int *resultlen);$/;"	p	signature:(int errorcode, char *string, int *resultlen)
MPI_Exscan	mpi.h	/^OMPI_DECLSPEC  int MPI_Exscan(const void *sendbuf, void *recvbuf, int count,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)
MPI_FILE_NULL	mpi.h	746;"	d
MPI_FLOAT	mpi.h	1046;"	d
MPI_FLOAT_INT	mpi.h	1054;"	d
MPI_F_STATUSES_IGNORE	mpi.h	/^OMPI_DECLSPEC extern MPI_Fint *MPI_F_STATUSES_IGNORE;$/;"	x
MPI_F_STATUS_IGNORE	mpi.h	/^OMPI_DECLSPEC extern MPI_Fint *MPI_F_STATUS_IGNORE;$/;"	x
MPI_Fetch_and_op	mpi.h	/^OMPI_DECLSPEC  int MPI_Fetch_and_op(void *origin_addr, void *result_addr, MPI_Datatype datatype,$/;"	p	signature:(void *origin_addr, void *result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Op op, MPI_Win win)
MPI_File	mpi.h	/^typedef struct ompi_file_t *MPI_File;$/;"	t	typeref:struct:ompi_file_t
MPI_File_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint MPI_File_c2f(MPI_File file);$/;"	p	signature:(MPI_File file)
MPI_File_call_errhandler	mpi.h	/^OMPI_DECLSPEC  int MPI_File_call_errhandler(MPI_File fh, int errorcode);$/;"	p	signature:(MPI_File fh, int errorcode)
MPI_File_close	mpi.h	/^OMPI_DECLSPEC  int MPI_File_close(MPI_File *fh);$/;"	p	signature:(MPI_File *fh)
MPI_File_create_errhandler	mpi.h	/^OMPI_DECLSPEC  int MPI_File_create_errhandler(MPI_File_errhandler_function *function,$/;"	p	signature:(MPI_File_errhandler_function *function, MPI_Errhandler *errhandler)
MPI_File_delete	mpi.h	/^OMPI_DECLSPEC  int MPI_File_delete(const char *filename, MPI_Info info);$/;"	p	signature:(const char *filename, MPI_Info info)
MPI_File_errhandler_function	mpi.h	/^typedef ompi_file_errhandler_fn MPI_File_errhandler_function;$/;"	t
MPI_File_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_File MPI_File_f2c(MPI_Fint file);$/;"	p	signature:(MPI_Fint file)
MPI_File_get_amode	mpi.h	/^OMPI_DECLSPEC  int MPI_File_get_amode(MPI_File fh, int *amode);$/;"	p	signature:(MPI_File fh, int *amode)
MPI_File_get_atomicity	mpi.h	/^OMPI_DECLSPEC  int MPI_File_get_atomicity(MPI_File fh, int *flag);$/;"	p	signature:(MPI_File fh, int *flag)
MPI_File_get_byte_offset	mpi.h	/^OMPI_DECLSPEC  int MPI_File_get_byte_offset(MPI_File fh, MPI_Offset offset,$/;"	p	signature:(MPI_File fh, MPI_Offset offset, MPI_Offset *disp)
MPI_File_get_errhandler	mpi.h	/^OMPI_DECLSPEC  int MPI_File_get_errhandler( MPI_File file, MPI_Errhandler *errhandler);$/;"	p	signature:( MPI_File file, MPI_Errhandler *errhandler)
MPI_File_get_group	mpi.h	/^OMPI_DECLSPEC  int MPI_File_get_group(MPI_File fh, MPI_Group *group);$/;"	p	signature:(MPI_File fh, MPI_Group *group)
MPI_File_get_info	mpi.h	/^OMPI_DECLSPEC  int MPI_File_get_info(MPI_File fh, MPI_Info *info_used);$/;"	p	signature:(MPI_File fh, MPI_Info *info_used)
MPI_File_get_position	mpi.h	/^OMPI_DECLSPEC  int MPI_File_get_position(MPI_File fh, MPI_Offset *offset);$/;"	p	signature:(MPI_File fh, MPI_Offset *offset)
MPI_File_get_position_shared	mpi.h	/^OMPI_DECLSPEC  int MPI_File_get_position_shared(MPI_File fh, MPI_Offset *offset);$/;"	p	signature:(MPI_File fh, MPI_Offset *offset)
MPI_File_get_size	mpi.h	/^OMPI_DECLSPEC  int MPI_File_get_size(MPI_File fh, MPI_Offset *size);$/;"	p	signature:(MPI_File fh, MPI_Offset *size)
MPI_File_get_type_extent	mpi.h	/^OMPI_DECLSPEC  int MPI_File_get_type_extent(MPI_File fh, MPI_Datatype datatype,$/;"	p	signature:(MPI_File fh, MPI_Datatype datatype, MPI_Aint *extent)
MPI_File_get_view	mpi.h	/^OMPI_DECLSPEC  int MPI_File_get_view(MPI_File fh, MPI_Offset *disp,$/;"	p	signature:(MPI_File fh, MPI_Offset *disp, MPI_Datatype *etype, MPI_Datatype *filetype, char *datarep)
MPI_File_iread	mpi.h	/^OMPI_DECLSPEC  int MPI_File_iread(MPI_File fh, void *buf, int count,$/;"	p	signature:(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *request)
MPI_File_iread_at	mpi.h	/^OMPI_DECLSPEC  int MPI_File_iread_at(MPI_File fh, MPI_Offset offset, void *buf,$/;"	p	signature:(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Request *request)
MPI_File_iread_shared	mpi.h	/^OMPI_DECLSPEC  int MPI_File_iread_shared(MPI_File fh, void *buf, int count,$/;"	p	signature:(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *request)
MPI_File_iwrite	mpi.h	/^OMPI_DECLSPEC  int MPI_File_iwrite(MPI_File fh, const void *buf, int count,$/;"	p	signature:(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request)
MPI_File_iwrite_at	mpi.h	/^OMPI_DECLSPEC  int MPI_File_iwrite_at(MPI_File fh, MPI_Offset offset, const void *buf,$/;"	p	signature:(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request)
MPI_File_iwrite_shared	mpi.h	/^OMPI_DECLSPEC  int MPI_File_iwrite_shared(MPI_File fh, const void *buf, int count,$/;"	p	signature:(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request)
MPI_File_open	mpi.h	/^OMPI_DECLSPEC  int MPI_File_open(MPI_Comm comm, const char *filename, int amode,$/;"	p	signature:(MPI_Comm comm, const char *filename, int amode, MPI_Info info, MPI_File *fh)
MPI_File_preallocate	mpi.h	/^OMPI_DECLSPEC  int MPI_File_preallocate(MPI_File fh, MPI_Offset size);$/;"	p	signature:(MPI_File fh, MPI_Offset size)
MPI_File_read	mpi.h	/^OMPI_DECLSPEC  int MPI_File_read(MPI_File fh, void *buf, int count,$/;"	p	signature:(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
MPI_File_read_all	mpi.h	/^OMPI_DECLSPEC  int MPI_File_read_all(MPI_File fh, void *buf, int count,$/;"	p	signature:(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
MPI_File_read_all_begin	mpi.h	/^OMPI_DECLSPEC  int MPI_File_read_all_begin(MPI_File fh, void *buf, int count,$/;"	p	signature:(MPI_File fh, void *buf, int count, MPI_Datatype datatype)
MPI_File_read_all_end	mpi.h	/^OMPI_DECLSPEC  int MPI_File_read_all_end(MPI_File fh, void *buf, MPI_Status *status);$/;"	p	signature:(MPI_File fh, void *buf, MPI_Status *status)
MPI_File_read_at	mpi.h	/^OMPI_DECLSPEC  int MPI_File_read_at(MPI_File fh, MPI_Offset offset, void *buf,$/;"	p	signature:(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
MPI_File_read_at_all	mpi.h	/^OMPI_DECLSPEC  int MPI_File_read_at_all(MPI_File fh, MPI_Offset offset, void *buf,$/;"	p	signature:(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
MPI_File_read_at_all_begin	mpi.h	/^OMPI_DECLSPEC  int MPI_File_read_at_all_begin(MPI_File fh, MPI_Offset offset, void *buf,$/;"	p	signature:(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype)
MPI_File_read_at_all_end	mpi.h	/^OMPI_DECLSPEC  int MPI_File_read_at_all_end(MPI_File fh, void *buf, MPI_Status *status);$/;"	p	signature:(MPI_File fh, void *buf, MPI_Status *status)
MPI_File_read_ordered	mpi.h	/^OMPI_DECLSPEC  int MPI_File_read_ordered(MPI_File fh, void *buf, int count,$/;"	p	signature:(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
MPI_File_read_ordered_begin	mpi.h	/^OMPI_DECLSPEC  int MPI_File_read_ordered_begin(MPI_File fh, void *buf, int count,$/;"	p	signature:(MPI_File fh, void *buf, int count, MPI_Datatype datatype)
MPI_File_read_ordered_end	mpi.h	/^OMPI_DECLSPEC  int MPI_File_read_ordered_end(MPI_File fh, void *buf, MPI_Status *status);$/;"	p	signature:(MPI_File fh, void *buf, MPI_Status *status)
MPI_File_read_shared	mpi.h	/^OMPI_DECLSPEC  int MPI_File_read_shared(MPI_File fh, void *buf, int count,$/;"	p	signature:(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
MPI_File_seek	mpi.h	/^OMPI_DECLSPEC  int MPI_File_seek(MPI_File fh, MPI_Offset offset, int whence);$/;"	p	signature:(MPI_File fh, MPI_Offset offset, int whence)
MPI_File_seek_shared	mpi.h	/^OMPI_DECLSPEC  int MPI_File_seek_shared(MPI_File fh, MPI_Offset offset, int whence);$/;"	p	signature:(MPI_File fh, MPI_Offset offset, int whence)
MPI_File_set_atomicity	mpi.h	/^OMPI_DECLSPEC  int MPI_File_set_atomicity(MPI_File fh, int flag);$/;"	p	signature:(MPI_File fh, int flag)
MPI_File_set_errhandler	mpi.h	/^OMPI_DECLSPEC  int MPI_File_set_errhandler( MPI_File file, MPI_Errhandler errhandler);$/;"	p	signature:( MPI_File file, MPI_Errhandler errhandler)
MPI_File_set_info	mpi.h	/^OMPI_DECLSPEC  int MPI_File_set_info(MPI_File fh, MPI_Info info);$/;"	p	signature:(MPI_File fh, MPI_Info info)
MPI_File_set_size	mpi.h	/^OMPI_DECLSPEC  int MPI_File_set_size(MPI_File fh, MPI_Offset size);$/;"	p	signature:(MPI_File fh, MPI_Offset size)
MPI_File_set_view	mpi.h	/^OMPI_DECLSPEC  int MPI_File_set_view(MPI_File fh, MPI_Offset disp, MPI_Datatype etype,$/;"	p	signature:(MPI_File fh, MPI_Offset disp, MPI_Datatype etype, MPI_Datatype filetype, const char *datarep, MPI_Info info)
MPI_File_sync	mpi.h	/^OMPI_DECLSPEC  int MPI_File_sync(MPI_File fh);$/;"	p	signature:(MPI_File fh)
MPI_File_write	mpi.h	/^OMPI_DECLSPEC  int MPI_File_write(MPI_File fh, const void *buf, int count,$/;"	p	signature:(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
MPI_File_write_all	mpi.h	/^OMPI_DECLSPEC  int MPI_File_write_all(MPI_File fh, const void *buf, int count,$/;"	p	signature:(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
MPI_File_write_all_begin	mpi.h	/^OMPI_DECLSPEC  int MPI_File_write_all_begin(MPI_File fh, const void *buf, int count,$/;"	p	signature:(MPI_File fh, const void *buf, int count, MPI_Datatype datatype)
MPI_File_write_all_end	mpi.h	/^OMPI_DECLSPEC  int MPI_File_write_all_end(MPI_File fh, const void *buf, MPI_Status *status);$/;"	p	signature:(MPI_File fh, const void *buf, MPI_Status *status)
MPI_File_write_at	mpi.h	/^OMPI_DECLSPEC  int MPI_File_write_at(MPI_File fh, MPI_Offset offset, const void *buf,$/;"	p	signature:(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
MPI_File_write_at_all	mpi.h	/^OMPI_DECLSPEC  int MPI_File_write_at_all(MPI_File fh, MPI_Offset offset, const void *buf,$/;"	p	signature:(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
MPI_File_write_at_all_begin	mpi.h	/^OMPI_DECLSPEC  int MPI_File_write_at_all_begin(MPI_File fh, MPI_Offset offset, const void *buf,$/;"	p	signature:(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype)
MPI_File_write_at_all_end	mpi.h	/^OMPI_DECLSPEC  int MPI_File_write_at_all_end(MPI_File fh, const void *buf, MPI_Status *status);$/;"	p	signature:(MPI_File fh, const void *buf, MPI_Status *status)
MPI_File_write_ordered	mpi.h	/^OMPI_DECLSPEC  int MPI_File_write_ordered(MPI_File fh, const void *buf, int count,$/;"	p	signature:(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
MPI_File_write_ordered_begin	mpi.h	/^OMPI_DECLSPEC  int MPI_File_write_ordered_begin(MPI_File fh, const void *buf, int count,$/;"	p	signature:(MPI_File fh, const void *buf, int count, MPI_Datatype datatype)
MPI_File_write_ordered_end	mpi.h	/^OMPI_DECLSPEC  int MPI_File_write_ordered_end(MPI_File fh, const void *buf, MPI_Status *status);$/;"	p	signature:(MPI_File fh, const void *buf, MPI_Status *status)
MPI_File_write_shared	mpi.h	/^OMPI_DECLSPEC  int MPI_File_write_shared(MPI_File fh, const void *buf, int count,$/;"	p	signature:(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
MPI_Finalize	mpi.h	/^OMPI_DECLSPEC  int MPI_Finalize(void);$/;"	p	signature:(void)
MPI_Finalized	mpi.h	/^OMPI_DECLSPEC  int MPI_Finalized(int *flag);$/;"	p	signature:(int *flag)
MPI_Fint	mpi.h	214;"	d
MPI_Free_mem	mpi.h	/^OMPI_DECLSPEC  int MPI_Free_mem(void *base);$/;"	p	signature:(void *base)
MPI_GRAPH	mpi.h	427;"	d
MPI_GROUP_EMPTY	mpi.h	1019;"	d
MPI_GROUP_NULL	mpi.h	737;"	d
MPI_Gather	mpi.h	/^OMPI_DECLSPEC  int MPI_Gather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm)
MPI_Gatherv	mpi.h	/^OMPI_DECLSPEC  int MPI_Gatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, int root, MPI_Comm comm)
MPI_Get	mpi.h	/^OMPI_DECLSPEC  int MPI_Get(void *origin_addr, int origin_count,$/;"	p	signature:(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win)
MPI_Get_accumulate	mpi.h	/^OMPI_DECLSPEC  int MPI_Get_accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype,$/;"	p	signature:(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, void *result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win)
MPI_Get_address	mpi.h	/^OMPI_DECLSPEC  int MPI_Get_address(const void *location, MPI_Aint *address);$/;"	p	signature:(const void *location, MPI_Aint *address)
MPI_Get_count	mpi.h	/^OMPI_DECLSPEC  int MPI_Get_count(const MPI_Status *status, MPI_Datatype datatype, int *count);$/;"	p	signature:(const MPI_Status *status, MPI_Datatype datatype, int *count)
MPI_Get_elements	mpi.h	/^OMPI_DECLSPEC  int MPI_Get_elements(const MPI_Status *status, MPI_Datatype datatype, int *count);$/;"	p	signature:(const MPI_Status *status, MPI_Datatype datatype, int *count)
MPI_Get_elements_x	mpi.h	/^OMPI_DECLSPEC  int MPI_Get_elements_x(const MPI_Status *status, MPI_Datatype datatype, MPI_Count *count);$/;"	p	signature:(const MPI_Status *status, MPI_Datatype datatype, MPI_Count *count)
MPI_Get_library_version	mpi.h	/^OMPI_DECLSPEC  int MPI_Get_library_version(char *version, int *resultlen);$/;"	p	signature:(char *version, int *resultlen)
MPI_Get_processor_name	mpi.h	/^OMPI_DECLSPEC  int MPI_Get_processor_name(char *name, int *resultlen);$/;"	p	signature:(char *name, int *resultlen)
MPI_Get_version	mpi.h	/^OMPI_DECLSPEC  int MPI_Get_version(int *version, int *subversion);$/;"	p	signature:(int *version, int *subversion)
MPI_Graph_create	mpi.h	/^OMPI_DECLSPEC  int MPI_Graph_create(MPI_Comm comm_old, int nnodes, const int index[],$/;"	p	signature:(MPI_Comm comm_old, int nnodes, const int index[], const int edges[], int reorder, MPI_Comm *comm_graph)
MPI_Graph_get	mpi.h	/^OMPI_DECLSPEC  int MPI_Graph_get(MPI_Comm comm, int maxindex, int maxedges,$/;"	p	signature:(MPI_Comm comm, int maxindex, int maxedges, int index[], int edges[])
MPI_Graph_map	mpi.h	/^OMPI_DECLSPEC  int MPI_Graph_map(MPI_Comm comm, int nnodes, const int index[], const int edges[],$/;"	p	signature:(MPI_Comm comm, int nnodes, const int index[], const int edges[], int *newrank)
MPI_Graph_neighbors	mpi.h	/^OMPI_DECLSPEC  int MPI_Graph_neighbors(MPI_Comm comm, int rank, int maxneighbors,$/;"	p	signature:(MPI_Comm comm, int rank, int maxneighbors, int neighbors[])
MPI_Graph_neighbors_count	mpi.h	/^OMPI_DECLSPEC  int MPI_Graph_neighbors_count(MPI_Comm comm, int rank, int *nneighbors);$/;"	p	signature:(MPI_Comm comm, int rank, int *nneighbors)
MPI_Graphdims_get	mpi.h	/^OMPI_DECLSPEC  int MPI_Graphdims_get(MPI_Comm comm, int *nnodes, int *nedges);$/;"	p	signature:(MPI_Comm comm, int *nnodes, int *nedges)
MPI_Grequest_cancel_function	mpi.h	/^typedef int (MPI_Grequest_cancel_function)(void *, int);$/;"	t
MPI_Grequest_complete	mpi.h	/^OMPI_DECLSPEC  int MPI_Grequest_complete(MPI_Request request);$/;"	p	signature:(MPI_Request request)
MPI_Grequest_free_function	mpi.h	/^typedef int (MPI_Grequest_free_function)(void *);$/;"	t
MPI_Grequest_query_function	mpi.h	/^typedef int (MPI_Grequest_query_function)(void *, MPI_Status *);$/;"	t
MPI_Grequest_start	mpi.h	/^OMPI_DECLSPEC  int MPI_Grequest_start(MPI_Grequest_query_function *query_fn,$/;"	p	signature:(MPI_Grequest_query_function *query_fn, MPI_Grequest_free_function *free_fn, MPI_Grequest_cancel_function *cancel_fn, void *extra_state, MPI_Request *request)
MPI_Group	mpi.h	/^typedef struct ompi_group_t *MPI_Group;$/;"	t	typeref:struct:ompi_group_t
MPI_Group_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint MPI_Group_c2f(MPI_Group group);$/;"	p	signature:(MPI_Group group)
MPI_Group_compare	mpi.h	/^OMPI_DECLSPEC  int MPI_Group_compare(MPI_Group group1, MPI_Group group2, int *result);$/;"	p	signature:(MPI_Group group1, MPI_Group group2, int *result)
MPI_Group_difference	mpi.h	/^OMPI_DECLSPEC  int MPI_Group_difference(MPI_Group group1, MPI_Group group2,$/;"	p	signature:(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup)
MPI_Group_excl	mpi.h	/^OMPI_DECLSPEC  int MPI_Group_excl(MPI_Group group, int n, const int ranks[],$/;"	p	signature:(MPI_Group group, int n, const int ranks[], MPI_Group *newgroup)
MPI_Group_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_Group MPI_Group_f2c(MPI_Fint group);$/;"	p	signature:(MPI_Fint group)
MPI_Group_free	mpi.h	/^OMPI_DECLSPEC  int MPI_Group_free(MPI_Group *group);$/;"	p	signature:(MPI_Group *group)
MPI_Group_incl	mpi.h	/^OMPI_DECLSPEC  int MPI_Group_incl(MPI_Group group, int n, const int ranks[],$/;"	p	signature:(MPI_Group group, int n, const int ranks[], MPI_Group *newgroup)
MPI_Group_intersection	mpi.h	/^OMPI_DECLSPEC  int MPI_Group_intersection(MPI_Group group1, MPI_Group group2,$/;"	p	signature:(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup)
MPI_Group_range_excl	mpi.h	/^OMPI_DECLSPEC  int MPI_Group_range_excl(MPI_Group group, int n, int ranges[][3],$/;"	p	signature:(MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup)
MPI_Group_range_incl	mpi.h	/^OMPI_DECLSPEC  int MPI_Group_range_incl(MPI_Group group, int n, int ranges[][3],$/;"	p	signature:(MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup)
MPI_Group_rank	mpi.h	/^OMPI_DECLSPEC  int MPI_Group_rank(MPI_Group group, int *rank);$/;"	p	signature:(MPI_Group group, int *rank)
MPI_Group_size	mpi.h	/^OMPI_DECLSPEC  int MPI_Group_size(MPI_Group group, int *size);$/;"	p	signature:(MPI_Group group, int *size)
MPI_Group_translate_ranks	mpi.h	/^OMPI_DECLSPEC  int MPI_Group_translate_ranks(MPI_Group group1, int n, const int ranks1[],$/;"	p	signature:(MPI_Group group1, int n, const int ranks1[], MPI_Group group2, int ranks2[])
MPI_Group_union	mpi.h	/^OMPI_DECLSPEC  int MPI_Group_union(MPI_Group group1, MPI_Group group2,$/;"	p	signature:(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup)
MPI_HOST	mpi.h	/^    MPI_HOST,$/;"	e	enum:__anon1
MPI_Handler_function	mpi.h	/^typedef void (MPI_Handler_function)(MPI_Comm *, int *, ...);$/;"	t
MPI_IDENT	mpi.h	/^  MPI_IDENT,$/;"	e	enum:__anon2
MPI_INFO_ENV	mpi.h	753;"	d
MPI_INFO_NULL	mpi.h	743;"	d
MPI_INT	mpi.h	1044;"	d
MPI_INT16_T	mpi.h	1131;"	d
MPI_INT32_T	mpi.h	1133;"	d
MPI_INT64_T	mpi.h	1135;"	d
MPI_INT8_T	mpi.h	1129;"	d
MPI_INTEGER	mpi.h	1086;"	d
MPI_INTEGER1	mpi.h	1088;"	d
MPI_INTEGER16	mpi.h	1100;"	d
MPI_INTEGER2	mpi.h	1091;"	d
MPI_INTEGER4	mpi.h	1094;"	d
MPI_INTEGER8	mpi.h	1097;"	d
MPI_IN_PLACE	mpi.h	436;"	d
MPI_IO	mpi.h	/^    MPI_IO,$/;"	e	enum:__anon1
MPI_Iallgather	mpi.h	/^OMPI_DECLSPEC  int MPI_Iallgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
MPI_Iallgatherv	mpi.h	/^OMPI_DECLSPEC  int MPI_Iallgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
MPI_Iallreduce	mpi.h	/^OMPI_DECLSPEC  int MPI_Iallreduce(const void *sendbuf, void *recvbuf, int count,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request)
MPI_Ialltoall	mpi.h	/^OMPI_DECLSPEC  int MPI_Ialltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
MPI_Ialltoallv	mpi.h	/^OMPI_DECLSPEC  int MPI_Ialltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[],$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
MPI_Ialltoallw	mpi.h	/^OMPI_DECLSPEC  int MPI_Ialltoallw(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[],$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request *request)
MPI_Ibarrier	mpi.h	/^OMPI_DECLSPEC  int MPI_Ibarrier(MPI_Comm comm, MPI_Request *request);$/;"	p	signature:(MPI_Comm comm, MPI_Request *request)
MPI_Ibcast	mpi.h	/^OMPI_DECLSPEC  int MPI_Ibcast(void *buffer, int count, MPI_Datatype datatype,$/;"	p	signature:(void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm, MPI_Request *request)
MPI_Ibsend	mpi.h	/^OMPI_DECLSPEC  int MPI_Ibsend(const void *buf, int count, MPI_Datatype datatype, int dest,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request)
MPI_Iexscan	mpi.h	/^OMPI_DECLSPEC  int MPI_Iexscan(const void *sendbuf, void *recvbuf, int count,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request)
MPI_Igather	mpi.h	/^OMPI_DECLSPEC  int MPI_Igather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request)
MPI_Igatherv	mpi.h	/^OMPI_DECLSPEC  int MPI_Igatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request)
MPI_Improbe	mpi.h	/^OMPI_DECLSPEC  int MPI_Improbe(int source, int tag, MPI_Comm comm,$/;"	p	signature:(int source, int tag, MPI_Comm comm, int *flag, MPI_Message *message, MPI_Status *status)
MPI_Imrecv	mpi.h	/^OMPI_DECLSPEC  int MPI_Imrecv(void *buf, int count, MPI_Datatype type,$/;"	p	signature:(void *buf, int count, MPI_Datatype type, MPI_Message *message, MPI_Request *request)
MPI_Ineighbor_allgather	mpi.h	/^OMPI_DECLSPEC  int MPI_Ineighbor_allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
MPI_Ineighbor_allgatherv	mpi.h	/^OMPI_DECLSPEC  int MPI_Ineighbor_allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
MPI_Ineighbor_alltoall	mpi.h	/^OMPI_DECLSPEC  int MPI_Ineighbor_alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
MPI_Ineighbor_alltoallv	mpi.h	/^OMPI_DECLSPEC  int MPI_Ineighbor_alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
MPI_Ineighbor_alltoallw	mpi.h	/^OMPI_DECLSPEC  int MPI_Ineighbor_alltoallw(const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[],$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request *request)
MPI_Info	mpi.h	/^typedef struct ompi_info_t *MPI_Info;$/;"	t	typeref:struct:ompi_info_t
MPI_Info_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint MPI_Info_c2f(MPI_Info info);$/;"	p	signature:(MPI_Info info)
MPI_Info_create	mpi.h	/^OMPI_DECLSPEC  int MPI_Info_create(MPI_Info *info);$/;"	p	signature:(MPI_Info *info)
MPI_Info_delete	mpi.h	/^OMPI_DECLSPEC  int MPI_Info_delete(MPI_Info info, const char *key);$/;"	p	signature:(MPI_Info info, const char *key)
MPI_Info_dup	mpi.h	/^OMPI_DECLSPEC  int MPI_Info_dup(MPI_Info info, MPI_Info *newinfo);$/;"	p	signature:(MPI_Info info, MPI_Info *newinfo)
MPI_Info_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_Info MPI_Info_f2c(MPI_Fint info);$/;"	p	signature:(MPI_Fint info)
MPI_Info_free	mpi.h	/^OMPI_DECLSPEC  int MPI_Info_free(MPI_Info *info);$/;"	p	signature:(MPI_Info *info)
MPI_Info_get	mpi.h	/^OMPI_DECLSPEC  int MPI_Info_get(MPI_Info info, const char *key, int valuelen,$/;"	p	signature:(MPI_Info info, const char *key, int valuelen, char *value, int *flag)
MPI_Info_get_nkeys	mpi.h	/^OMPI_DECLSPEC  int MPI_Info_get_nkeys(MPI_Info info, int *nkeys);$/;"	p	signature:(MPI_Info info, int *nkeys)
MPI_Info_get_nthkey	mpi.h	/^OMPI_DECLSPEC  int MPI_Info_get_nthkey(MPI_Info info, int n, char *key);$/;"	p	signature:(MPI_Info info, int n, char *key)
MPI_Info_get_valuelen	mpi.h	/^OMPI_DECLSPEC  int MPI_Info_get_valuelen(MPI_Info info, const char *key, int *valuelen,$/;"	p	signature:(MPI_Info info, const char *key, int *valuelen, int *flag)
MPI_Info_set	mpi.h	/^OMPI_DECLSPEC  int MPI_Info_set(MPI_Info info, const char *key, const char *value);$/;"	p	signature:(MPI_Info info, const char *key, const char *value)
MPI_Init	mpi.h	/^OMPI_DECLSPEC  int MPI_Init(int *argc, char ***argv);$/;"	p	signature:(int *argc, char ***argv)
MPI_Init_thread	mpi.h	/^OMPI_DECLSPEC  int MPI_Init_thread(int *argc, char ***argv, int required,$/;"	p	signature:(int *argc, char ***argv, int required, int *provided)
MPI_Initialized	mpi.h	/^OMPI_DECLSPEC  int MPI_Initialized(int *flag);$/;"	p	signature:(int *flag)
MPI_Intercomm_create	mpi.h	/^OMPI_DECLSPEC  int MPI_Intercomm_create(MPI_Comm local_comm, int local_leader,$/;"	p	signature:(MPI_Comm local_comm, int local_leader, MPI_Comm bridge_comm, int remote_leader, int tag, MPI_Comm *newintercomm)
MPI_Intercomm_merge	mpi.h	/^OMPI_DECLSPEC  int MPI_Intercomm_merge(MPI_Comm intercomm, int high,$/;"	p	signature:(MPI_Comm intercomm, int high, MPI_Comm *newintercomm)
MPI_Iprobe	mpi.h	/^OMPI_DECLSPEC  int MPI_Iprobe(int source, int tag, MPI_Comm comm, int *flag,$/;"	p	signature:(int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status)
MPI_Irecv	mpi.h	/^OMPI_DECLSPEC  int MPI_Irecv(void *buf, int count, MPI_Datatype datatype, int source,$/;"	p	signature:(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request)
MPI_Ireduce	mpi.h	/^OMPI_DECLSPEC  int MPI_Ireduce(const void *sendbuf, void *recvbuf, int count,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm, MPI_Request *request)
MPI_Ireduce_scatter	mpi.h	/^OMPI_DECLSPEC  int MPI_Ireduce_scatter(const void *sendbuf, void *recvbuf, const int recvcounts[],$/;"	p	signature:(const void *sendbuf, void *recvbuf, const int recvcounts[], MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request)
MPI_Ireduce_scatter_block	mpi.h	/^OMPI_DECLSPEC  int MPI_Ireduce_scatter_block(const void *sendbuf, void *recvbuf, int recvcount,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request)
MPI_Irsend	mpi.h	/^OMPI_DECLSPEC  int MPI_Irsend(const void *buf, int count, MPI_Datatype datatype, int dest,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request)
MPI_Is_thread_main	mpi.h	/^OMPI_DECLSPEC  int MPI_Is_thread_main(int *flag);$/;"	p	signature:(int *flag)
MPI_Iscan	mpi.h	/^OMPI_DECLSPEC  int MPI_Iscan(const void *sendbuf, void *recvbuf, int count,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request)
MPI_Iscatter	mpi.h	/^OMPI_DECLSPEC  int MPI_Iscatter(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request)
MPI_Iscatterv	mpi.h	/^OMPI_DECLSPEC  int MPI_Iscatterv(const void *sendbuf, const int sendcounts[], const int displs[],$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const int displs[], MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request)
MPI_Isend	mpi.h	/^OMPI_DECLSPEC  int MPI_Isend(const void *buf, int count, MPI_Datatype datatype, int dest,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request)
MPI_Issend	mpi.h	/^OMPI_DECLSPEC  int MPI_Issend(const void *buf, int count, MPI_Datatype datatype, int dest,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request)
MPI_KEYVAL_INVALID	mpi.h	428;"	d
MPI_LAND	mpi.h	1027;"	d
MPI_LASTUSEDCODE	mpi.h	/^    MPI_LASTUSEDCODE,$/;"	e	enum:__anon1
MPI_LB	mpi.h	1061;"	d
MPI_LOCK_EXCLUSIVE	mpi.h	487;"	d
MPI_LOCK_SHARED	mpi.h	488;"	d
MPI_LOGICAL	mpi.h	1073;"	d
MPI_LOGICAL1	mpi.h	1075;"	d
MPI_LOGICAL2	mpi.h	1078;"	d
MPI_LOGICAL4	mpi.h	1081;"	d
MPI_LOGICAL8	mpi.h	1084;"	d
MPI_LONG	mpi.h	1045;"	d
MPI_LONG_DOUBLE	mpi.h	1048;"	d
MPI_LONG_DOUBLE_INT	mpi.h	1056;"	d
MPI_LONG_INT	mpi.h	1057;"	d
MPI_LONG_LONG	mpi.h	1065;"	d
MPI_LONG_LONG_INT	mpi.h	1064;"	d
MPI_LOR	mpi.h	1029;"	d
MPI_LXOR	mpi.h	1031;"	d
MPI_Lookup_name	mpi.h	/^OMPI_DECLSPEC  int MPI_Lookup_name(const char *service_name, MPI_Info info, char *port_name);$/;"	p	signature:(const char *service_name, MPI_Info info, char *port_name)
MPI_MAX	mpi.h	1023;"	d
MPI_MAXLOC	mpi.h	1033;"	d
MPI_MAX_DATAREP_STRING	mpi.h	474;"	d
MPI_MAX_ERROR_STRING	mpi.h	421;"	d
MPI_MAX_INFO_KEY	mpi.h	438;"	d
MPI_MAX_INFO_VAL	mpi.h	439;"	d
MPI_MAX_LIBRARY_VERSION_STRING	mpi.h	423;"	d
MPI_MAX_OBJECT_NAME	mpi.h	422;"	d
MPI_MAX_PORT_NAME	mpi.h	443;"	d
MPI_MAX_PROCESSOR_NAME	mpi.h	420;"	d
MPI_MESSAGE_NO_PROC	mpi.h	1021;"	d
MPI_MESSAGE_NULL	mpi.h	740;"	d
MPI_MIN	mpi.h	1024;"	d
MPI_MINLOC	mpi.h	1034;"	d
MPI_MODE_APPEND	mpi.h	464;"	d
MPI_MODE_CREATE	mpi.h	457;"	d
MPI_MODE_DELETE_ON_CLOSE	mpi.h	461;"	d
MPI_MODE_EXCL	mpi.h	463;"	d
MPI_MODE_NOCHECK	mpi.h	481;"	d
MPI_MODE_NOPRECEDE	mpi.h	482;"	d
MPI_MODE_NOPUT	mpi.h	483;"	d
MPI_MODE_NOSTORE	mpi.h	484;"	d
MPI_MODE_NOSUCCEED	mpi.h	485;"	d
MPI_MODE_RDONLY	mpi.h	458;"	d
MPI_MODE_RDWR	mpi.h	460;"	d
MPI_MODE_SEQUENTIAL	mpi.h	465;"	d
MPI_MODE_UNIQUE_OPEN	mpi.h	462;"	d
MPI_MODE_WRONLY	mpi.h	459;"	d
MPI_Message	mpi.h	/^typedef struct ompi_message_t *MPI_Message;$/;"	t	typeref:struct:ompi_message_t
MPI_Message_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint MPI_Message_c2f(MPI_Message message);$/;"	p	signature:(MPI_Message message)
MPI_Message_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_Message MPI_Message_f2c(MPI_Fint message);$/;"	p	signature:(MPI_Fint message)
MPI_Mprobe	mpi.h	/^OMPI_DECLSPEC  int MPI_Mprobe(int source, int tag, MPI_Comm comm,$/;"	p	signature:(int source, int tag, MPI_Comm comm, MPI_Message *message, MPI_Status *status)
MPI_Mrecv	mpi.h	/^OMPI_DECLSPEC  int MPI_Mrecv(void *buf, int count, MPI_Datatype type,$/;"	p	signature:(void *buf, int count, MPI_Datatype type, MPI_Message *message, MPI_Status *status)
MPI_NO_OP	mpi.h	1036;"	d
MPI_NULL_COPY_FN	mpi.h	783;"	d
MPI_NULL_DELETE_FN	mpi.h	782;"	d
MPI_Neighbor_allgather	mpi.h	/^OMPI_DECLSPEC  int MPI_Neighbor_allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm)
MPI_Neighbor_allgatherv	mpi.h	/^OMPI_DECLSPEC  int MPI_Neighbor_allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm)
MPI_Neighbor_alltoall	mpi.h	/^OMPI_DECLSPEC  int MPI_Neighbor_alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm)
MPI_Neighbor_alltoallv	mpi.h	/^OMPI_DECLSPEC  int MPI_Neighbor_alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[],  MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm)
MPI_Neighbor_alltoallw	mpi.h	/^OMPI_DECLSPEC  int MPI_Neighbor_alltoallw(const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[],$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm)
MPI_OFFSET	mpi.h	1138;"	d
MPI_OP_NULL	mpi.h	741;"	d
MPI_ORDER_C	mpi.h	444;"	d
MPI_ORDER_FORTRAN	mpi.h	445;"	d
MPI_Offset	mpi.h	/^typedef OMPI_MPI_OFFSET_TYPE MPI_Offset;$/;"	t
MPI_Op	mpi.h	/^typedef struct ompi_op_t *MPI_Op;$/;"	t	typeref:struct:ompi_op_t
MPI_Op_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint MPI_Op_c2f(MPI_Op op);$/;"	p	signature:(MPI_Op op)
MPI_Op_commutative	mpi.h	/^OMPI_DECLSPEC  int MPI_Op_commutative(MPI_Op op, int *commute);$/;"	p	signature:(MPI_Op op, int *commute)
MPI_Op_create	mpi.h	/^OMPI_DECLSPEC  int MPI_Op_create(MPI_User_function *function, int commute, MPI_Op *op);$/;"	p	signature:(MPI_User_function *function, int commute, MPI_Op *op)
MPI_Op_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_Op MPI_Op_f2c(MPI_Fint op);$/;"	p	signature:(MPI_Fint op)
MPI_Op_free	mpi.h	/^OMPI_DECLSPEC  int MPI_Op_free(MPI_Op *op);$/;"	p	signature:(MPI_Op *op)
MPI_Open_port	mpi.h	/^OMPI_DECLSPEC  int MPI_Open_port(MPI_Info info, char *port_name);$/;"	p	signature:(MPI_Info info, char *port_name)
MPI_PACKED	mpi.h	1041;"	d
MPI_PROC_NULL	mpi.h	417;"	d
MPI_PROD	mpi.h	1026;"	d
MPI_Pack	mpi.h	/^OMPI_DECLSPEC  int MPI_Pack(const void *inbuf, int incount, MPI_Datatype datatype,$/;"	p	signature:(const void *inbuf, int incount, MPI_Datatype datatype, void *outbuf, int outsize, int *position, MPI_Comm comm)
MPI_Pack_external	mpi.h	/^OMPI_DECLSPEC  int MPI_Pack_external(const char datarep[], const void *inbuf, int incount,$/;"	p	signature:(const char datarep[], const void *inbuf, int incount, MPI_Datatype datatype, void *outbuf, MPI_Aint outsize, MPI_Aint *position)
MPI_Pack_external_size	mpi.h	/^OMPI_DECLSPEC  int MPI_Pack_external_size(const char datarep[], int incount,$/;"	p	signature:(const char datarep[], int incount, MPI_Datatype datatype, MPI_Aint *size)
MPI_Pack_size	mpi.h	/^OMPI_DECLSPEC  int MPI_Pack_size(int incount, MPI_Datatype datatype, MPI_Comm comm,$/;"	p	signature:(int incount, MPI_Datatype datatype, MPI_Comm comm, int *size)
MPI_Pcontrol	mpi.h	/^OMPI_DECLSPEC  int MPI_Pcontrol(const int level, ...);$/;"	p	signature:(const int level, ...)
MPI_Probe	mpi.h	/^OMPI_DECLSPEC  int MPI_Probe(int source, int tag, MPI_Comm comm, MPI_Status *status);$/;"	p	signature:(int source, int tag, MPI_Comm comm, MPI_Status *status)
MPI_Publish_name	mpi.h	/^OMPI_DECLSPEC  int MPI_Publish_name(const char *service_name, MPI_Info info,$/;"	p	signature:(const char *service_name, MPI_Info info, const char *port_name)
MPI_Put	mpi.h	/^OMPI_DECLSPEC  int MPI_Put(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype,$/;"	p	signature:(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win)
MPI_Query_thread	mpi.h	/^OMPI_DECLSPEC  int MPI_Query_thread(int *provided);$/;"	p	signature:(int *provided)
MPI_REAL	mpi.h	1102;"	d
MPI_REAL16	mpi.h	1110;"	d
MPI_REAL4	mpi.h	1104;"	d
MPI_REAL8	mpi.h	1107;"	d
MPI_REPLACE	mpi.h	1035;"	d
MPI_REQUEST_NULL	mpi.h	739;"	d
MPI_ROOT	mpi.h	418;"	d
MPI_Raccumulate	mpi.h	/^OMPI_DECLSPEC  int MPI_Raccumulate(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, $/;"	p	signature:(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request *request)
MPI_Recv	mpi.h	/^OMPI_DECLSPEC  int MPI_Recv(void *buf, int count, MPI_Datatype datatype, int source,$/;"	p	signature:(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status *status)
MPI_Recv_init	mpi.h	/^OMPI_DECLSPEC  int MPI_Recv_init(void *buf, int count, MPI_Datatype datatype, int source,$/;"	p	signature:(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request)
MPI_Reduce	mpi.h	/^OMPI_DECLSPEC  int MPI_Reduce(const void *sendbuf, void *recvbuf, int count,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm)
MPI_Reduce_local	mpi.h	/^OMPI_DECLSPEC  int MPI_Reduce_local(const void *inbuf, void *inoutbuf, int count,$/;"	p	signature:(const void *inbuf, void *inoutbuf, int count, MPI_Datatype datatype, MPI_Op op)
MPI_Reduce_scatter	mpi.h	/^OMPI_DECLSPEC  int MPI_Reduce_scatter(const void *sendbuf, void *recvbuf, const int recvcounts[],$/;"	p	signature:(const void *sendbuf, void *recvbuf, const int recvcounts[], MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)
MPI_Reduce_scatter_block	mpi.h	/^OMPI_DECLSPEC  int MPI_Reduce_scatter_block(const void *sendbuf, void *recvbuf, int recvcount,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)
MPI_Register_datarep	mpi.h	/^OMPI_DECLSPEC  int MPI_Register_datarep(const char *datarep,$/;"	p	signature:(const char *datarep, MPI_Datarep_conversion_function *read_conversion_fn, MPI_Datarep_conversion_function *write_conversion_fn, MPI_Datarep_extent_function *dtype_file_extent_fn, void *extra_state)
MPI_Request	mpi.h	/^typedef struct ompi_request_t *MPI_Request;$/;"	t	typeref:struct:ompi_request_t
MPI_Request_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint MPI_Request_c2f(MPI_Request request);$/;"	p	signature:(MPI_Request request)
MPI_Request_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_Request MPI_Request_f2c(MPI_Fint request);$/;"	p	signature:(MPI_Fint request)
MPI_Request_free	mpi.h	/^OMPI_DECLSPEC  int MPI_Request_free(MPI_Request *request);$/;"	p	signature:(MPI_Request *request)
MPI_Request_get_status	mpi.h	/^OMPI_DECLSPEC  int MPI_Request_get_status(MPI_Request request, int *flag,$/;"	p	signature:(MPI_Request request, int *flag, MPI_Status *status)
MPI_Rget	mpi.h	/^OMPI_DECLSPEC  int MPI_Rget(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, $/;"	p	signature:(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win, MPI_Request *request)
MPI_Rget_accumulate	mpi.h	/^OMPI_DECLSPEC  int MPI_Rget_accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype,$/;"	p	signature:(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, void *result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request *request)
MPI_Rput	mpi.h	/^OMPI_DECLSPEC  int MPI_Rput(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype,$/;"	p	signature:(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_cout, MPI_Datatype target_datatype, MPI_Win win, MPI_Request *request)
MPI_Rsend	mpi.h	/^OMPI_DECLSPEC  int MPI_Rsend(const void *ibuf, int count, MPI_Datatype datatype, int dest,$/;"	p	signature:(const void *ibuf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm)
MPI_Rsend_init	mpi.h	/^OMPI_DECLSPEC  int MPI_Rsend_init(const void *buf, int count, MPI_Datatype datatype,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request)
MPI_SEEK_CUR	mpi.h	470;"	d
MPI_SEEK_END	mpi.h	471;"	d
MPI_SEEK_SET	mpi.h	469;"	d
MPI_SHORT	mpi.h	1043;"	d
MPI_SHORT_INT	mpi.h	1058;"	d
MPI_SIGNED_CHAR	mpi.h	1050;"	d
MPI_SIMILAR	mpi.h	/^  MPI_SIMILAR,$/;"	e	enum:__anon2
MPI_SOURCE	mpi.h	/^    int MPI_SOURCE;$/;"	m	struct:ompi_status_public_t	access:public
MPI_STATUSES_IGNORE	mpi.h	756;"	d
MPI_STATUS_IGNORE	mpi.h	755;"	d
MPI_SUBVERSION	mpi.h	240;"	d
MPI_SUCCESS	mpi.h	533;"	d
MPI_SUM	mpi.h	1025;"	d
MPI_Scan	mpi.h	/^OMPI_DECLSPEC  int MPI_Scan(const void *sendbuf, void *recvbuf, int count,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)
MPI_Scatter	mpi.h	/^OMPI_DECLSPEC  int MPI_Scatter(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm)
MPI_Scatterv	mpi.h	/^OMPI_DECLSPEC  int MPI_Scatterv(const void *sendbuf, const int sendcounts[], const int displs[],$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const int displs[], MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm)
MPI_Send	mpi.h	/^OMPI_DECLSPEC  int MPI_Send(const void *buf, int count, MPI_Datatype datatype, int dest,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm)
MPI_Send_init	mpi.h	/^OMPI_DECLSPEC  int MPI_Send_init(const void *buf, int count, MPI_Datatype datatype,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request)
MPI_Sendrecv	mpi.h	/^OMPI_DECLSPEC  int MPI_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, int recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Status *status)
MPI_Sendrecv_replace	mpi.h	/^OMPI_DECLSPEC  int MPI_Sendrecv_replace(void * buf, int count, MPI_Datatype datatype,$/;"	p	signature:(void * buf, int count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Status *status)
MPI_Ssend	mpi.h	/^OMPI_DECLSPEC  int MPI_Ssend(const void *buf, int count, MPI_Datatype datatype, int dest,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm)
MPI_Ssend_init	mpi.h	/^OMPI_DECLSPEC  int MPI_Ssend_init(const void *buf, int count, MPI_Datatype datatype,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request)
MPI_Start	mpi.h	/^OMPI_DECLSPEC  int MPI_Start(MPI_Request *request);$/;"	p	signature:(MPI_Request *request)
MPI_Startall	mpi.h	/^OMPI_DECLSPEC  int MPI_Startall(int count, MPI_Request array_of_requests[]);$/;"	p	signature:(int count, MPI_Request array_of_requests[])
MPI_Status	mpi.h	/^typedef struct ompi_status_public_t MPI_Status;$/;"	t	typeref:struct:ompi_status_public_t
MPI_Status_c2f	mpi.h	/^OMPI_DECLSPEC  int MPI_Status_c2f(const MPI_Status *c_status, MPI_Fint *f_status);$/;"	p	signature:(const MPI_Status *c_status, MPI_Fint *f_status)
MPI_Status_f2c	mpi.h	/^OMPI_DECLSPEC  int MPI_Status_f2c(const MPI_Fint *f_status, MPI_Status *c_status);$/;"	p	signature:(const MPI_Fint *f_status, MPI_Status *c_status)
MPI_Status_set_cancelled	mpi.h	/^OMPI_DECLSPEC  int MPI_Status_set_cancelled(MPI_Status *status, int flag);$/;"	p	signature:(MPI_Status *status, int flag)
MPI_Status_set_elements	mpi.h	/^OMPI_DECLSPEC  int MPI_Status_set_elements(MPI_Status *status, MPI_Datatype datatype,$/;"	p	signature:(MPI_Status *status, MPI_Datatype datatype, int count)
MPI_Status_set_elements_x	mpi.h	/^OMPI_DECLSPEC  int MPI_Status_set_elements_x(MPI_Status *status, MPI_Datatype datatype,$/;"	p	signature:(MPI_Status *status, MPI_Datatype datatype, MPI_Count count)
MPI_TAG	mpi.h	/^    int MPI_TAG;$/;"	m	struct:ompi_status_public_t	access:public
MPI_TAG_UB	mpi.h	/^    MPI_TAG_UB,$/;"	e	enum:__anon1
MPI_THREAD_FUNNELED	mpi.h	/^  MPI_THREAD_FUNNELED,$/;"	e	enum:__anon3
MPI_THREAD_MULTIPLE	mpi.h	/^  MPI_THREAD_MULTIPLE$/;"	e	enum:__anon3
MPI_THREAD_SERIALIZED	mpi.h	/^  MPI_THREAD_SERIALIZED,$/;"	e	enum:__anon3
MPI_THREAD_SINGLE	mpi.h	/^  MPI_THREAD_SINGLE,$/;"	e	enum:__anon3
MPI_TYPECLASS_COMPLEX	mpi.h	1164;"	d
MPI_TYPECLASS_INTEGER	mpi.h	1162;"	d
MPI_TYPECLASS_REAL	mpi.h	1163;"	d
MPI_TYPE_DUP_FN	mpi.h	788;"	d
MPI_TYPE_NULL_COPY_FN	mpi.h	787;"	d
MPI_TYPE_NULL_DELETE_FN	mpi.h	786;"	d
MPI_T_BIND_MPI_COMM	mpi.h	/^  MPI_T_BIND_MPI_COMM,$/;"	e	enum:__anon8
MPI_T_BIND_MPI_DATATYPE	mpi.h	/^  MPI_T_BIND_MPI_DATATYPE,$/;"	e	enum:__anon8
MPI_T_BIND_MPI_ERRHANDLER	mpi.h	/^  MPI_T_BIND_MPI_ERRHANDLER,$/;"	e	enum:__anon8
MPI_T_BIND_MPI_FILE	mpi.h	/^  MPI_T_BIND_MPI_FILE,$/;"	e	enum:__anon8
MPI_T_BIND_MPI_GROUP	mpi.h	/^  MPI_T_BIND_MPI_GROUP,$/;"	e	enum:__anon8
MPI_T_BIND_MPI_INFO	mpi.h	/^  MPI_T_BIND_MPI_INFO$/;"	e	enum:__anon8
MPI_T_BIND_MPI_MESSAGE	mpi.h	/^  MPI_T_BIND_MPI_MESSAGE,$/;"	e	enum:__anon8
MPI_T_BIND_MPI_OP	mpi.h	/^  MPI_T_BIND_MPI_OP,$/;"	e	enum:__anon8
MPI_T_BIND_MPI_REQUEST	mpi.h	/^  MPI_T_BIND_MPI_REQUEST,$/;"	e	enum:__anon8
MPI_T_BIND_MPI_WIN	mpi.h	/^  MPI_T_BIND_MPI_WIN,$/;"	e	enum:__anon8
MPI_T_BIND_NO_OBJECT	mpi.h	/^  MPI_T_BIND_NO_OBJECT,$/;"	e	enum:__anon8
MPI_T_CVAR_HANDLE_NULL	mpi.h	763;"	d
MPI_T_ENUM_NULL	mpi.h	748;"	d
MPI_T_ERR_CANNOT_INIT	mpi.h	589;"	d
MPI_T_ERR_CVAR_SET_NEVER	mpi.h	597;"	d
MPI_T_ERR_CVAR_SET_NOT_NOW	mpi.h	596;"	d
MPI_T_ERR_INVALID_HANDLE	mpi.h	592;"	d
MPI_T_ERR_INVALID_INDEX	mpi.h	590;"	d
MPI_T_ERR_INVALID_ITEM	mpi.h	591;"	d
MPI_T_ERR_INVALID_SESSION	mpi.h	595;"	d
MPI_T_ERR_MEMORY	mpi.h	587;"	d
MPI_T_ERR_NOT_INITIALIZED	mpi.h	588;"	d
MPI_T_ERR_OUT_OF_HANDLES	mpi.h	593;"	d
MPI_T_ERR_OUT_OF_SESSIONS	mpi.h	594;"	d
MPI_T_ERR_PVAR_NO_ATOMIC	mpi.h	600;"	d
MPI_T_ERR_PVAR_NO_STARTSTOP	mpi.h	598;"	d
MPI_T_ERR_PVAR_NO_WRITE	mpi.h	599;"	d
MPI_T_PVAR_ALL_HANDLES	mpi.h	761;"	d
MPI_T_PVAR_CLASS_AGGREGATE	mpi.h	/^  MPI_T_PVAR_CLASS_AGGREGATE,$/;"	e	enum:__anon9
MPI_T_PVAR_CLASS_COUNTER	mpi.h	/^  MPI_T_PVAR_CLASS_COUNTER,$/;"	e	enum:__anon9
MPI_T_PVAR_CLASS_GENERIC	mpi.h	/^  MPI_T_PVAR_CLASS_GENERIC$/;"	e	enum:__anon9
MPI_T_PVAR_CLASS_HIGHWATERMARK	mpi.h	/^  MPI_T_PVAR_CLASS_HIGHWATERMARK,$/;"	e	enum:__anon9
MPI_T_PVAR_CLASS_LEVEL	mpi.h	/^  MPI_T_PVAR_CLASS_LEVEL,$/;"	e	enum:__anon9
MPI_T_PVAR_CLASS_LOWWATERMARK	mpi.h	/^  MPI_T_PVAR_CLASS_LOWWATERMARK,$/;"	e	enum:__anon9
MPI_T_PVAR_CLASS_PERCENTAGE	mpi.h	/^  MPI_T_PVAR_CLASS_PERCENTAGE,$/;"	e	enum:__anon9
MPI_T_PVAR_CLASS_SIZE	mpi.h	/^  MPI_T_PVAR_CLASS_SIZE,$/;"	e	enum:__anon9
MPI_T_PVAR_CLASS_STATE	mpi.h	/^  MPI_T_PVAR_CLASS_STATE,$/;"	e	enum:__anon9
MPI_T_PVAR_CLASS_TIMER	mpi.h	/^  MPI_T_PVAR_CLASS_TIMER,$/;"	e	enum:__anon9
MPI_T_PVAR_HANDLE_NULL	mpi.h	762;"	d
MPI_T_SCOPE_ALL	mpi.h	/^  MPI_T_SCOPE_ALL,$/;"	e	enum:__anon7
MPI_T_SCOPE_ALL_EQ	mpi.h	/^  MPI_T_SCOPE_ALL_EQ$/;"	e	enum:__anon7
MPI_T_SCOPE_CONSTANT	mpi.h	/^  MPI_T_SCOPE_CONSTANT,$/;"	e	enum:__anon7
MPI_T_SCOPE_GROUP	mpi.h	/^  MPI_T_SCOPE_GROUP,$/;"	e	enum:__anon7
MPI_T_SCOPE_GROUP_EQ	mpi.h	/^  MPI_T_SCOPE_GROUP_EQ,$/;"	e	enum:__anon7
MPI_T_SCOPE_LOCAL	mpi.h	/^  MPI_T_SCOPE_LOCAL,$/;"	e	enum:__anon7
MPI_T_SCOPE_READONLY	mpi.h	/^  MPI_T_SCOPE_READONLY,$/;"	e	enum:__anon7
MPI_T_VERBOSITY_MPIDEV_ALL	mpi.h	/^  MPI_T_VERBOSITY_MPIDEV_ALL$/;"	e	enum:__anon6
MPI_T_VERBOSITY_MPIDEV_BASIC	mpi.h	/^  MPI_T_VERBOSITY_MPIDEV_BASIC,$/;"	e	enum:__anon6
MPI_T_VERBOSITY_MPIDEV_DETAIL	mpi.h	/^  MPI_T_VERBOSITY_MPIDEV_DETAIL,$/;"	e	enum:__anon6
MPI_T_VERBOSITY_TUNER_ALL	mpi.h	/^  MPI_T_VERBOSITY_TUNER_ALL,$/;"	e	enum:__anon6
MPI_T_VERBOSITY_TUNER_BASIC	mpi.h	/^  MPI_T_VERBOSITY_TUNER_BASIC,$/;"	e	enum:__anon6
MPI_T_VERBOSITY_TUNER_DETAIL	mpi.h	/^  MPI_T_VERBOSITY_TUNER_DETAIL,$/;"	e	enum:__anon6
MPI_T_VERBOSITY_USER_ALL	mpi.h	/^  MPI_T_VERBOSITY_USER_ALL,$/;"	e	enum:__anon6
MPI_T_VERBOSITY_USER_BASIC	mpi.h	/^  MPI_T_VERBOSITY_USER_BASIC,$/;"	e	enum:__anon6
MPI_T_VERBOSITY_USER_DETAIL	mpi.h	/^  MPI_T_VERBOSITY_USER_DETAIL,$/;"	e	enum:__anon6
MPI_T_category_changed	mpi.h	/^OMPI_DECLSPEC  int MPI_T_category_changed(int *stamp);$/;"	p	signature:(int *stamp)
MPI_T_category_get_categories	mpi.h	/^OMPI_DECLSPEC  int MPI_T_category_get_categories(int cat_index, int len, int indices[]);$/;"	p	signature:(int cat_index, int len, int indices[])
MPI_T_category_get_cvars	mpi.h	/^OMPI_DECLSPEC  int MPI_T_category_get_cvars(int cat_index, int len, int indices[]);$/;"	p	signature:(int cat_index, int len, int indices[])
MPI_T_category_get_index	mpi.h	/^OMPI_DECLSPEC  int MPI_T_category_get_index (const char *name, int *category_index);$/;"	p	signature:(const char *name, int *category_index)
MPI_T_category_get_info	mpi.h	/^OMPI_DECLSPEC  int MPI_T_category_get_info(int cat_index, char *name, int *name_len,$/;"	p	signature:(int cat_index, char *name, int *name_len, char *desc, int *desc_len, int *num_cvars, int *num_pvars, int *num_categories)
MPI_T_category_get_num	mpi.h	/^OMPI_DECLSPEC  int MPI_T_category_get_num(int *num_cat);$/;"	p	signature:(int *num_cat)
MPI_T_category_get_pvars	mpi.h	/^OMPI_DECLSPEC  int MPI_T_category_get_pvars(int cat_index, int len, int indices[]);$/;"	p	signature:(int cat_index, int len, int indices[])
MPI_T_cvar_get_index	mpi.h	/^OMPI_DECLSPEC  int MPI_T_cvar_get_index (const char *name, int *cvar_index);$/;"	p	signature:(const char *name, int *cvar_index)
MPI_T_cvar_get_info	mpi.h	/^OMPI_DECLSPEC  int MPI_T_cvar_get_info (int cvar_index, char *name, int *name_len,$/;"	p	signature:(int cvar_index, char *name, int *name_len, int *verbosity, MPI_Datatype *datatype, MPI_T_enum *enumtype, char *desc, int *desc_len, int *bind, int *scope)
MPI_T_cvar_get_num	mpi.h	/^OMPI_DECLSPEC  int MPI_T_cvar_get_num (int *num_cvar);$/;"	p	signature:(int *num_cvar)
MPI_T_cvar_handle	mpi.h	/^typedef struct ompi_mpit_cvar_handle_t *MPI_T_cvar_handle;$/;"	t	typeref:struct:ompi_mpit_cvar_handle_t
MPI_T_cvar_handle_alloc	mpi.h	/^OMPI_DECLSPEC  int MPI_T_cvar_handle_alloc (int cvar_index, void *obj_handle,$/;"	p	signature:(int cvar_index, void *obj_handle, MPI_T_cvar_handle *handle, int *count)
MPI_T_cvar_handle_free	mpi.h	/^OMPI_DECLSPEC  int MPI_T_cvar_handle_free (MPI_T_cvar_handle *handle);$/;"	p	signature:(MPI_T_cvar_handle *handle)
MPI_T_cvar_read	mpi.h	/^OMPI_DECLSPEC  int MPI_T_cvar_read (MPI_T_cvar_handle handle, void *buf);$/;"	p	signature:(MPI_T_cvar_handle handle, void *buf)
MPI_T_cvar_write	mpi.h	/^OMPI_DECLSPEC  int MPI_T_cvar_write (MPI_T_cvar_handle handle, const void *buf);$/;"	p	signature:(MPI_T_cvar_handle handle, const void *buf)
MPI_T_enum	mpi.h	/^typedef struct mca_base_var_enum_t *MPI_T_enum;$/;"	t	typeref:struct:mca_base_var_enum_t
MPI_T_enum_get_info	mpi.h	/^OMPI_DECLSPEC  int MPI_T_enum_get_info(MPI_T_enum enumtype, int *num, char *name, int *name_len);$/;"	p	signature:(MPI_T_enum enumtype, int *num, char *name, int *name_len)
MPI_T_enum_get_item	mpi.h	/^OMPI_DECLSPEC  int MPI_T_enum_get_item(MPI_T_enum enumtype, int index, int *value, char *name,$/;"	p	signature:(MPI_T_enum enumtype, int index, int *value, char *name, int *name_len)
MPI_T_finalize	mpi.h	/^OMPI_DECLSPEC  int MPI_T_finalize (void);$/;"	p	signature:(void)
MPI_T_init_thread	mpi.h	/^OMPI_DECLSPEC  int MPI_T_init_thread (int required, int *provided);$/;"	p	signature:(int required, int *provided)
MPI_T_pvar_get_index	mpi.h	/^OMPI_DECLSPEC  int MPI_T_pvar_get_index (const char *name, int *pvar_index);$/;"	p	signature:(const char *name, int *pvar_index)
MPI_T_pvar_get_info	mpi.h	/^OMPI_DECLSPEC  int MPI_T_pvar_get_info(int pvar_index, char *name, int *name_len,$/;"	p	signature:(int pvar_index, char *name, int *name_len, int *verbosity, int *var_class, MPI_Datatype *datatype, MPI_T_enum *enumtype, char *desc, int *desc_len, int *bind, int *readonly, int *continuous, int *atomic)
MPI_T_pvar_get_num	mpi.h	/^OMPI_DECLSPEC  int MPI_T_pvar_get_num(int *num_pvar);$/;"	p	signature:(int *num_pvar)
MPI_T_pvar_handle	mpi.h	/^typedef struct mca_base_pvar_handle_t *MPI_T_pvar_handle;$/;"	t	typeref:struct:mca_base_pvar_handle_t
MPI_T_pvar_handle_alloc	mpi.h	/^OMPI_DECLSPEC  int MPI_T_pvar_handle_alloc(MPI_T_pvar_session session, int pvar_index,$/;"	p	signature:(MPI_T_pvar_session session, int pvar_index, void *obj_handle, MPI_T_pvar_handle *handle, int *count)
MPI_T_pvar_handle_free	mpi.h	/^OMPI_DECLSPEC  int MPI_T_pvar_handle_free(MPI_T_pvar_session session, MPI_T_pvar_handle *handle);$/;"	p	signature:(MPI_T_pvar_session session, MPI_T_pvar_handle *handle)
MPI_T_pvar_read	mpi.h	/^OMPI_DECLSPEC  int MPI_T_pvar_read(MPI_T_pvar_session session, MPI_T_pvar_handle handle,$/;"	p	signature:(MPI_T_pvar_session session, MPI_T_pvar_handle handle, void *buf)
MPI_T_pvar_readreset	mpi.h	/^OMPI_DECLSPEC  int MPI_T_pvar_readreset(MPI_T_pvar_session session, MPI_T_pvar_handle handle,$/;"	p	signature:(MPI_T_pvar_session session, MPI_T_pvar_handle handle, void *buf)
MPI_T_pvar_reset	mpi.h	/^OMPI_DECLSPEC  int MPI_T_pvar_reset(MPI_T_pvar_session session, MPI_T_pvar_handle handle);$/;"	p	signature:(MPI_T_pvar_session session, MPI_T_pvar_handle handle)
MPI_T_pvar_session	mpi.h	/^typedef struct mca_base_pvar_session_t *MPI_T_pvar_session;$/;"	t	typeref:struct:mca_base_pvar_session_t
MPI_T_pvar_session_create	mpi.h	/^OMPI_DECLSPEC  int MPI_T_pvar_session_create(MPI_T_pvar_session *session);$/;"	p	signature:(MPI_T_pvar_session *session)
MPI_T_pvar_session_free	mpi.h	/^OMPI_DECLSPEC  int MPI_T_pvar_session_free(MPI_T_pvar_session *session);$/;"	p	signature:(MPI_T_pvar_session *session)
MPI_T_pvar_start	mpi.h	/^OMPI_DECLSPEC  int MPI_T_pvar_start(MPI_T_pvar_session session, MPI_T_pvar_handle handle);$/;"	p	signature:(MPI_T_pvar_session session, MPI_T_pvar_handle handle)
MPI_T_pvar_stop	mpi.h	/^OMPI_DECLSPEC  int MPI_T_pvar_stop(MPI_T_pvar_session session, MPI_T_pvar_handle handle);$/;"	p	signature:(MPI_T_pvar_session session, MPI_T_pvar_handle handle)
MPI_T_pvar_write	mpi.h	/^OMPI_DECLSPEC  int MPI_T_pvar_write(MPI_T_pvar_session session, MPI_T_pvar_handle handle,$/;"	p	signature:(MPI_T_pvar_session session, MPI_T_pvar_handle handle, const void *buf)
MPI_Test	mpi.h	/^OMPI_DECLSPEC  int MPI_Test(MPI_Request *request, int *flag, MPI_Status *status);$/;"	p	signature:(MPI_Request *request, int *flag, MPI_Status *status)
MPI_Test_cancelled	mpi.h	/^OMPI_DECLSPEC  int MPI_Test_cancelled(const MPI_Status *status, int *flag);$/;"	p	signature:(const MPI_Status *status, int *flag)
MPI_Testall	mpi.h	/^OMPI_DECLSPEC  int MPI_Testall(int count, MPI_Request array_of_requests[], int *flag,$/;"	p	signature:(int count, MPI_Request array_of_requests[], int *flag, MPI_Status array_of_statuses[])
MPI_Testany	mpi.h	/^OMPI_DECLSPEC  int MPI_Testany(int count, MPI_Request array_of_requests[], int *index,$/;"	p	signature:(int count, MPI_Request array_of_requests[], int *index, int *flag, MPI_Status *status)
MPI_Testsome	mpi.h	/^OMPI_DECLSPEC  int MPI_Testsome(int incount, MPI_Request array_of_requests[],$/;"	p	signature:(int incount, MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[])
MPI_Topo_test	mpi.h	/^OMPI_DECLSPEC  int MPI_Topo_test(MPI_Comm comm, int *status);$/;"	p	signature:(MPI_Comm comm, int *status)
MPI_Type_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint MPI_Type_c2f(MPI_Datatype datatype);$/;"	p	signature:(MPI_Datatype datatype)
MPI_Type_commit	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_commit(MPI_Datatype *type);$/;"	p	signature:(MPI_Datatype *type)
MPI_Type_contiguous	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_contiguous(int count, MPI_Datatype oldtype,$/;"	p	signature:(int count, MPI_Datatype oldtype, MPI_Datatype *newtype)
MPI_Type_copy_attr_function	mpi.h	/^typedef int (MPI_Type_copy_attr_function)(MPI_Datatype, int, void *,$/;"	t
MPI_Type_create_darray	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_create_darray(int size, int rank, int ndims,$/;"	p	signature:(int size, int rank, int ndims, const int gsize_array[], const int distrib_array[], const int darg_array[], const int psize_array[], int order, MPI_Datatype oldtype, MPI_Datatype *newtype)
MPI_Type_create_f90_complex	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_create_f90_complex(int p, int r, MPI_Datatype *newtype);$/;"	p	signature:(int p, int r, MPI_Datatype *newtype)
MPI_Type_create_f90_integer	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_create_f90_integer(int r, MPI_Datatype *newtype);$/;"	p	signature:(int r, MPI_Datatype *newtype)
MPI_Type_create_f90_real	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_create_f90_real(int p, int r, MPI_Datatype *newtype);$/;"	p	signature:(int p, int r, MPI_Datatype *newtype)
MPI_Type_create_hindexed	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_create_hindexed(int count, const int array_of_blocklengths[],$/;"	p	signature:(int count, const int array_of_blocklengths[], const MPI_Aint array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype)
MPI_Type_create_hindexed_block	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_create_hindexed_block(int count, int blocklength,$/;"	p	signature:(int count, int blocklength, const MPI_Aint array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype)
MPI_Type_create_hvector	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_create_hvector(int count, int blocklength, MPI_Aint stride,$/;"	p	signature:(int count, int blocklength, MPI_Aint stride, MPI_Datatype oldtype, MPI_Datatype *newtype)
MPI_Type_create_indexed_block	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_create_indexed_block(int count, int blocklength,$/;"	p	signature:(int count, int blocklength, const int array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype)
MPI_Type_create_keyval	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_create_keyval(MPI_Type_copy_attr_function *type_copy_attr_fn,$/;"	p	signature:(MPI_Type_copy_attr_function *type_copy_attr_fn, MPI_Type_delete_attr_function *type_delete_attr_fn, int *type_keyval, void *extra_state)
MPI_Type_create_resized	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_create_resized(MPI_Datatype oldtype, MPI_Aint lb,$/;"	p	signature:(MPI_Datatype oldtype, MPI_Aint lb, MPI_Aint extent, MPI_Datatype *newtype)
MPI_Type_create_struct	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_create_struct(int count, const int array_of_block_lengths[],$/;"	p	signature:(int count, const int array_of_block_lengths[], const MPI_Aint array_of_displacements[], const MPI_Datatype array_of_types[], MPI_Datatype *newtype)
MPI_Type_create_subarray	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_create_subarray(int ndims, const int size_array[], const int subsize_array[],$/;"	p	signature:(int ndims, const int size_array[], const int subsize_array[], const int start_array[], int order, MPI_Datatype oldtype, MPI_Datatype *newtype)
MPI_Type_delete_attr	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_delete_attr(MPI_Datatype type, int type_keyval);$/;"	p	signature:(MPI_Datatype type, int type_keyval)
MPI_Type_delete_attr_function	mpi.h	/^typedef int (MPI_Type_delete_attr_function)(MPI_Datatype, int,$/;"	t
MPI_Type_dup	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_dup(MPI_Datatype type, MPI_Datatype *newtype);$/;"	p	signature:(MPI_Datatype type, MPI_Datatype *newtype)
MPI_Type_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_Datatype MPI_Type_f2c(MPI_Fint datatype);$/;"	p	signature:(MPI_Fint datatype)
MPI_Type_free	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_free(MPI_Datatype *type);$/;"	p	signature:(MPI_Datatype *type)
MPI_Type_free_keyval	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_free_keyval(int *type_keyval);$/;"	p	signature:(int *type_keyval)
MPI_Type_get_attr	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_get_attr(MPI_Datatype type, int type_keyval,$/;"	p	signature:(MPI_Datatype type, int type_keyval, void *attribute_val, int *flag)
MPI_Type_get_contents	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_get_contents(MPI_Datatype mtype, int max_integers,$/;"	p	signature:(MPI_Datatype mtype, int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], MPI_Aint array_of_addresses[], MPI_Datatype array_of_datatypes[])
MPI_Type_get_envelope	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_get_envelope(MPI_Datatype type, int *num_integers,$/;"	p	signature:(MPI_Datatype type, int *num_integers, int *num_addresses, int *num_datatypes, int *combiner)
MPI_Type_get_extent	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_get_extent(MPI_Datatype type, MPI_Aint *lb,$/;"	p	signature:(MPI_Datatype type, MPI_Aint *lb, MPI_Aint *extent)
MPI_Type_get_extent_x	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_get_extent_x(MPI_Datatype type, MPI_Count *lb,$/;"	p	signature:(MPI_Datatype type, MPI_Count *lb, MPI_Count *extent)
MPI_Type_get_name	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_get_name(MPI_Datatype type, char *type_name,$/;"	p	signature:(MPI_Datatype type, char *type_name, int *resultlen)
MPI_Type_get_true_extent	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_get_true_extent(MPI_Datatype datatype, MPI_Aint *true_lb,$/;"	p	signature:(MPI_Datatype datatype, MPI_Aint *true_lb, MPI_Aint *true_extent)
MPI_Type_get_true_extent_x	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_get_true_extent_x(MPI_Datatype datatype, MPI_Count *true_lb,$/;"	p	signature:(MPI_Datatype datatype, MPI_Count *true_lb, MPI_Count *true_extent)
MPI_Type_indexed	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_indexed(int count, const int array_of_blocklengths[],$/;"	p	signature:(int count, const int array_of_blocklengths[], const int array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype)
MPI_Type_match_size	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_match_size(int typeclass, int size, MPI_Datatype *type);$/;"	p	signature:(int typeclass, int size, MPI_Datatype *type)
MPI_Type_set_attr	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_set_attr(MPI_Datatype type, int type_keyval,$/;"	p	signature:(MPI_Datatype type, int type_keyval, void *attr_val)
MPI_Type_set_name	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_set_name(MPI_Datatype type, const char *type_name);$/;"	p	signature:(MPI_Datatype type, const char *type_name)
MPI_Type_size	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_size(MPI_Datatype type, int *size);$/;"	p	signature:(MPI_Datatype type, int *size)
MPI_Type_size_x	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_size_x(MPI_Datatype type, MPI_Count *size);$/;"	p	signature:(MPI_Datatype type, MPI_Count *size)
MPI_Type_vector	mpi.h	/^OMPI_DECLSPEC  int MPI_Type_vector(int count, int blocklength, int stride,$/;"	p	signature:(int count, int blocklength, int stride, MPI_Datatype oldtype, MPI_Datatype *newtype)
MPI_UB	mpi.h	1060;"	d
MPI_UINT16_T	mpi.h	1132;"	d
MPI_UINT32_T	mpi.h	1134;"	d
MPI_UINT64_T	mpi.h	1136;"	d
MPI_UINT8_T	mpi.h	1130;"	d
MPI_UNDEFINED	mpi.h	424;"	d
MPI_UNEQUAL	mpi.h	/^  MPI_UNEQUAL$/;"	e	enum:__anon2
MPI_UNIVERSE_SIZE	mpi.h	/^    MPI_UNIVERSE_SIZE,$/;"	e	enum:__anon1
MPI_UNSIGNED	mpi.h	1053;"	d
MPI_UNSIGNED_CHAR	mpi.h	1049;"	d
MPI_UNSIGNED_LONG	mpi.h	1052;"	d
MPI_UNSIGNED_LONG_LONG	mpi.h	1066;"	d
MPI_UNSIGNED_SHORT	mpi.h	1051;"	d
MPI_UNWEIGHTED	mpi.h	433;"	d
MPI_Unpack	mpi.h	/^OMPI_DECLSPEC  int MPI_Unpack(const void *inbuf, int insize, int *position,$/;"	p	signature:(const void *inbuf, int insize, int *position, void *outbuf, int outcount, MPI_Datatype datatype, MPI_Comm comm)
MPI_Unpack_external	mpi.h	/^OMPI_DECLSPEC  int MPI_Unpack_external (const char datarep[], const void *inbuf, MPI_Aint insize,$/;"	p	signature:(const char datarep[], const void *inbuf, MPI_Aint insize, MPI_Aint *position, void *outbuf, int outcount, MPI_Datatype datatype)
MPI_Unpublish_name	mpi.h	/^OMPI_DECLSPEC  int MPI_Unpublish_name(const char *service_name, MPI_Info info, const char *port_name);$/;"	p	signature:(const char *service_name, MPI_Info info, const char *port_name)
MPI_User_function	mpi.h	/^typedef void (MPI_User_function)(void *, void *, int *, MPI_Datatype *);$/;"	t
MPI_VERSION	mpi.h	239;"	d
MPI_WCHAR	mpi.h	1062;"	d
MPI_WEIGHTS_EMPTY	mpi.h	434;"	d
MPI_WIN_BASE	mpi.h	/^    MPI_WIN_BASE,$/;"	e	enum:__anon1
MPI_WIN_CREATE_FLAVOR	mpi.h	/^    MPI_WIN_CREATE_FLAVOR,$/;"	e	enum:__anon1
MPI_WIN_DISP_UNIT	mpi.h	/^    MPI_WIN_DISP_UNIT,$/;"	e	enum:__anon1
MPI_WIN_DUP_FN	mpi.h	796;"	d
MPI_WIN_FLAVOR_ALLOCATE	mpi.h	491;"	d
MPI_WIN_FLAVOR_CREATE	mpi.h	490;"	d
MPI_WIN_FLAVOR_DYNAMIC	mpi.h	492;"	d
MPI_WIN_FLAVOR_SHARED	mpi.h	493;"	d
MPI_WIN_MODEL	mpi.h	/^    MPI_WIN_MODEL,$/;"	e	enum:__anon1
MPI_WIN_NULL	mpi.h	744;"	d
MPI_WIN_NULL_COPY_FN	mpi.h	795;"	d
MPI_WIN_NULL_DELETE_FN	mpi.h	794;"	d
MPI_WIN_SEPARATE	mpi.h	496;"	d
MPI_WIN_SIZE	mpi.h	/^    MPI_WIN_SIZE,$/;"	e	enum:__anon1
MPI_WIN_UNIFIED	mpi.h	495;"	d
MPI_WTIME_IS_GLOBAL	mpi.h	/^    MPI_WTIME_IS_GLOBAL,$/;"	e	enum:__anon1
MPI_Wait	mpi.h	/^OMPI_DECLSPEC  int MPI_Wait(MPI_Request *request, MPI_Status *status);$/;"	p	signature:(MPI_Request *request, MPI_Status *status)
MPI_Waitall	mpi.h	/^OMPI_DECLSPEC  int MPI_Waitall(int count, MPI_Request array_of_requests[],$/;"	p	signature:(int count, MPI_Request array_of_requests[], MPI_Status *array_of_statuses)
MPI_Waitany	mpi.h	/^OMPI_DECLSPEC  int MPI_Waitany(int count, MPI_Request array_of_requests[],$/;"	p	signature:(int count, MPI_Request array_of_requests[], int *index, MPI_Status *status)
MPI_Waitsome	mpi.h	/^OMPI_DECLSPEC  int MPI_Waitsome(int incount, MPI_Request array_of_requests[],$/;"	p	signature:(int incount, MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[])
MPI_Win	mpi.h	/^typedef struct ompi_win_t *MPI_Win;$/;"	t	typeref:struct:ompi_win_t
MPI_Win_allocate	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_allocate(MPI_Aint size, int disp_unit, MPI_Info info,$/;"	p	signature:(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr, MPI_Win *win)
MPI_Win_allocate_shared	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_allocate_shared(MPI_Aint size, int disp_unit, MPI_Info info,$/;"	p	signature:(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr, MPI_Win *win)
MPI_Win_attach	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_attach(MPI_Win win, void *base, MPI_Aint size);$/;"	p	signature:(MPI_Win win, void *base, MPI_Aint size)
MPI_Win_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint MPI_Win_c2f(MPI_Win win);$/;"	p	signature:(MPI_Win win)
MPI_Win_call_errhandler	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_call_errhandler(MPI_Win win, int errorcode);$/;"	p	signature:(MPI_Win win, int errorcode)
MPI_Win_complete	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_complete(MPI_Win win);$/;"	p	signature:(MPI_Win win)
MPI_Win_copy_attr_function	mpi.h	/^typedef int (MPI_Win_copy_attr_function)(MPI_Win, int, void *,$/;"	t
MPI_Win_create	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_create(void *base, MPI_Aint size, int disp_unit,$/;"	p	signature:(void *base, MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, MPI_Win *win)
MPI_Win_create_dynamic	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_create_dynamic(MPI_Info info, MPI_Comm comm, MPI_Win *win);$/;"	p	signature:(MPI_Info info, MPI_Comm comm, MPI_Win *win)
MPI_Win_create_errhandler	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_create_errhandler(MPI_Win_errhandler_function *function,$/;"	p	signature:(MPI_Win_errhandler_function *function, MPI_Errhandler *errhandler)
MPI_Win_create_keyval	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_create_keyval(MPI_Win_copy_attr_function *win_copy_attr_fn,$/;"	p	signature:(MPI_Win_copy_attr_function *win_copy_attr_fn, MPI_Win_delete_attr_function *win_delete_attr_fn, int *win_keyval, void *extra_state)
MPI_Win_delete_attr	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_delete_attr(MPI_Win win, int win_keyval);$/;"	p	signature:(MPI_Win win, int win_keyval)
MPI_Win_delete_attr_function	mpi.h	/^typedef int (MPI_Win_delete_attr_function)(MPI_Win, int, void *, void *);$/;"	t
MPI_Win_detach	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_detach(MPI_Win win, void *base);$/;"	p	signature:(MPI_Win win, void *base)
MPI_Win_errhandler_function	mpi.h	/^typedef void (MPI_Win_errhandler_function)(MPI_Win *, int *, ...);$/;"	t
MPI_Win_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_Win MPI_Win_f2c(MPI_Fint win);$/;"	p	signature:(MPI_Fint win)
MPI_Win_fence	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_fence(int assert, MPI_Win win);$/;"	p	signature:(int assert, MPI_Win win)
MPI_Win_flush	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_flush(int rank, MPI_Win win);$/;"	p	signature:(int rank, MPI_Win win)
MPI_Win_flush_all	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_flush_all(MPI_Win win);$/;"	p	signature:(MPI_Win win)
MPI_Win_flush_local	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_flush_local(int rank, MPI_Win win);$/;"	p	signature:(int rank, MPI_Win win)
MPI_Win_flush_local_all	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_flush_local_all(MPI_Win win);$/;"	p	signature:(MPI_Win win)
MPI_Win_free	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_free(MPI_Win *win);$/;"	p	signature:(MPI_Win *win)
MPI_Win_free_keyval	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_free_keyval(int *win_keyval);$/;"	p	signature:(int *win_keyval)
MPI_Win_get_attr	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_get_attr(MPI_Win win, int win_keyval,$/;"	p	signature:(MPI_Win win, int win_keyval, void *attribute_val, int *flag)
MPI_Win_get_errhandler	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_get_errhandler(MPI_Win win, MPI_Errhandler *errhandler);$/;"	p	signature:(MPI_Win win, MPI_Errhandler *errhandler)
MPI_Win_get_group	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_get_group(MPI_Win win, MPI_Group *group);$/;"	p	signature:(MPI_Win win, MPI_Group *group)
MPI_Win_get_info	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_get_info(MPI_Win win, MPI_Info *info_used);$/;"	p	signature:(MPI_Win win, MPI_Info *info_used)
MPI_Win_get_name	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_get_name(MPI_Win win, char *win_name, int *resultlen);$/;"	p	signature:(MPI_Win win, char *win_name, int *resultlen)
MPI_Win_lock	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_lock(int lock_type, int rank, int assert, MPI_Win win);$/;"	p	signature:(int lock_type, int rank, int assert, MPI_Win win)
MPI_Win_lock_all	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_lock_all(int assert, MPI_Win win);$/;"	p	signature:(int assert, MPI_Win win)
MPI_Win_post	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_post(MPI_Group group, int assert, MPI_Win win);$/;"	p	signature:(MPI_Group group, int assert, MPI_Win win)
MPI_Win_set_attr	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_set_attr(MPI_Win win, int win_keyval, void *attribute_val);$/;"	p	signature:(MPI_Win win, int win_keyval, void *attribute_val)
MPI_Win_set_errhandler	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_set_errhandler(MPI_Win win, MPI_Errhandler errhandler);$/;"	p	signature:(MPI_Win win, MPI_Errhandler errhandler)
MPI_Win_set_info	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_set_info(MPI_Win win, MPI_Info info);$/;"	p	signature:(MPI_Win win, MPI_Info info)
MPI_Win_set_name	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_set_name(MPI_Win win, const char *win_name);$/;"	p	signature:(MPI_Win win, const char *win_name)
MPI_Win_shared_query	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_shared_query(MPI_Win win, int rank, MPI_Aint *size, int *disp_unit, void *baseptr);$/;"	p	signature:(MPI_Win win, int rank, MPI_Aint *size, int *disp_unit, void *baseptr)
MPI_Win_start	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_start(MPI_Group group, int assert, MPI_Win win);$/;"	p	signature:(MPI_Group group, int assert, MPI_Win win)
MPI_Win_sync	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_sync(MPI_Win win);$/;"	p	signature:(MPI_Win win)
MPI_Win_test	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_test(MPI_Win win, int *flag);$/;"	p	signature:(MPI_Win win, int *flag)
MPI_Win_unlock	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_unlock(int rank, MPI_Win win);$/;"	p	signature:(int rank, MPI_Win win)
MPI_Win_unlock_all	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_unlock_all(MPI_Win win);$/;"	p	signature:(MPI_Win win)
MPI_Win_wait	mpi.h	/^OMPI_DECLSPEC  int MPI_Win_wait(MPI_Win win);$/;"	p	signature:(MPI_Win win)
MPI_Wtick	mpi.h	/^OMPI_DECLSPEC  double MPI_Wtick(void);$/;"	p	signature:(void)
MPI_Wtime	mpi.h	/^OMPI_DECLSPEC  double MPI_Wtime(void);$/;"	p	signature:(void)
Map	openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Map(int ndims, const int dims[], const bool periods[]) const;$/;"	p	class:Cartcomm	access:public	signature:(int ndims, const int dims[], const bool periods[]) const
Map	openmpi/ompi/mpi/cxx/topology.h	/^  virtual int Map(int nnodes, const int index[], $/;"	p	class:Graphcomm	access:public	signature:(int nnodes, const int index[], const int edges[]) const
Map	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Map(int ndims, const int dims[], const bool periods[]) const $/;"	f	class:MPI::Cartcomm	signature:(int ndims, const int dims[], const bool periods[]) const
Map	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Graphcomm::Map(int nnodes, const int index[], $/;"	f	class:MPI::Graphcomm	signature:(int nnodes, const int index[], const int edges[]) const
Match_size	openmpi/ompi/mpi/cxx/datatype.h	/^  static Datatype Match_size(int typeclass, int size);$/;"	p	class:Datatype	access:public	signature:(int typeclass, int size)
Match_size	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Match_size(int typeclass, int size)$/;"	f	class:MPI::Datatype	signature:(int typeclass, int size)
Merge	openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Intracomm Merge(bool high) const;$/;"	p	class:Intercomm	access:public	signature:(bool high) const
Merge	openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Merge(bool high) const$/;"	f	class:MPI::Intercomm	signature:(bool high) const
NULL_COPY_FN	openmpi/ompi/mpi/cxx/comm.h	/^  static int NULL_COPY_FN(const Comm& oldcomm, int comm_keyval,$/;"	p	class:Comm	access:public	signature:(const Comm& oldcomm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, bool& flag)
NULL_COPY_FN	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::NULL_COPY_FN(const MPI::Comm& \/* oldcomm *\/, $/;"	f	class:MPI::Comm	signature:(const MPI::Comm& , int , void* , void* , void* , bool& flag)
NULL_DELETE_FN	openmpi/ompi/mpi/cxx/comm.h	/^  static int NULL_DELETE_FN(Comm& comm, int comm_keyval, void* attribute_val,$/;"	p	class:Comm	access:public	signature:(Comm& comm, int comm_keyval, void* attribute_val, void* extra_state)
NULL_DELETE_FN	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::NULL_DELETE_FN(MPI::Comm& \/* comm *\/, $/;"	f	class:MPI::Comm	signature:(MPI::Comm& , int , void* , void* )
OMPI_BUILDING	mpi.h	227;"	d
OMPI_BUILD_CXX_BINDINGS	mpi.h	157;"	d
OMPI_CXX_SUPPORTS_2D_CONST_CAST	mpi.h	163;"	d
OMPI_C_MPI_COMM_DUP_FN	mpi.h	/^OMPI_DECLSPEC int OMPI_C_MPI_COMM_DUP_FN( MPI_Comm comm, int comm_keyval,$/;"	p	signature:( MPI_Comm comm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, int* flag )
OMPI_C_MPI_COMM_NULL_COPY_FN	mpi.h	/^OMPI_DECLSPEC int OMPI_C_MPI_COMM_NULL_COPY_FN( MPI_Comm comm,$/;"	p	signature:( MPI_Comm comm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, int* flag )
OMPI_C_MPI_COMM_NULL_DELETE_FN	mpi.h	/^OMPI_DECLSPEC int OMPI_C_MPI_COMM_NULL_DELETE_FN( MPI_Comm comm,$/;"	p	signature:( MPI_Comm comm, int comm_keyval, void* attribute_val_out, void* extra_state )
OMPI_C_MPI_TYPE_DUP_FN	mpi.h	/^OMPI_DECLSPEC int OMPI_C_MPI_TYPE_DUP_FN( MPI_Datatype datatype,$/;"	p	signature:( MPI_Datatype datatype, int type_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, int* flag )
OMPI_C_MPI_TYPE_NULL_COPY_FN	mpi.h	/^OMPI_DECLSPEC int OMPI_C_MPI_TYPE_NULL_COPY_FN( MPI_Datatype datatype,$/;"	p	signature:( MPI_Datatype datatype, int type_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, int* flag )
OMPI_C_MPI_TYPE_NULL_DELETE_FN	mpi.h	/^OMPI_DECLSPEC int OMPI_C_MPI_TYPE_NULL_DELETE_FN( MPI_Datatype datatype,$/;"	p	signature:( MPI_Datatype datatype, int type_keyval, void* attribute_val_out, void* extra_state )
OMPI_C_MPI_WIN_DUP_FN	mpi.h	/^OMPI_DECLSPEC int OMPI_C_MPI_WIN_DUP_FN( MPI_Win window, int win_keyval,$/;"	p	signature:( MPI_Win window, int win_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, int* flag )
OMPI_C_MPI_WIN_NULL_COPY_FN	mpi.h	/^OMPI_DECLSPEC int OMPI_C_MPI_WIN_NULL_COPY_FN( MPI_Win window, int win_keyval,$/;"	p	signature:( MPI_Win window, int win_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, int* flag )
OMPI_C_MPI_WIN_NULL_DELETE_FN	mpi.h	/^OMPI_DECLSPEC int OMPI_C_MPI_WIN_NULL_DELETE_FN( MPI_Win window,$/;"	p	signature:( MPI_Win window, int win_keyval, void* attribute_val_out, void* extra_state )
OMPI_DECLSPEC	mpi.h	199;"	d
OMPI_DECLSPEC	mpi.h	201;"	d
OMPI_DECLSPEC	mpi.h	205;"	d
OMPI_DECLSPEC	mpi.h	207;"	d
OMPI_HAVE_CXX_EXCEPTION_SUPPORT	mpi.h	176;"	d
OMPI_HAVE_FORTRAN_INTEGER1	mpi.h	106;"	d
OMPI_HAVE_FORTRAN_INTEGER16	mpi.h	109;"	d
OMPI_HAVE_FORTRAN_INTEGER2	mpi.h	112;"	d
OMPI_HAVE_FORTRAN_INTEGER4	mpi.h	115;"	d
OMPI_HAVE_FORTRAN_INTEGER8	mpi.h	118;"	d
OMPI_HAVE_FORTRAN_LOGICAL1	mpi.h	94;"	d
OMPI_HAVE_FORTRAN_LOGICAL2	mpi.h	97;"	d
OMPI_HAVE_FORTRAN_LOGICAL4	mpi.h	100;"	d
OMPI_HAVE_FORTRAN_LOGICAL8	mpi.h	103;"	d
OMPI_HAVE_FORTRAN_REAL16	mpi.h	121;"	d
OMPI_HAVE_FORTRAN_REAL2	mpi.h	124;"	d
OMPI_HAVE_FORTRAN_REAL4	mpi.h	127;"	d
OMPI_HAVE_FORTRAN_REAL8	mpi.h	130;"	d
OMPI_HAVE_MPI_EXT	mpi-ext.h	12;"	d
OMPI_MAJOR_VERSION	mpi.h	179;"	d
OMPI_MINOR_VERSION	mpi.h	180;"	d
OMPI_MPI_COUNT_TYPE	mpi.h	151;"	d
OMPI_MPI_EXT_H	mpi-ext.h	6;"	d
OMPI_MPI_H	mpi.h	27;"	d
OMPI_MPI_OFFSET_SIZE	mpi.h	148;"	d
OMPI_MPI_OFFSET_TYPE	mpi.h	142;"	d
OMPI_OFFSET_DATATYPE	mpi.h	145;"	d
OMPI_PARAM_CHECK	mpi.h	166;"	d
OMPI_PREDEFINED_GLOBAL	mpi.h	308;"	d
OMPI_PREDEFINED_GLOBAL	mpi.h	310;"	d
OMPI_PROVIDE_MPI_FILE_INTERFACE	mpi.h	194;"	d
OMPI_RELEASE_VERSION	mpi.h	181;"	d
OMPI_WANT_MPI_CXX_SEEK	mpi.h	160;"	d
OMPI_WANT_MPI_INTERFACE_WARNING	mpi.h	172;"	d
OPAL_BUILD_PLATFORM_COMPILER_FAMILYID	mpi.h	43;"	d
OPAL_BUILD_PLATFORM_COMPILER_VERSION	mpi.h	46;"	d
OPAL_C_HAVE_VISIBILITY	mpi.h	191;"	d
OPAL_HAVE_ATTRIBUTE_DEPRECATED	mpi.h	52;"	d
OPAL_HAVE_ATTRIBUTE_DEPRECATED_ARGUMENT	mpi.h	55;"	d
OPAL_HAVE_LONG_LONG	mpi.h	64;"	d
OPAL_HAVE_SYS_TIME_H	mpi.h	58;"	d
OPAL_INT_TO_BOOL	openmpi/ompi/mpi/cxx/mpicxx.h	161;"	d
OPAL_INT_TO_BOOL	openmpi/ompi/mpi/cxx/mpicxx.h	163;"	d
OPAL_MAX_DATAREP_STRING	mpi.h	73;"	d
OPAL_MAX_ERROR_STRING	mpi.h	76;"	d
OPAL_MAX_INFO_KEY	mpi.h	79;"	d
OPAL_MAX_INFO_VAL	mpi.h	82;"	d
OPAL_MAX_OBJECT_NAME	mpi.h	85;"	d
OPAL_MAX_PORT_NAME	mpi.h	88;"	d
OPAL_MAX_PROCESSOR_NAME	mpi.h	91;"	d
OPAL_PORTABLE_PLATFORM_H	mpi_portable_platform.h	16;"	d
OPAL_PTRDIFF_TYPE	mpi.h	154;"	d
OPAL_STDC_HEADERS	mpi.h	49;"	d
OPARI_OMP_H	vampirtrace/opari_omp.h	8;"	d
OPARI_VT	vampirtrace/pomp_lib.h	12;"	d
OPEN_MPI	mpi.h	234;"	d
OP_NULL	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Op           OP_NULL;$/;"	x
ORDER_C	openmpi/ompi/mpi/cxx/constants.h	/^static const int ORDER_C = MPI_ORDER_C;$/;"	v
ORDER_FORTRAN	openmpi/ompi/mpi/cxx/constants.h	/^static const int ORDER_FORTRAN = MPI_ORDER_FORTRAN;$/;"	v
OSHMEM_COMPLEX_TYPE	pshmem.h	20;"	d
OSHMEM_COMPLEX_TYPE	pshmem.h	23;"	d
OSHMEM_COMPLEX_TYPE	shmem.h	21;"	d
OSHMEM_COMPLEX_TYPE	shmem.h	24;"	d
OSHMEM_DECLSPEC	pshmem.h	29;"	d
OSHMEM_DECLSPEC	pshmem.h	31;"	d
OSHMEM_DECLSPEC	shmem.h	38;"	d
OSHMEM_DECLSPEC	shmem.h	40;"	d
OSHMEM_DESTRUCTOR	pshmem.h	37;"	d
OSHMEM_DESTRUCTOR	pshmem.h	39;"	d
OSHMEM_DESTRUCTOR	shmem.h	46;"	d
OSHMEM_DESTRUCTOR	shmem.h	48;"	d
OSHMEM_MAJOR_VERSION	shmem.h	31;"	d
OSHMEM_MINOR_VERSION	shmem.h	32;"	d
OSHMEM_RELEASE_VERSION	shmem.h	33;"	d
OSHMEM_SHMEMX_H	shmemx.h	13;"	d
OSHMEM_SHMEM_COMPAT_H	shmem-compat.h	13;"	d
OSHMEM_SHMEM_H	shmem.h	14;"	d
OTFAUX_H	vampirtrace/open-trace-format/otfaux.h	2;"	d
OTFAUX_KEYVALUE_TUD_P2P_RECEIVED_SCL_NAME	vampirtrace/open-trace-format/OTFAUX_MsgMatching.h	82;"	d
OTFAUX_KEYVALUE_TUD_P2P_RECEIVED_SCL_TYPE	vampirtrace/open-trace-format/OTFAUX_MsgMatching.h	83;"	d
OTFAUX_KEYVALUE_TUD_P2P_RECEIVED_SIZE_NAME	vampirtrace/open-trace-format/OTFAUX_MsgMatching.h	80;"	d
OTFAUX_KEYVALUE_TUD_P2P_RECEIVED_SIZE_TYPE	vampirtrace/open-trace-format/OTFAUX_MsgMatching.h	81;"	d
OTFAUX_KEYVALUE_TUD_P2P_RECEIVED_TIME_NAME	vampirtrace/open-trace-format/OTFAUX_MsgMatching.h	78;"	d
OTFAUX_KEYVALUE_TUD_P2P_RECEIVED_TIME_TYPE	vampirtrace/open-trace-format/OTFAUX_MsgMatching.h	79;"	d
OTFAUX_MSGMATCHING_H	vampirtrace/open-trace-format/OTFAUX_MsgMatching.h	2;"	d
OTFAUX_MsgMatching.h	vampirtrace/open-trace-format/OTFAUX_MsgMatching.h	1;"	F
OTFAUX_MsgMatching_Context	vampirtrace/open-trace-format/OTFAUX_MsgMatching.h	/^typedef OTFAUX_State OTFAUX_MsgMatching_Context;$/;"	t
OTFAUX_MsgMatching_create	vampirtrace/open-trace-format/OTFAUX_MsgMatching.h	/^OTFAUX_MsgMatching_Context* OTFAUX_MsgMatching_create( void );$/;"	p	signature:( void )
OTFAUX_MsgMatching_destroy	vampirtrace/open-trace-format/OTFAUX_MsgMatching.h	/^void OTFAUX_MsgMatching_destroy( OTFAUX_MsgMatching_Context* mm_context );$/;"	p	signature:( OTFAUX_MsgMatching_Context* mm_context )
OTFAUX_MsgMatching_enqueueRecv	vampirtrace/open-trace-format/OTFAUX_MsgMatching.h	/^void OTFAUX_MsgMatching_enqueueRecv( OTFAUX_MsgMatching_Context* mm_context,$/;"	p	signature:( OTFAUX_MsgMatching_Context* mm_context, uint64_t sender, uint64_t receiver, uint32_t tag, uint32_t comm, uint64_t time, uint32_t size, uint32_t scl )
OTFAUX_MsgMatching_matchSend	vampirtrace/open-trace-format/OTFAUX_MsgMatching.h	/^int OTFAUX_MsgMatching_matchSend( OTFAUX_MsgMatching_Context* mm_context,$/;"	p	signature:( OTFAUX_MsgMatching_Context* mm_context, uint64_t sender, uint64_t receiver, uint32_t tag, uint32_t comm, uint64_t* ptime, uint32_t* psize, uint32_t* pscl )
OTFAUX_MsgMatching_releaseMemory	vampirtrace/open-trace-format/OTFAUX_MsgMatching.h	/^void OTFAUX_MsgMatching_releaseMemory( OTFAUX_MsgMatching_Context* mm_context );$/;"	p	signature:( OTFAUX_MsgMatching_Context* mm_context )
OTFAUX_ReleaseEventData	vampirtrace/open-trace-format/OTFAUX_State.h	/^( *OTFAUX_ReleaseEventData )( void* userData,$/;"	t
OTFAUX_STATE_H	vampirtrace/open-trace-format/OTFAUX_State.h	2;"	d
OTFAUX_State	vampirtrace/open-trace-format/OTFAUX_State.h	/^typedef struct OTFAUX_State OTFAUX_State;$/;"	t	typeref:struct:OTFAUX_State
OTFAUX_State.h	vampirtrace/open-trace-format/OTFAUX_State.h	1;"	F
OTFAUX_State_create	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_create( void );$/;"	p	signature:( void )
OTFAUX_State_declareProcess	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_declareProcess( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, uint64_t processId, int isThumbnailProcess )
OTFAUX_State_destroy	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_destroy( OTFAUX_State* auxState );$/;"	p	signature:( OTFAUX_State* auxState )
OTFAUX_State_enqueueRecvMsg	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_enqueueRecvMsg( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, uint64_t eventTime, uint64_t receiverProcessId, uint64_t senderProcessId, uint32_t comm, uint32_t tag, uint32_t length, uint32_t scl )
OTFAUX_State_processBeginCollectiveOperation	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_processBeginCollectiveOperation( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, uint64_t eventTime, uint64_t processId, uint32_t comm, uint32_t root, uint32_t collOp, uint64_t matchingId, uint64_t bytesSent, uint64_t bytesRecv, uint32_t scl, void* eventData )
OTFAUX_State_processBeginFileOperation	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_processBeginFileOperation( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, uint64_t eventTime, uint64_t processId, uint64_t matchingId, uint32_t scl, void* eventData )
OTFAUX_State_processCollectiveOperation	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_processCollectiveOperation( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, uint64_t eventTime, uint64_t processId, uint32_t comm, uint32_t root, uint32_t collOp, uint64_t bytesSent, uint64_t bytesRecv, uint32_t scl )
OTFAUX_State_processCounter	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_processCounter( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, uint64_t eventTime, uint64_t processId, uint32_t counterId, uint64_t value, void* eventData )
OTFAUX_State_processEndCollectiveOperation	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_processEndCollectiveOperation( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, uint64_t eventTime, uint64_t processId, uint64_t matchingId )
OTFAUX_State_processEndFileOperation	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_processEndFileOperation( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, uint64_t eventTime, uint64_t processId, uint64_t matchingId )
OTFAUX_State_processEnter	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_processEnter( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, uint64_t eventTime, uint64_t processId, uint32_t function, uint32_t scl, void* eventData )
OTFAUX_State_processFileClose	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_processFileClose( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, uint64_t eventTime, uint64_t processId, uint64_t handleId )
OTFAUX_State_processFileOpen	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_processFileOpen( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, uint64_t eventTime, uint64_t processId, uint32_t fileId, uint64_t handleId, uint32_t scl, void* eventData )
OTFAUX_State_processLeave	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_processLeave( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, uint64_t eventTime, uint64_t processId, uint32_t function )
OTFAUX_State_processSendMsg	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_processSendMsg( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, uint64_t eventTime, uint64_t senderProcessId, uint64_t receiverProcessId, uint32_t comm, uint32_t tag, uint32_t length, uint32_t scl, uint64_t* recvTime, uint32_t* recvLength, uint32_t* recvScl, void* eventData )
OTFAUX_State_setReleaseEventDataCallback	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_setReleaseEventDataCallback( OTFAUX_State*           auxState,$/;"	p	signature:( OTFAUX_State* auxState, OTFAUX_ReleaseEventData releaseEventDataCallback, void* userData )
OTFAUX_State_setWriteBeginCollopSnapshotCallback	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_setWriteBeginCollopSnapshotCallback( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, OTFAUX_WriteBeginCollopSnapshotCallback writeBeginCollopSnapshotCallback )
OTFAUX_State_setWriteBeginFileOpSnapshotCallback	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_setWriteBeginFileOpSnapshotCallback( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, OTFAUX_WriteBeginFileOpSnapshotCallback writeBeginFileOpSnapshotCallback )
OTFAUX_State_setWriteCollopCountSnapshotCallback	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_setWriteCollopCountSnapshotCallback( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, OTFAUX_WriteCollopCountSnapshotCallback writeCollopCountSnapshotCallback )
OTFAUX_State_setWriteCounterSnapshotCallback	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_setWriteCounterSnapshotCallback( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, OTFAUX_WriteCounterSnapshotCallback writeCounterSnapshotCallback )
OTFAUX_State_setWriteEnterSnapshotCallback	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_setWriteEnterSnapshotCallback( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, OTFAUX_WriteEnterSnapshotCallback writeEnterSnapshotCallback )
OTFAUX_State_setWriteOpenFileSnapshotCallback	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_setWriteOpenFileSnapshotCallback( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, OTFAUX_WriteOpenFileSnapshotCallback writeOpenFileSnapshotCallback )
OTFAUX_State_setWriteSendSnapshotCallback	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_setWriteSendSnapshotCallback( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, OTFAUX_WriteSendSnapshotCallback writeSendSnapshotCallback )
OTFAUX_State_setupThumbnail	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_setupThumbnail( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, uint64_t minTime, uint64_t maxTime, uint32_t width )
OTFAUX_State_writeSnapshot	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_writeSnapshot( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, uint64_t snapshotTime, void* userData )
OTFAUX_State_writeThumbnail	vampirtrace/open-trace-format/OTFAUX_State.h	/^OTFAUX_State_writeThumbnail( OTFAUX_State* auxState,$/;"	p	signature:( OTFAUX_State* auxState, const char* namestub, int create, ... )
OTFAUX_THUMBNAIL_H	vampirtrace/open-trace-format/OTFAUX_Thumbnail.h	2;"	d
OTFAUX_Thumbnail.h	vampirtrace/open-trace-format/OTFAUX_Thumbnail.h	1;"	F
OTFAUX_ThumbnailReader	vampirtrace/open-trace-format/OTFAUX_Thumbnail.h	/^typedef struct OTFAUX_ThumbnailReader OTFAUX_ThumbnailReader;$/;"	t	typeref:struct:OTFAUX_ThumbnailReader
OTFAUX_ThumbnailReader_close	vampirtrace/open-trace-format/OTFAUX_Thumbnail.h	/^OTFAUX_ThumbnailReader_close( OTFAUX_ThumbnailReader* tn_reader );$/;"	p	signature:( OTFAUX_ThumbnailReader* tn_reader )
OTFAUX_ThumbnailReader_getNumberOfProcs	vampirtrace/open-trace-format/OTFAUX_Thumbnail.h	/^OTFAUX_ThumbnailReader_getNumberOfProcs( const OTFAUX_ThumbnailReader* tn_reader,$/;"	p	signature:( const OTFAUX_ThumbnailReader* tn_reader, uint32_t* nprocs )
OTFAUX_ThumbnailReader_getWidth	vampirtrace/open-trace-format/OTFAUX_Thumbnail.h	/^OTFAUX_ThumbnailReader_getWidth( const OTFAUX_ThumbnailReader* tn_reader,$/;"	p	signature:( const OTFAUX_ThumbnailReader* tn_reader, uint32_t* width )
OTFAUX_ThumbnailReader_open	vampirtrace/open-trace-format/OTFAUX_Thumbnail.h	/^OTFAUX_ThumbnailReader_open( const char* namestub );$/;"	p	signature:( const char* namestub )
OTFAUX_ThumbnailReader_read	vampirtrace/open-trace-format/OTFAUX_Thumbnail.h	/^OTFAUX_ThumbnailReader_read( OTFAUX_ThumbnailReader* tn_reader,$/;"	p	signature:( OTFAUX_ThumbnailReader* tn_reader, void (* process_handler)( void*, uint64_t, const uint32_t* ), void* data )
OTFAUX_Thumbnail_Context	vampirtrace/open-trace-format/OTFAUX_Thumbnail.h	/^typedef OTFAUX_State OTFAUX_Thumbnail_Context;$/;"	t
OTFAUX_Thumbnail_create	vampirtrace/open-trace-format/OTFAUX_Thumbnail.h	/^OTFAUX_Thumbnail_create( uint64_t minTime,$/;"	p	signature:( uint64_t minTime, uint64_t maxTime, uint32_t width )
OTFAUX_Thumbnail_declareProcess	vampirtrace/open-trace-format/OTFAUX_Thumbnail.h	/^OTFAUX_Thumbnail_declareProcess( OTFAUX_Thumbnail_Context* tn_context,$/;"	p	signature:( OTFAUX_Thumbnail_Context* tn_context, uint64_t process )
OTFAUX_Thumbnail_destroy	vampirtrace/open-trace-format/OTFAUX_Thumbnail.h	/^OTFAUX_Thumbnail_destroy( OTFAUX_Thumbnail_Context* tn_context );$/;"	p	signature:( OTFAUX_Thumbnail_Context* tn_context )
OTFAUX_Thumbnail_finalize	vampirtrace/open-trace-format/OTFAUX_Thumbnail.h	/^OTFAUX_Thumbnail_finalize( OTFAUX_Thumbnail_Context* tn_context );$/;"	p	signature:( OTFAUX_Thumbnail_Context* tn_context )
OTFAUX_Thumbnail_getFilename	vampirtrace/open-trace-format/OTFAUX_Thumbnail.h	/^OTFAUX_Thumbnail_getFilename( const char* namestub );$/;"	p	signature:( const char* namestub )
OTFAUX_Thumbnail_handleEnter	vampirtrace/open-trace-format/OTFAUX_Thumbnail.h	/^OTFAUX_Thumbnail_handleEnter( OTFAUX_Thumbnail_Context* tn_context,$/;"	p	signature:( OTFAUX_Thumbnail_Context* tn_context, uint64_t timestamp, uint64_t process, uint32_t function )
OTFAUX_Thumbnail_handleLeave	vampirtrace/open-trace-format/OTFAUX_Thumbnail.h	/^OTFAUX_Thumbnail_handleLeave( OTFAUX_Thumbnail_Context* tn_context,$/;"	p	signature:( OTFAUX_Thumbnail_Context* tn_context, uint64_t timestamp, uint64_t process )
OTFAUX_Thumbnail_write	vampirtrace/open-trace-format/OTFAUX_Thumbnail.h	/^OTFAUX_Thumbnail_write( const OTFAUX_Thumbnail_Context* tn_context,$/;"	p	signature:( const OTFAUX_Thumbnail_Context* tn_context, const char* namestub, int create, ... )
OTFAUX_WriteBeginCollopSnapshotCallback	vampirtrace/open-trace-format/OTFAUX_State.h	/^( *OTFAUX_WriteBeginCollopSnapshotCallback )( void*    userData,$/;"	t
OTFAUX_WriteBeginFileOpSnapshotCallback	vampirtrace/open-trace-format/OTFAUX_State.h	/^( *OTFAUX_WriteBeginFileOpSnapshotCallback )( void*    userData,$/;"	t
OTFAUX_WriteCollopCountSnapshotCallback	vampirtrace/open-trace-format/OTFAUX_State.h	/^( *OTFAUX_WriteCollopCountSnapshotCallback )( void*    userData,$/;"	t
OTFAUX_WriteCounterSnapshotCallback	vampirtrace/open-trace-format/OTFAUX_State.h	/^( *OTFAUX_WriteCounterSnapshotCallback )( void*    userData,$/;"	t
OTFAUX_WriteEnterSnapshotCallback	vampirtrace/open-trace-format/OTFAUX_State.h	/^( *OTFAUX_WriteEnterSnapshotCallback )( void*    userData,$/;"	t
OTFAUX_WriteOpenFileSnapshotCallback	vampirtrace/open-trace-format/OTFAUX_State.h	/^( *OTFAUX_WriteOpenFileSnapshotCallback )( void*    userData,$/;"	t
OTFAUX_WriteSendSnapshotCallback	vampirtrace/open-trace-format/OTFAUX_State.h	/^( *OTFAUX_WriteSendSnapshotCallback )( void*    userData,$/;"	t
OTF_ATTR_IsCellSPUThread	vampirtrace/open-trace-format/OTF_Definitions.h	/^	OTF_ATTR_IsCellSPUThread = 4, \/**< *\/$/;"	e	enum:OTF_ATTR_TYPE_enum
OTF_ATTR_IsCommunicator	vampirtrace/open-trace-format/OTF_Definitions.h	/^	OTF_ATTR_IsCommunicator = 7 \/**< *\/$/;"	e	enum:OTF_ATTR_TYPE_enum
OTF_ATTR_IsMPIRank	vampirtrace/open-trace-format/OTF_Definitions.h	/^	OTF_ATTR_IsMPIRank = 1, \/**< *\/$/;"	e	enum:OTF_ATTR_TYPE_enum
OTF_ATTR_IsOMPThread	vampirtrace/open-trace-format/OTF_Definitions.h	/^	OTF_ATTR_IsOMPThread = 3, \/**< *\/$/;"	e	enum:OTF_ATTR_TYPE_enum
OTF_ATTR_IsPThread	vampirtrace/open-trace-format/OTF_Definitions.h	/^	OTF_ATTR_IsPThread = 2, \/**< *\/$/;"	e	enum:OTF_ATTR_TYPE_enum
OTF_ATTR_TYPE	vampirtrace/open-trace-format/OTF_Definitions.h	/^} OTF_ATTR_TYPE;$/;"	t	typeref:enum:OTF_ATTR_TYPE_enum
OTF_ATTR_TYPE_enum	vampirtrace/open-trace-format/OTF_Definitions.h	/^typedef enum OTF_ATTR_TYPE_enum { $/;"	g
OTF_ATTR_UNKNOWN	vampirtrace/open-trace-format/OTF_Definitions.h	/^	OTF_ATTR_UNKNOWN = 0, \/**< *\/$/;"	e	enum:OTF_ATTR_TYPE_enum
OTF_ATTR_hasEnterLeaveRecords	vampirtrace/open-trace-format/OTF_Definitions.h	/^	OTF_ATTR_hasEnterLeaveRecords = 6, \/**< *\/$/;"	e	enum:OTF_ATTR_TYPE_enum
OTF_ATTR_hasGroupCounters	vampirtrace/open-trace-format/OTF_Definitions.h	/^	OTF_ATTR_hasGroupCounters = 5, \/**< *\/$/;"	e	enum:OTF_ATTR_TYPE_enum
OTF_AUX_SAMPLE_POINT_INLINE_SNAPSHOT	vampirtrace/open-trace-format/OTF_Definitions.h	/^    OTF_AUX_SAMPLE_POINT_INLINE_SNAPSHOT = 2$/;"	e	enum:OTF_AuxSamplePointType_enum
OTF_AUX_SAMPLE_POINT_SNAPSHOT	vampirtrace/open-trace-format/OTF_Definitions.h	/^    OTF_AUX_SAMPLE_POINT_SNAPSHOT = 0,$/;"	e	enum:OTF_AuxSamplePointType_enum
OTF_AUX_SAMPLE_POINT_SUMMARY	vampirtrace/open-trace-format/OTF_Definitions.h	/^    OTF_AUX_SAMPLE_POINT_SUMMARY = 1,$/;"	e	enum:OTF_AuxSamplePointType_enum
OTF_AuxSamplePointType	vampirtrace/open-trace-format/OTF_Definitions.h	/^} OTF_AuxSamplePointType;$/;"	t	typeref:enum:OTF_AuxSamplePointType_enum
OTF_AuxSamplePointType_enum	vampirtrace/open-trace-format/OTF_Definitions.h	/^typedef enum OTF_AuxSamplePointType_enum {$/;"	g
OTF_BEGINCOLLOPSNAPSHOT_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	98;"	d
OTF_BEGINCOLLOP_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	51;"	d
OTF_BEGINFILEOPSNAPSHOT_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	99;"	d
OTF_BEGINFILEOP_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	54;"	d
OTF_BEGINPROCESS_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	41;"	d
OTF_BYTE_ARRAY	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_BYTE_ARRAY = 11 \/**< *\/$/;"	e	enum:OTF_Type_enum
OTF_CHAR	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_CHAR = 0,		\/**< *\/$/;"	e	enum:OTF_Type_enum
OTF_COLLECTIVE_TYPE_ALL2ALL	vampirtrace/open-trace-format/OTF_Definitions.h	197;"	d
OTF_COLLECTIVE_TYPE_ALL2ONE	vampirtrace/open-trace-format/OTF_Definitions.h	196;"	d
OTF_COLLECTIVE_TYPE_BARRIER	vampirtrace/open-trace-format/OTF_Definitions.h	194;"	d
OTF_COLLECTIVE_TYPE_ONE2ALL	vampirtrace/open-trace-format/OTF_Definitions.h	195;"	d
OTF_COLLECTIVE_TYPE_UNKNOWN	vampirtrace/open-trace-format/OTF_Definitions.h	193;"	d
OTF_COLLOPCOUNTSNAPSHOT_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	101;"	d
OTF_COLLOPSUMMARY_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	86;"	d
OTF_COLLOP_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	35;"	d
OTF_COPYHANDLER_H	vampirtrace/open-trace-format/OTF_CopyHandler.h	15;"	d
OTF_COPYHANDLER_STREAM_H	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	15;"	d
OTF_COUNTERSNAPSHOT_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	102;"	d
OTF_COUNTER_PROP_DEFAULT	vampirtrace/open-trace-format/OTF_Definitions.h	188;"	d
OTF_COUNTER_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	30;"	d
OTF_COUNTER_SCOPE_BITS	vampirtrace/open-trace-format/OTF_Definitions.h	158;"	d
OTF_COUNTER_SCOPE_LAST	vampirtrace/open-trace-format/OTF_Definitions.h	161;"	d
OTF_COUNTER_SCOPE_NEXT	vampirtrace/open-trace-format/OTF_Definitions.h	162;"	d
OTF_COUNTER_SCOPE_POINT	vampirtrace/open-trace-format/OTF_Definitions.h	160;"	d
OTF_COUNTER_SCOPE_START	vampirtrace/open-trace-format/OTF_Definitions.h	159;"	d
OTF_COUNTER_TYPE_ABS	vampirtrace/open-trace-format/OTF_Definitions.h	143;"	d
OTF_COUNTER_TYPE_ACC	vampirtrace/open-trace-format/OTF_Definitions.h	142;"	d
OTF_COUNTER_TYPE_BITS	vampirtrace/open-trace-format/OTF_Definitions.h	141;"	d
OTF_COUNTER_VARTYPE_BITS	vampirtrace/open-trace-format/OTF_Definitions.h	176;"	d
OTF_COUNTER_VARTYPE_DOUBLE	vampirtrace/open-trace-format/OTF_Definitions.h	184;"	d
OTF_COUNTER_VARTYPE_FLOAT	vampirtrace/open-trace-format/OTF_Definitions.h	183;"	d
OTF_COUNTER_VARTYPE_ISINTEGER	vampirtrace/open-trace-format/OTF_Definitions.h	172;"	d
OTF_COUNTER_VARTYPE_ISSIGNED	vampirtrace/open-trace-format/OTF_Definitions.h	173;"	d
OTF_COUNTER_VARTYPE_ISUNSIGNED	vampirtrace/open-trace-format/OTF_Definitions.h	174;"	d
OTF_COUNTER_VARTYPE_SIGNED2	vampirtrace/open-trace-format/OTF_Definitions.h	182;"	d
OTF_COUNTER_VARTYPE_SIGNED4	vampirtrace/open-trace-format/OTF_Definitions.h	180;"	d
OTF_COUNTER_VARTYPE_SIGNED8	vampirtrace/open-trace-format/OTF_Definitions.h	178;"	d
OTF_COUNTER_VARTYPE_UNSIGNED2	vampirtrace/open-trace-format/OTF_Definitions.h	181;"	d
OTF_COUNTER_VARTYPE_UNSIGNED4	vampirtrace/open-trace-format/OTF_Definitions.h	179;"	d
OTF_COUNTER_VARTYPE_UNSIGNED8	vampirtrace/open-trace-format/OTF_Definitions.h	177;"	d
OTF_CopyHandler.h	vampirtrace/open-trace-format/OTF_CopyHandler.h	1;"	F
OTF_CopyHandler_BeginCollectiveOperation	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_BeginCollectiveOperation( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t collOp, uint64_t matchingId, uint32_t procGroup, uint32_t rootProc, uint64_t sent, uint64_t received, uint32_t scltoken, OTF_KeyValueList* list )
OTF_CopyHandler_BeginCollopSnapshot	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_BeginCollopSnapshot( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint64_t originaltime, uint32_t process, uint32_t collOp, uint64_t matchingId, uint32_t procGroup, uint32_t rootProc, uint64_t sent, uint64_t received, uint32_t scltoken, OTF_KeyValueList* list )
OTF_CopyHandler_BeginFileOpSnapshot	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_BeginFileOpSnapshot( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint64_t originaltime, uint32_t process, uint64_t matchingId, uint32_t scltoken, OTF_KeyValueList* list )
OTF_CopyHandler_BeginFileOperation	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_BeginFileOperation( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint64_t matchingId, uint32_t scltoken, OTF_KeyValueList* list )
OTF_CopyHandler_BeginProcess	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_BeginProcess( void* userData, uint64_t time, uint32_t process, OTF_KeyValueList* list );$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, OTF_KeyValueList* list )
OTF_CopyHandler_CollectiveOperation	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_CollectiveOperation( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t collective, uint32_t procGroup, uint32_t rootProc, uint32_t sent, uint32_t received, uint64_t duration, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_CollopCountSnapshot	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_CollopCountSnapshot( void* userData,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t communicator, uint64_t count, OTF_KeyValueList* list )
OTF_CopyHandler_CollopSummary	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_CollopSummary(void *userData, uint64_t time, uint32_t process, uint32_t comm,$/;"	p	signature:(void *userData, uint64_t time, uint32_t process, uint32_t comm, uint32_t collective, uint64_t sentNumber, uint64_t receivedNumber, uint64_t sentBytes, uint64_t receivedBytes, OTF_KeyValueList* list )
OTF_CopyHandler_Counter	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_Counter( void* userData, uint64_t time, uint32_t process, $/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t counter, uint64_t value, OTF_KeyValueList* list )
OTF_CopyHandler_CounterSnapshot	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_CounterSnapshot( void*             userData,$/;"	p	signature:( void* userData, uint64_t time, uint64_t originaltime, uint32_t process, uint32_t counter, uint64_t value, OTF_KeyValueList* list )
OTF_CopyHandler_DefAttributeList	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefAttributeList( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t attr_token, uint32_t num, OTF_ATTR_TYPE* array, OTF_KeyValueList* list )
OTF_CopyHandler_DefAuxSamplePoint	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefAuxSamplePoint( void*                  userData,$/;"	p	signature:( void* userData, uint32_t stream, uint64_t time, OTF_AuxSamplePointType type, OTF_KeyValueList* list )
OTF_CopyHandler_DefCollectiveOperation	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefCollectiveOperation( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t collOp, const char* name, uint32_t type, OTF_KeyValueList* list )
OTF_CopyHandler_DefCounter	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefCounter( void* userData, uint32_t stream, uint32_t counter,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t counter, const char* name, uint32_t properties, uint32_t counterGroup, const char* unit, OTF_KeyValueList* list )
OTF_CopyHandler_DefCounterAssignments	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefCounterAssignments( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t counter, uint32_t number_of_members, const uint32_t* procs_or_groups, OTF_KeyValueList* list )
OTF_CopyHandler_DefCounterGroup	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefCounterGroup( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t counterGroup, const char* name, OTF_KeyValueList* list )
OTF_CopyHandler_DefCreator	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefCreator( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, const char* creator, OTF_KeyValueList* list )
OTF_CopyHandler_DefFile	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefFile( void* userData, uint32_t stream, uint32_t token,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t token, const char* name, uint32_t group, OTF_KeyValueList* list )
OTF_CopyHandler_DefFileGroup	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefFileGroup( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t token, const char* name, OTF_KeyValueList* list )
OTF_CopyHandler_DefFunction	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefFunction( void* userData, uint32_t stream, uint32_t func,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t func, const char* name, uint32_t funcGroup, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_DefFunctionGroup	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefFunctionGroup( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t funcGroup, const char* name, OTF_KeyValueList* list )
OTF_CopyHandler_DefKeyValue	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefKeyValue( void* userData, uint32_t stream, uint32_t key,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t key, OTF_Type type, const char* name, const char* description, OTF_KeyValueList* list )
OTF_CopyHandler_DefMarker	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefMarker( void *userData, uint32_t stream,$/;"	p	signature:( void *userData, uint32_t stream, uint32_t token, const char* name, uint32_t type, OTF_KeyValueList* list )
OTF_CopyHandler_DefProcess	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefProcess( void* userData, uint32_t stream, uint32_t process,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t process, const char* name, uint32_t parent, OTF_KeyValueList* list )
OTF_CopyHandler_DefProcessGroup	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefProcessGroup( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t procGroup, const char* name, uint32_t numberOfProcs, const uint32_t* procs, OTF_KeyValueList* list )
OTF_CopyHandler_DefProcessOrGroupAttributes	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefProcessOrGroupAttributes( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t proc_token, uint32_t attr_token, OTF_KeyValueList* list )
OTF_CopyHandler_DefProcessSubstitutes	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefProcessSubstitutes( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t representative, uint32_t numberOfProcs, const uint32_t* procs, OTF_KeyValueList* list )
OTF_CopyHandler_DefScl	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefScl( void* userData, uint32_t stream, uint32_t source,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t source, uint32_t sourceFile, uint32_t line, OTF_KeyValueList* list )
OTF_CopyHandler_DefSclFile	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefSclFile( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t sourceFile, const char* name, OTF_KeyValueList* list )
OTF_CopyHandler_DefTimeRange	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefTimeRange( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint64_t minTime, uint64_t maxTime, OTF_KeyValueList* list )
OTF_CopyHandler_DefTimerResolution	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefTimerResolution( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint64_t ticksPerSecond, OTF_KeyValueList* list )
OTF_CopyHandler_DefUniqueId	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefUniqueId( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint64_t uid )
OTF_CopyHandler_DefVersion	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefVersion( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint8_t major, uint8_t minor, uint8_t sub, const char* string )
OTF_CopyHandler_DefinitionComment	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_DefinitionComment( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, const char* comment, OTF_KeyValueList* list )
OTF_CopyHandler_EndCollectiveOperation	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_EndCollectiveOperation( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint64_t matchingId, OTF_KeyValueList* list )
OTF_CopyHandler_EndFileOperation	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_EndFileOperation( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t fileid, uint64_t matchingId, uint64_t handleId, uint32_t operation, uint64_t bytes, uint32_t scltoken, OTF_KeyValueList* list )
OTF_CopyHandler_EndProcess	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_EndProcess( void* userData, uint64_t time, uint32_t process, OTF_KeyValueList* list );$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, OTF_KeyValueList* list )
OTF_CopyHandler_Enter	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_Enter( void* userData, uint64_t time, uint32_t function, $/;"	p	signature:( void* userData, uint64_t time, uint32_t function, uint32_t process, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_EnterSnapshot	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_EnterSnapshot( void *userData, uint64_t time,$/;"	p	signature:( void *userData, uint64_t time, uint64_t originaltime, uint32_t function, uint32_t process, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_EventComment	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_EventComment( void* userData, uint64_t time, uint32_t process, $/;"	p	signature:( void* userData, uint64_t time, uint32_t process, const char* comment, OTF_KeyValueList* list )
OTF_CopyHandler_FileGroupOperationSummary	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_FileGroupOperationSummary( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t groupid, uint32_t process, uint64_t nopen, uint64_t nclose, uint64_t nread, uint64_t nwrite, uint64_t nseek, uint64_t bytesread, uint64_t byteswrite, OTF_KeyValueList* list )
OTF_CopyHandler_FileOperation	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_FileOperation( void* userData, uint64_t time, uint32_t fileid,$/;"	p	signature:( void* userData, uint64_t time, uint32_t fileid, uint32_t process, uint64_t handleid, uint32_t operation, uint64_t bytes, uint64_t duration, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_FileOperationSummary	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_FileOperationSummary( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t fileid, uint32_t process, uint64_t nopen, uint64_t nclose, uint64_t nread, uint64_t nwrite, uint64_t nseek, uint64_t bytesread, uint64_t byteswrite, OTF_KeyValueList* list )
OTF_CopyHandler_FunctionGroupSummary	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_FunctionGroupSummary( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t funcGroup, uint32_t process, uint64_t invocations, uint64_t exclTime, uint64_t inclTime, OTF_KeyValueList* list )
OTF_CopyHandler_FunctionSummary	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_FunctionSummary( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t function, uint32_t process, uint64_t invocations, uint64_t exclTime, uint64_t inclTime, OTF_KeyValueList* list )
OTF_CopyHandler_Leave	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_Leave( void* userData, uint64_t time, uint32_t function, $/;"	p	signature:( void* userData, uint64_t time, uint32_t function, uint32_t process, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_Marker	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_Marker( void *userData, uint64_t time,$/;"	p	signature:( void *userData, uint64_t time, uint32_t process, uint32_t token, const char* text, OTF_KeyValueList* list )
OTF_CopyHandler_MessageSummary	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_MessageSummary( void* userData, uint64_t time, uint32_t process,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t peer, uint32_t comm, uint32_t type, uint64_t sentNumber, uint64_t receivedNumber, uint64_t sentBytes, uint64_t receivedBytes, OTF_KeyValueList* list )
OTF_CopyHandler_NoOp	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_NoOp( void* userData, uint64_t time, uint32_t process,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, OTF_KeyValueList* list )
OTF_CopyHandler_OpenFileSnapshot	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_OpenFileSnapshot( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint64_t originaltime, uint32_t fileid, uint32_t process, uint64_t handleid, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_RMAEnd	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_RMAEnd( void* userData, uint64_t time, uint32_t process,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t remote, uint32_t communicator, uint32_t tag, uint32_t scltoken, OTF_KeyValueList* list )
OTF_CopyHandler_RMAGet	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_RMAGet( void* userData, uint64_t time, uint32_t process,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t origin, uint32_t target, uint32_t communicator, uint32_t tag, uint64_t bytes, uint32_t scltoken, OTF_KeyValueList* list )
OTF_CopyHandler_RMAPut	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_RMAPut( void* userData, uint64_t time, uint32_t process,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t origin, uint32_t target, uint32_t communicator, uint32_t tag, uint64_t bytes, uint32_t scltoken, OTF_KeyValueList* list )
OTF_CopyHandler_RMAPutRemoteEnd	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_RMAPutRemoteEnd( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t origin, uint32_t target, uint32_t communicator, uint32_t tag, uint64_t bytes, uint32_t scltoken, OTF_KeyValueList* list )
OTF_CopyHandler_RecvMsg	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_RecvMsg( void* userData, uint64_t time, uint32_t recvProc,$/;"	p	signature:( void* userData, uint64_t time, uint32_t recvProc, uint32_t sendProc, uint32_t group, uint32_t type, uint32_t length, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_SendMsg	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_SendMsg( void* userData, uint64_t time, uint32_t sender, $/;"	p	signature:( void* userData, uint64_t time, uint32_t sender, uint32_t receiver, uint32_t group, uint32_t type, uint32_t length, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_SendSnapshot	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_SendSnapshot( void *userData, uint64_t time,$/;"	p	signature:( void *userData, uint64_t time, uint64_t originaltime, uint32_t sender, uint32_t receiver, uint32_t procGroup, uint32_t tag, uint32_t length, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_SnapshotComment	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_SnapshotComment( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, const char* comment, OTF_KeyValueList* list )
OTF_CopyHandler_SummaryComment	vampirtrace/open-trace-format/OTF_CopyHandler.h	/^int OTF_CopyHandler_SummaryComment( void * userData, uint64_t time,$/;"	p	signature:( void * userData, uint64_t time, uint32_t process, const char* comment, OTF_KeyValueList* list )
OTF_CopyHandler_stream.h	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	1;"	F
OTF_CopyHandler_stream_BeginCollectiveOperation	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_BeginCollectiveOperation( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t collOp, uint64_t matchingId, uint32_t procGroup, uint32_t rootProc, uint64_t sent, uint64_t received, uint32_t scltoken, OTF_KeyValueList* list )
OTF_CopyHandler_stream_BeginCollopSnapshot	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_BeginCollopSnapshot( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint64_t originaltime, uint32_t process, uint32_t collOp, uint64_t matchingId, uint32_t procGroup, uint32_t rootProc, uint64_t sent, uint64_t received, uint32_t scltoken, OTF_KeyValueList* list )
OTF_CopyHandler_stream_BeginFileOpSnapshot	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_BeginFileOpSnapshot( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint64_t originaltime, uint32_t process, uint64_t matchingId, uint32_t scltoken, OTF_KeyValueList* list )
OTF_CopyHandler_stream_BeginFileOperation	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_BeginFileOperation( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint64_t matchingId, uint32_t scltoken, OTF_KeyValueList* list )
OTF_CopyHandler_stream_BeginProcess	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_BeginProcess( void* userData, uint64_t time, uint32_t process, OTF_KeyValueList* list );$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, OTF_KeyValueList* list )
OTF_CopyHandler_stream_CollectiveOperation	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_CollectiveOperation( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t collective, uint32_t procGroup, uint32_t rootProc, uint32_t sent, uint32_t received, uint64_t duration, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_stream_CollopCountSnapshot	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_CollopCountSnapshot( void* userData,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t communicator, uint64_t count, OTF_KeyValueList* list )
OTF_CopyHandler_stream_CollopSummary	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_CollopSummary(void *userData, uint64_t time, uint32_t process, uint32_t comm,$/;"	p	signature:(void *userData, uint64_t time, uint32_t process, uint32_t comm, uint32_t collective, uint64_t sentNumber, uint64_t receivedNumber, uint64_t sentBytes, uint64_t receivedBytes, OTF_KeyValueList* list )
OTF_CopyHandler_stream_Counter	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_Counter( void* userData, uint64_t time, uint32_t process, $/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t counter, uint64_t value, OTF_KeyValueList* list )
OTF_CopyHandler_stream_CounterSnapshot	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_CounterSnapshot( void*             userData,$/;"	p	signature:( void* userData, uint64_t time, uint64_t originaltime, uint32_t process, uint32_t counter, uint64_t value, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefAttributeList	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefAttributeList( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t attr_token, uint32_t num, OTF_ATTR_TYPE* array, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefAuxSamplePoint	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefAuxSamplePoint( void*                  userData,$/;"	p	signature:( void* userData, uint32_t stream, uint64_t time, OTF_AuxSamplePointType type, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefCollectiveOperation	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefCollectiveOperation( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t collOp, const char* name, uint32_t type, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefCounter	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefCounter( void* userData, uint32_t stream, uint32_t counter,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t counter, const char* name, uint32_t properties, uint32_t counterGroup, const char* unit, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefCounterAssignments	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefCounterAssignments( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t counter, uint32_t number_of_members, const uint32_t* procs_or_groups, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefCounterGroup	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefCounterGroup( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t counterGroup, const char* name, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefCreator	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefCreator( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, const char* creator, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefFile	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefFile( void* userData, uint32_t stream, uint32_t token,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t token, const char* name, uint32_t group, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefFileGroup	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefFileGroup( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t token, const char* name, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefFunction	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefFunction( void* userData, uint32_t stream, uint32_t func,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t func, const char* name, uint32_t funcGroup, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefFunctionGroup	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefFunctionGroup( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t funcGroup, const char* name, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefKeyValue	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefKeyValue( void* userData, uint32_t stream, uint32_t key,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t key, OTF_Type type, const char* name, const char* description, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefMarker	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefMarker( void *userData, uint32_t stream,$/;"	p	signature:( void *userData, uint32_t stream, uint32_t token, const char* name, uint32_t type, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefProcess	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefProcess( void* userData, uint32_t stream, uint32_t process,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t process, const char* name, uint32_t parent, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefProcessGroup	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefProcessGroup( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t procGroup, const char* name, uint32_t numberOfProcs, const uint32_t* procs, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefProcessOrGroupAttributes	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefProcessOrGroupAttributes( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t proc_token, uint32_t attr_token, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefProcessSubstitutes	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefProcessSubstitutes( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t representative, uint32_t numberOfProcs, const uint32_t* procs, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefScl	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefScl( void* userData, uint32_t stream, uint32_t source,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t source, uint32_t sourceFile, uint32_t line, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefSclFile	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefSclFile( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint32_t sourceFile, const char* name, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefTimeRange	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefTimeRange( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint64_t minTime, uint64_t maxTime, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefTimerResolution	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefTimerResolution( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint64_t ticksPerSecond, OTF_KeyValueList* list )
OTF_CopyHandler_stream_DefUniqueId	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefUniqueId( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint64_t uid )
OTF_CopyHandler_stream_DefVersion	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefVersion( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, uint8_t major, uint8_t minor, uint8_t sub, const char* string )
OTF_CopyHandler_stream_DefinitionComment	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_DefinitionComment( void* userData, uint32_t stream,$/;"	p	signature:( void* userData, uint32_t stream, const char* comment, OTF_KeyValueList* list )
OTF_CopyHandler_stream_EndCollectiveOperation	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_EndCollectiveOperation( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint64_t matchingId, OTF_KeyValueList* list )
OTF_CopyHandler_stream_EndFileOperation	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_EndFileOperation( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t fileid, uint64_t matchingId, uint64_t handleId, uint32_t operation, uint64_t bytes, uint32_t scltoken, OTF_KeyValueList* list )
OTF_CopyHandler_stream_EndProcess	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_EndProcess( void* userData, uint64_t time, uint32_t process, OTF_KeyValueList* list );$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, OTF_KeyValueList* list )
OTF_CopyHandler_stream_Enter	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_Enter( void* userData, uint64_t time, uint32_t function, $/;"	p	signature:( void* userData, uint64_t time, uint32_t function, uint32_t process, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_stream_EnterSnapshot	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_EnterSnapshot( void *userData, uint64_t time,$/;"	p	signature:( void *userData, uint64_t time, uint64_t originaltime, uint32_t function, uint32_t process, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_stream_EventComment	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_EventComment( void* userData, uint64_t time, uint32_t process, $/;"	p	signature:( void* userData, uint64_t time, uint32_t process, const char* comment, OTF_KeyValueList* list )
OTF_CopyHandler_stream_FileGroupOperationSummary	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_FileGroupOperationSummary( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t groupid, uint32_t process, uint64_t nopen, uint64_t nclose, uint64_t nread, uint64_t nwrite, uint64_t nseek, uint64_t bytesread, uint64_t byteswrite, OTF_KeyValueList* list )
OTF_CopyHandler_stream_FileOperation	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_FileOperation( void* userData, uint64_t time, uint32_t fileid,$/;"	p	signature:( void* userData, uint64_t time, uint32_t fileid, uint32_t process, uint64_t handleid, uint32_t operation, uint64_t bytes, uint64_t duration, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_stream_FileOperationSummary	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_FileOperationSummary( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t fileid, uint32_t process, uint64_t nopen, uint64_t nclose, uint64_t nread, uint64_t nwrite, uint64_t nseek, uint64_t bytesread, uint64_t byteswrite, OTF_KeyValueList* list )
OTF_CopyHandler_stream_FunctionGroupSummary	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_FunctionGroupSummary( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t funcGroup, uint32_t process, uint64_t invocations, uint64_t exclTime, uint64_t inclTime, OTF_KeyValueList* list )
OTF_CopyHandler_stream_FunctionSummary	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_FunctionSummary( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t function, uint32_t process, uint64_t invocations, uint64_t exclTime, uint64_t inclTime, OTF_KeyValueList* list )
OTF_CopyHandler_stream_Leave	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_Leave( void* userData, uint64_t time, uint32_t function, $/;"	p	signature:( void* userData, uint64_t time, uint32_t function, uint32_t process, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_stream_Marker	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_Marker( void *userData, uint64_t time,$/;"	p	signature:( void *userData, uint64_t time, uint32_t process, uint32_t token, const char* text, OTF_KeyValueList* list )
OTF_CopyHandler_stream_MessageSummary	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_MessageSummary( void* userData, uint64_t time, uint32_t process,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t peer, uint32_t comm, uint32_t type, uint64_t sentNumber, uint64_t receivedNumber, uint64_t sentBytes, uint64_t receivedBytes, OTF_KeyValueList* list )
OTF_CopyHandler_stream_NoOp	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_NoOp( void* userData, uint64_t time, uint32_t process,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, OTF_KeyValueList* list )
OTF_CopyHandler_stream_OpenFileSnapshot	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_OpenFileSnapshot( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint64_t originaltime, uint32_t fileid, uint32_t process, uint64_t handleid, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_stream_RMAEnd	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_RMAEnd( void* userData, uint64_t time, uint32_t process,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t remote, uint32_t communicator, uint32_t tag, uint32_t scltoken, OTF_KeyValueList* list )
OTF_CopyHandler_stream_RMAGet	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_RMAGet( void* userData, uint64_t time, uint32_t process,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t origin, uint32_t target, uint32_t communicator, uint32_t tag, uint64_t bytes, uint32_t scltoken, OTF_KeyValueList* list )
OTF_CopyHandler_stream_RMAPut	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_RMAPut( void* userData, uint64_t time, uint32_t process,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t origin, uint32_t target, uint32_t communicator, uint32_t tag, uint64_t bytes, uint32_t scltoken, OTF_KeyValueList* list )
OTF_CopyHandler_stream_RMAPutRemoteEnd	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_RMAPutRemoteEnd( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, uint32_t origin, uint32_t target, uint32_t communicator, uint32_t tag, uint64_t bytes, uint32_t scltoken, OTF_KeyValueList* list )
OTF_CopyHandler_stream_RecvMsg	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_RecvMsg( void* userData, uint64_t time, uint32_t recvProc,$/;"	p	signature:( void* userData, uint64_t time, uint32_t recvProc, uint32_t sendProc, uint32_t group, uint32_t type, uint32_t length, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_stream_SendMsg	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_SendMsg( void* userData, uint64_t time, uint32_t sender, $/;"	p	signature:( void* userData, uint64_t time, uint32_t sender, uint32_t receiver, uint32_t group, uint32_t type, uint32_t length, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_stream_SendSnapshot	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_SendSnapshot( void *userData, uint64_t time,$/;"	p	signature:( void *userData, uint64_t time, uint64_t originaltime, uint32_t sender, uint32_t receiver, uint32_t procGroup, uint32_t tag, uint32_t length, uint32_t source, OTF_KeyValueList* list )
OTF_CopyHandler_stream_SnapshotComment	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_SnapshotComment( void* userData, uint64_t time,$/;"	p	signature:( void* userData, uint64_t time, uint32_t process, const char* comment, OTF_KeyValueList* list )
OTF_CopyHandler_stream_SummaryComment	vampirtrace/open-trace-format/OTF_CopyHandler_stream.h	/^int OTF_CopyHandler_stream_SummaryComment( void * userData, uint64_t time,$/;"	p	signature:( void * userData, uint64_t time, uint32_t process, const char* comment, OTF_KeyValueList* list )
OTF_Counter2Double	vampirtrace/open-trace-format/OTF_inttypes.h	/^double OTF_Counter2Double( uint64_t value );$/;"	p	signature:( uint64_t value )
OTF_Counter2Float	vampirtrace/open-trace-format/OTF_inttypes.h	/^float OTF_Counter2Float( uint64_t value );$/;"	p	signature:( uint64_t value )
OTF_Counter2Signed	vampirtrace/open-trace-format/OTF_inttypes.h	/^int64_t OTF_Counter2Signed( uint64_t value );$/;"	p	signature:( uint64_t value )
OTF_Counter2Unsigned	vampirtrace/open-trace-format/OTF_inttypes.h	/^uint64_t OTF_Counter2Unsigned( uint64_t value );$/;"	p	signature:( uint64_t value )
OTF_DEFATTRLIST_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	62;"	d
OTF_DEFAUXSAMPLEPOINT_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	80;"	d
OTF_DEFCOLLOP_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	69;"	d
OTF_DEFCOUNTERASSIGNMENTS_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	77;"	d
OTF_DEFCOUNTERGROUP_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	68;"	d
OTF_DEFCOUNTER_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	67;"	d
OTF_DEFCREATOR_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	73;"	d
OTF_DEFFILEGROUP_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	75;"	d
OTF_DEFFILE_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	74;"	d
OTF_DEFFUNCTIONGROUP_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	66;"	d
OTF_DEFFUNCTION_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	65;"	d
OTF_DEFINITIONCOMMENT_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	90;"	d
OTF_DEFINITIONS_H	vampirtrace/open-trace-format/OTF_Definitions.h	16;"	d
OTF_DEFKEYVALUE_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	78;"	d
OTF_DEFMARKER_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	106;"	d
OTF_DEFPROCESSGROUP_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	61;"	d
OTF_DEFPROCESSORGROUPATTR_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	63;"	d
OTF_DEFPROCESSSUBSTITUTES_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	64;"	d
OTF_DEFPROCESS_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	60;"	d
OTF_DEFSCLFILE_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	71;"	d
OTF_DEFSCL_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	70;"	d
OTF_DEFTIMERANGE_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	76;"	d
OTF_DEFTIMERRESOLUTION_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	59;"	d
OTF_DEFUNIQUEID_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	79;"	d
OTF_DEFVERSION_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	72;"	d
OTF_DOUBLE	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_DOUBLE = 10, 	\/**< *\/$/;"	e	enum:OTF_Type_enum
OTF_Definitions.h	vampirtrace/open-trace-format/OTF_Definitions.h	1;"	F
OTF_Double2Counter	vampirtrace/open-trace-format/OTF_inttypes.h	/^uint64_t OTF_Double2Counter( double value );$/;"	p	signature:( double value )
OTF_DoubleToInt64	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint64_t OTF_DoubleToInt64(double value);$/;"	p	signature:(double value)
OTF_ENDCOLLOP_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	52;"	d
OTF_ENDFILEOP_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	55;"	d
OTF_ENDPROCESS_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	42;"	d
OTF_ENTERSNAPSHOT_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	92;"	d
OTF_ENTER_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	31;"	d
OTF_ERRNO_H	vampirtrace/open-trace-format/OTF_Errno.h	32;"	d
OTF_ERROR	vampirtrace/open-trace-format/OTF_Definitions.h	238;"	d
OTF_ERR_LEN	vampirtrace/open-trace-format/OTF_Definitions.h	236;"	d
OTF_EVENTCOMMENT_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	29;"	d
OTF_Errno.h	vampirtrace/open-trace-format/OTF_Errno.h	1;"	F
OTF_Error	vampirtrace/open-trace-format/OTF_Errno.h	/^void OTF_Error( const char* format, ... );$/;"	p	signature:( const char* format, ... )
OTF_FILECOMPRESSION_BITS	vampirtrace/open-trace-format/OTF_Filenames.h	49;"	d
OTF_FILECOMPRESSION_COMPRESSED	vampirtrace/open-trace-format/OTF_Filenames.h	48;"	d
OTF_FILECOMPRESSION_UNCOMPRESSED	vampirtrace/open-trace-format/OTF_Filenames.h	46;"	d
OTF_FILEGROUPOPERATIONSUMMARY_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	88;"	d
OTF_FILEMANAGER_H	vampirtrace/open-trace-format/OTF_FileManager.h	29;"	d
OTF_FILEMODE_NOTHING	vampirtrace/open-trace-format/OTF_File.h	/^	OTF_FILEMODE_NOTHING = 0,$/;"	e	enum:enum_OTF_FileMode
OTF_FILEMODE_READ	vampirtrace/open-trace-format/OTF_File.h	/^	OTF_FILEMODE_READ= 1, $/;"	e	enum:enum_OTF_FileMode
OTF_FILEMODE_SEEK	vampirtrace/open-trace-format/OTF_File.h	/^	OTF_FILEMODE_SEEK= 3$/;"	e	enum:enum_OTF_FileMode
OTF_FILEMODE_WRITE	vampirtrace/open-trace-format/OTF_File.h	/^	OTF_FILEMODE_WRITE= 2, $/;"	e	enum:enum_OTF_FileMode
OTF_FILENAMES	vampirtrace/open-trace-format/OTF_Filenames.h	16;"	d
OTF_FILEOP	vampirtrace/open-trace-format/OTF_Definitions.h	226;"	d
OTF_FILEOPERATIONSUMMARY_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	87;"	d
OTF_FILEOPERATION_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	44;"	d
OTF_FILEOP_BITS	vampirtrace/open-trace-format/OTF_Definitions.h	206;"	d
OTF_FILEOP_CLOSE	vampirtrace/open-trace-format/OTF_Definitions.h	208;"	d
OTF_FILEOP_DUP	vampirtrace/open-trace-format/OTF_Definitions.h	214;"	d
OTF_FILEOP_LOCK	vampirtrace/open-trace-format/OTF_Definitions.h	216;"	d
OTF_FILEOP_OPEN	vampirtrace/open-trace-format/OTF_Definitions.h	207;"	d
OTF_FILEOP_OTHER	vampirtrace/open-trace-format/OTF_Definitions.h	218;"	d
OTF_FILEOP_READ	vampirtrace/open-trace-format/OTF_Definitions.h	209;"	d
OTF_FILEOP_RENAME	vampirtrace/open-trace-format/OTF_Definitions.h	213;"	d
OTF_FILEOP_SEEK	vampirtrace/open-trace-format/OTF_Definitions.h	211;"	d
OTF_FILEOP_SYNC	vampirtrace/open-trace-format/OTF_Definitions.h	215;"	d
OTF_FILEOP_UNLINK	vampirtrace/open-trace-format/OTF_Definitions.h	212;"	d
OTF_FILEOP_UNLOCK	vampirtrace/open-trace-format/OTF_Definitions.h	217;"	d
OTF_FILEOP_WRITE	vampirtrace/open-trace-format/OTF_Definitions.h	210;"	d
OTF_FILESTATUS_ACTIVE	vampirtrace/open-trace-format/OTF_File.h	/^	OTF_FILESTATUS_ACTIVE= 1,$/;"	e	enum:enum_OTF_FileStatus
OTF_FILESTATUS_CLOSED	vampirtrace/open-trace-format/OTF_File.h	/^	OTF_FILESTATUS_CLOSED= 3$/;"	e	enum:enum_OTF_FileStatus
OTF_FILESTATUS_SUSPENDED	vampirtrace/open-trace-format/OTF_File.h	/^	OTF_FILESTATUS_SUSPENDED= 2,$/;"	e	enum:enum_OTF_FileStatus
OTF_FILESTATUS_UNKNOWN	vampirtrace/open-trace-format/OTF_File.h	/^	OTF_FILESTATUS_UNKNOWN= 0,$/;"	e	enum:enum_OTF_FileStatus
OTF_FILETYPE_BITS	vampirtrace/open-trace-format/OTF_Filenames.h	42;"	d
OTF_FILETYPE_DEF	vampirtrace/open-trace-format/OTF_Filenames.h	35;"	d
OTF_FILETYPE_EVENT	vampirtrace/open-trace-format/OTF_Filenames.h	36;"	d
OTF_FILETYPE_GLOBAL_DEF	vampirtrace/open-trace-format/OTF_Filenames.h	34;"	d
OTF_FILETYPE_IOFSL_ALL	vampirtrace/open-trace-format/OTF_Filenames.h	40;"	d
OTF_FILETYPE_IOFSL_IDX	vampirtrace/open-trace-format/OTF_Filenames.h	41;"	d
OTF_FILETYPE_MARKER	vampirtrace/open-trace-format/OTF_Filenames.h	39;"	d
OTF_FILETYPE_MASTER	vampirtrace/open-trace-format/OTF_Filenames.h	33;"	d
OTF_FILETYPE_SNAPS	vampirtrace/open-trace-format/OTF_Filenames.h	37;"	d
OTF_FILETYPE_STATS	vampirtrace/open-trace-format/OTF_Filenames.h	38;"	d
OTF_FILE_H	vampirtrace/open-trace-format/OTF_File.h	16;"	d
OTF_FILE_IOFSL_H	vampirtrace/open-trace-format/OTF_File_iofsl.h	16;"	d
OTF_FILE_Z	vampirtrace/open-trace-format/OTF_File.h	31;"	d
OTF_FLOAT	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_FLOAT = 9, 		\/**< *\/$/;"	e	enum:OTF_Type_enum
OTF_FUNCTIONGROUPSUMMARY_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	84;"	d
OTF_FUNCTIONSUMMARY_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	83;"	d
OTF_File	vampirtrace/open-trace-format/OTF_FileManager.h	/^typedef struct struct_OTF_File OTF_File;$/;"	t	typeref:struct:struct_OTF_File
OTF_File.h	vampirtrace/open-trace-format/OTF_File.h	1;"	F
OTF_FileCompression	vampirtrace/open-trace-format/OTF_Filenames.h	/^typedef uint32_t OTF_FileCompression;$/;"	t
OTF_FileManager	vampirtrace/open-trace-format/OTF_FileManager.h	/^typedef struct struct_OTF_FileManager OTF_FileManager;$/;"	t	typeref:struct:struct_OTF_FileManager
OTF_FileManager.h	vampirtrace/open-trace-format/OTF_FileManager.h	1;"	F
OTF_FileManager_close	vampirtrace/open-trace-format/OTF_FileManager.h	/^void OTF_FileManager_close( OTF_FileManager* m );$/;"	p	signature:( OTF_FileManager* m )
OTF_FileManager_getCount	vampirtrace/open-trace-format/OTF_FileManager.h	/^uint32_t OTF_FileManager_getCount( OTF_FileManager* m );$/;"	p	signature:( OTF_FileManager* m )
OTF_FileManager_getIofsl	vampirtrace/open-trace-format/OTF_FileManager.h	/^int OTF_FileManager_getIofsl( OTF_FileManager *m, uint32_t *server_num, char ***server_list, OTF_IofslMode *mode, uint32_t *flags, uint32_t *index_buffer_length, uint32_t *streamid_bits );$/;"	p	signature:( OTF_FileManager *m, uint32_t *server_num, char ***server_list, OTF_IofslMode *mode, uint32_t *flags, uint32_t *index_buffer_length, uint32_t *streamid_bits )
OTF_FileManager_getNumber	vampirtrace/open-trace-format/OTF_FileManager.h	/^uint32_t OTF_FileManager_getNumber( OTF_FileManager* m );$/;"	p	signature:( OTF_FileManager* m )
OTF_FileManager_guaranteeFile	vampirtrace/open-trace-format/OTF_FileManager.h	/^int OTF_FileManager_guaranteeFile( OTF_FileManager* m );$/;"	p	signature:( OTF_FileManager* m )
OTF_FileManager_isIofsl	vampirtrace/open-trace-format/OTF_FileManager.h	/^int OTF_FileManager_isIofsl( OTF_FileManager *m );$/;"	p	signature:( OTF_FileManager *m )
OTF_FileManager_open	vampirtrace/open-trace-format/OTF_FileManager.h	/^OTF_FileManager* OTF_FileManager_open( uint32_t number );$/;"	p	signature:( uint32_t number )
OTF_FileManager_registerFile	vampirtrace/open-trace-format/OTF_FileManager.h	/^int OTF_FileManager_registerFile( OTF_FileManager* m, OTF_File* file );$/;"	p	signature:( OTF_FileManager* m, OTF_File* file )
OTF_FileManager_setIofsl	vampirtrace/open-trace-format/OTF_FileManager.h	/^int OTF_FileManager_setIofsl( OTF_FileManager *m, uint32_t server_num, char **server_list, OTF_IofslMode mode, uint32_t flags, uint32_t index_buffer_length, uint32_t streamid_bits );$/;"	p	signature:( OTF_FileManager *m, uint32_t server_num, char **server_list, OTF_IofslMode mode, uint32_t flags, uint32_t index_buffer_length, uint32_t streamid_bits )
OTF_FileManager_setNumber	vampirtrace/open-trace-format/OTF_FileManager.h	/^uint32_t OTF_FileManager_setNumber( OTF_FileManager* m, uint32_t number );$/;"	p	signature:( OTF_FileManager* m, uint32_t number )
OTF_FileManager_suspendFile	vampirtrace/open-trace-format/OTF_FileManager.h	/^int OTF_FileManager_suspendFile( OTF_FileManager* m, OTF_File* file );$/;"	p	signature:( OTF_FileManager* m, OTF_File* file )
OTF_FileManager_touchFile	vampirtrace/open-trace-format/OTF_FileManager.h	/^int OTF_FileManager_touchFile( OTF_FileManager* m, OTF_File* file );$/;"	p	signature:( OTF_FileManager* m, OTF_File* file )
OTF_FileMode	vampirtrace/open-trace-format/OTF_File.h	/^typedef enum enum_OTF_FileMode OTF_FileMode;$/;"	t	typeref:enum:enum_OTF_FileMode
OTF_FileStatus	vampirtrace/open-trace-format/OTF_File.h	/^typedef enum enum_OTF_FileStatus OTF_FileStatus;$/;"	t	typeref:enum:enum_OTF_FileStatus
OTF_FileType	vampirtrace/open-trace-format/OTF_Filenames.h	/^typedef uint32_t OTF_FileType;$/;"	t
OTF_File_access	vampirtrace/open-trace-format/OTF_File.h	/^int OTF_File_access(const char* filename, int mode);$/;"	p	signature:(const char* filename, int mode)
OTF_File_clean	vampirtrace/open-trace-format/OTF_File.h	/^int OTF_File_clean(const char* filename);$/;"	p	signature:(const char* filename)
OTF_File_close	vampirtrace/open-trace-format/OTF_File.h	/^int OTF_File_close( OTF_File* file );$/;"	p	signature:( OTF_File* file )
OTF_File_finalize	vampirtrace/open-trace-format/OTF_File.h	/^void OTF_File_finalize( OTF_File* o );$/;"	p	signature:( OTF_File* o )
OTF_File_init	vampirtrace/open-trace-format/OTF_File.h	/^void OTF_File_init( OTF_File* o );$/;"	p	signature:( OTF_File* o )
OTF_File_iofsl	vampirtrace/open-trace-format/OTF_FileManager.h	/^typedef struct struct_OTF_File_iofsl OTF_File_iofsl;$/;"	t	typeref:struct:struct_OTF_File_iofsl
OTF_File_iofsl.h	vampirtrace/open-trace-format/OTF_File_iofsl.h	1;"	F
OTF_File_iofsl_access	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^int OTF_File_iofsl_access(const char* filename, int mode);$/;"	p	signature:(const char* filename, int mode)
OTF_File_iofsl_clean	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^int OTF_File_iofsl_clean(const char* filename);$/;"	p	signature:(const char* filename)
OTF_File_iofsl_close	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^int OTF_File_iofsl_close( OTF_File* file );$/;"	p	signature:( OTF_File* file )
OTF_File_iofsl_finalize	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^void OTF_File_iofsl_finalize( OTF_File* o );$/;"	p	signature:( OTF_File* o )
OTF_File_iofsl_finalizeGlobal	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^void OTF_File_iofsl_finalizeGlobal( void );$/;"	p	signature:( void )
OTF_File_iofsl_init	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^int OTF_File_iofsl_init( OTF_File* o );$/;"	p	signature:( OTF_File* o )
OTF_File_iofsl_open_with_external_buffer	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^OTF_File* OTF_File_iofsl_open_with_external_buffer( uint32_t len, const char* buffer, uint8_t is_compressed,$/;"	p	signature:( uint32_t len, const char* buffer, uint8_t is_compressed, OTF_FileMode mode )
OTF_File_iofsl_open_zlevel	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^OTF_File* OTF_File_iofsl_open_zlevel( const char* filename, OTF_FileManager* manager,$/;"	p	signature:( const char* filename, OTF_FileManager* manager, OTF_FileMode mode, OTF_FileCompression compression )
OTF_File_iofsl_read_internal	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^size_t OTF_File_iofsl_read_internal( OTF_File* file, void* dest, size_t length );$/;"	p	signature:( OTF_File* file, void* dest, size_t length )
OTF_File_iofsl_remove	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^int OTF_File_iofsl_remove(const char* filename);$/;"	p	signature:(const char* filename)
OTF_File_iofsl_rename	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^int OTF_File_iofsl_rename(const char* from, const char* to);$/;"	p	signature:(const char* from, const char* to)
OTF_File_iofsl_revive	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^int OTF_File_iofsl_revive( OTF_File* file, OTF_FileMode mode );$/;"	p	signature:( OTF_File* file, OTF_FileMode mode )
OTF_File_iofsl_seek	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^int OTF_File_iofsl_seek( OTF_File* file, uint64_t pos );$/;"	p	signature:( OTF_File* file, uint64_t pos )
OTF_File_iofsl_setZBufferSize	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^void OTF_File_iofsl_setZBufferSize( OTF_File* file, uint32_t size );$/;"	p	signature:( OTF_File* file, uint32_t size )
OTF_File_iofsl_size	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^uint64_t OTF_File_iofsl_size( OTF_File* file );$/;"	p	signature:( OTF_File* file )
OTF_File_iofsl_status	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^OTF_FileStatus OTF_File_iofsl_status( OTF_File* file );$/;"	p	signature:( OTF_File* file )
OTF_File_iofsl_suspend	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^void OTF_File_iofsl_suspend( OTF_File* file );$/;"	p	signature:( OTF_File* file )
OTF_File_iofsl_tell	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^uint64_t OTF_File_iofsl_tell( OTF_File* file );$/;"	p	signature:( OTF_File* file )
OTF_File_iofsl_write_internal	vampirtrace/open-trace-format/OTF_File_iofsl.h	/^size_t OTF_File_iofsl_write_internal(OTF_File* file, const void* src, size_t length);$/;"	p	signature:(OTF_File* file, const void* src, size_t length)
OTF_File_open	vampirtrace/open-trace-format/OTF_File.h	/^OTF_File* OTF_File_open( const char* filename, OTF_FileManager* manager,$/;"	p	signature:( const char* filename, OTF_FileManager* manager, OTF_FileMode mode )
OTF_File_open_with_external_buffer	vampirtrace/open-trace-format/OTF_File.h	/^OTF_File* OTF_File_open_with_external_buffer( uint32_t len, const char* buffer, uint8_t is_compressed, $/;"	p	signature:( uint32_t len, const char* buffer, uint8_t is_compressed, OTF_FileMode mode )
OTF_File_open_zlevel	vampirtrace/open-trace-format/OTF_File.h	/^OTF_File* OTF_File_open_zlevel( const char* filename, OTF_FileManager* manager,$/;"	p	signature:( const char* filename, OTF_FileManager* manager, OTF_FileMode mode, OTF_FileCompression compression )
OTF_File_read	vampirtrace/open-trace-format/OTF_File.h	/^size_t OTF_File_read( OTF_File* file, void* ptr, size_t size );$/;"	p	signature:( OTF_File* file, void* ptr, size_t size )
OTF_File_read_internal	vampirtrace/open-trace-format/OTF_File.h	/^size_t OTF_File_read_internal( OTF_File* file, void* dest, size_t length );$/;"	p	signature:( OTF_File* file, void* dest, size_t length )
OTF_File_remove	vampirtrace/open-trace-format/OTF_File.h	/^int OTF_File_remove(const char* filename);$/;"	p	signature:(const char* filename)
OTF_File_rename	vampirtrace/open-trace-format/OTF_File.h	/^int OTF_File_rename(const char* from, const char* to);$/;"	p	signature:(const char* from, const char* to)
OTF_File_revive	vampirtrace/open-trace-format/OTF_File.h	/^int OTF_File_revive( OTF_File* file, OTF_FileMode mode );$/;"	p	signature:( OTF_File* file, OTF_FileMode mode )
OTF_File_seek	vampirtrace/open-trace-format/OTF_File.h	/^int OTF_File_seek( OTF_File* file, uint64_t pos );$/;"	p	signature:( OTF_File* file, uint64_t pos )
OTF_File_setZBufferSize	vampirtrace/open-trace-format/OTF_File.h	/^void OTF_File_setZBufferSize( OTF_File* file, uint32_t size );$/;"	p	signature:( OTF_File* file, uint32_t size )
OTF_File_size	vampirtrace/open-trace-format/OTF_File.h	/^uint64_t OTF_File_size( OTF_File* file );$/;"	p	signature:( OTF_File* file )
OTF_File_status	vampirtrace/open-trace-format/OTF_File.h	/^OTF_FileStatus OTF_File_status( OTF_File* file );$/;"	p	signature:( OTF_File* file )
OTF_File_suspend	vampirtrace/open-trace-format/OTF_File.h	/^void OTF_File_suspend( OTF_File* file );$/;"	p	signature:( OTF_File* file )
OTF_File_tell	vampirtrace/open-trace-format/OTF_File.h	/^uint64_t OTF_File_tell( OTF_File* file );$/;"	p	signature:( OTF_File* file )
OTF_File_write	vampirtrace/open-trace-format/OTF_File.h	/^size_t OTF_File_write( OTF_File* file, const void* ptr, size_t size );$/;"	p	signature:( OTF_File* file, const void* ptr, size_t size )
OTF_File_write_internal	vampirtrace/open-trace-format/OTF_File.h	/^size_t OTF_File_write_internal(OTF_File* file, const void* src, size_t length);$/;"	p	signature:(OTF_File* file, const void* src, size_t length)
OTF_Filenames.h	vampirtrace/open-trace-format/OTF_Filenames.h	1;"	F
OTF_Float2Counter	vampirtrace/open-trace-format/OTF_inttypes.h	/^uint64_t OTF_Float2Counter( float value );$/;"	p	signature:( float value )
OTF_FloatToInt32	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint32_t OTF_FloatToInt32(float value);$/;"	p	signature:(float value)
OTF_FunctionPointer	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_FunctionPointer) ( void *userData );$/;"	t
OTF_H	vampirtrace/open-trace-format/otf.h	77;"	d
OTF_HANDLERARRAY_H	vampirtrace/open-trace-format/OTF_HandlerArray.h	36;"	d
OTF_HAVE_INTTYPES_H	vampirtrace/open-trace-format/OTF_inttypes_unix.h	19;"	d
OTF_HAVE_STDINT_H	vampirtrace/open-trace-format/OTF_inttypes_unix.h	18;"	d
OTF_HAVE_STDINT_H	vampirtrace/open-trace-format/OTF_inttypes_unix.h	23;"	d
OTF_HAVE_STDINT_H	vampirtrace/open-trace-format/OTF_inttypes_unix.h	24;"	d
OTF_HandlerArray	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef struct struct_OTF_HandlerArray OTF_HandlerArray;$/;"	t	typeref:struct:struct_OTF_HandlerArray
OTF_HandlerArray.h	vampirtrace/open-trace-format/OTF_HandlerArray.h	1;"	F
OTF_HandlerArray_close	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^int OTF_HandlerArray_close( OTF_HandlerArray* handlers );$/;"	p	signature:( OTF_HandlerArray* handlers )
OTF_HandlerArray_getCopyHandler	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^int OTF_HandlerArray_getCopyHandler( OTF_HandlerArray* handlers,$/;"	p	signature:( OTF_HandlerArray* handlers, OTF_Writer* writer )
OTF_HandlerArray_getCopyHandler_stream	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^int OTF_HandlerArray_getCopyHandler_stream( OTF_HandlerArray* handlers,$/;"	p	signature:( OTF_HandlerArray* handlers, OTF_WStream* writer )
OTF_HandlerArray_open	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^OTF_HandlerArray* OTF_HandlerArray_open( void );$/;"	p	signature:( void )
OTF_HandlerArray_setFirstHandlerArg	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^int OTF_HandlerArray_setFirstHandlerArg( OTF_HandlerArray* handlers,$/;"	p	signature:( OTF_HandlerArray* handlers, void* firsthandlerarg, uint32_t recordtype )
OTF_HandlerArray_setHandler	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^int OTF_HandlerArray_setHandler( OTF_HandlerArray* handlers,$/;"	p	signature:( OTF_HandlerArray* handlers, OTF_FunctionPointer* pointer, uint32_t recordtype )
OTF_Handler_BeginCollectiveOperation	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_BeginCollectiveOperation) ( void* userData,$/;"	t
OTF_Handler_BeginCollopSnapshot	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_BeginCollopSnapshot) ( void* userData,$/;"	t
OTF_Handler_BeginFileOpSnapshot	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_BeginFileOpSnapshot) ( void* userData,$/;"	t
OTF_Handler_BeginFileOperation	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_BeginFileOperation) ( void* userData,$/;"	t
OTF_Handler_BeginProcess	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_BeginProcess) ( void* userData,$/;"	t
OTF_Handler_CollectiveOperation	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_CollectiveOperation) ( void* userData,$/;"	t
OTF_Handler_CollopCountSnapshot	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_CollopCountSnapshot) ( void* userData,$/;"	t
OTF_Handler_CollopSummary	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_CollopSummary) ( void *userData,$/;"	t
OTF_Handler_Counter	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_Counter) ( void* userData,$/;"	t
OTF_Handler_CounterSnapshot	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_CounterSnapshot) ( void* userData,$/;"	t
OTF_Handler_DefAttributeList	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefAttributeList) ( void* userData,$/;"	t
OTF_Handler_DefAuxSamplePoint	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefAuxSamplePoint) ( void* userData,$/;"	t
OTF_Handler_DefCollectiveOperation	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefCollectiveOperation) ( void* userData,$/;"	t
OTF_Handler_DefCounter	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefCounter) ( void* userData,$/;"	t
OTF_Handler_DefCounterAssignments	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefCounterAssignments) ( void* userData,$/;"	t
OTF_Handler_DefCounterGroup	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefCounterGroup) ( void* userData,$/;"	t
OTF_Handler_DefCreator	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefCreator) ( void* userData,$/;"	t
OTF_Handler_DefFile	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefFile) ( void* userData,$/;"	t
OTF_Handler_DefFileGroup	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefFileGroup) ( void* userData,$/;"	t
OTF_Handler_DefFunction	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefFunction) ( void* userData,$/;"	t
OTF_Handler_DefFunctionGroup	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefFunctionGroup) ( void* userData,$/;"	t
OTF_Handler_DefKeyValue	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefKeyValue) (  void* userData,$/;"	t
OTF_Handler_DefMarker	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefMarker) ( void *userData,$/;"	t
OTF_Handler_DefProcess	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefProcess) ( void* userData,$/;"	t
OTF_Handler_DefProcessGroup	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefProcessGroup) ( void* userData,$/;"	t
OTF_Handler_DefProcessOrGroupAttributes	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefProcessOrGroupAttributes) ( void* userData,$/;"	t
OTF_Handler_DefProcessSubstitutes	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefProcessSubstitutes) ( void* userData,$/;"	t
OTF_Handler_DefScl	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefScl) ( void* userData,$/;"	t
OTF_Handler_DefSclFile	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefSclFile) ( void* userData,$/;"	t
OTF_Handler_DefTimeRange	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefTimeRange) ( void* userData,$/;"	t
OTF_Handler_DefTimerResolution	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefTimerResolution) ( void* userData,$/;"	t
OTF_Handler_DefUniqueId	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefUniqueId) ( void* userData,$/;"	t
OTF_Handler_DefVersion	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefVersion) ( void* userData,$/;"	t
OTF_Handler_DefinitionComment	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_DefinitionComment) ( void* userData,$/;"	t
OTF_Handler_EndCollectiveOperation	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_EndCollectiveOperation) ( void* userData,$/;"	t
OTF_Handler_EndFileOperation	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_EndFileOperation) ( void* userData,$/;"	t
OTF_Handler_EndProcess	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_EndProcess) ( void* userData,$/;"	t
OTF_Handler_Enter	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_Enter) ( void* userData,$/;"	t
OTF_Handler_EnterSnapshot	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_EnterSnapshot) ( void *userData,$/;"	t
OTF_Handler_EventComment	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_EventComment) ( void* userData,$/;"	t
OTF_Handler_FileGroupOperationSummary	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_FileGroupOperationSummary) ( void* userData,$/;"	t
OTF_Handler_FileOperation	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_FileOperation) ( void* userData,$/;"	t
OTF_Handler_FileOperationSummary	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_FileOperationSummary) ( void* userData,$/;"	t
OTF_Handler_FunctionGroupSummary	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_FunctionGroupSummary) ( void* userData,$/;"	t
OTF_Handler_FunctionSummary	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_FunctionSummary) ( void* userData,$/;"	t
OTF_Handler_Leave	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_Leave) ( void* userData,$/;"	t
OTF_Handler_Marker	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_Marker) ( void *userData,$/;"	t
OTF_Handler_MessageSummary	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_MessageSummary) ( void* userData,$/;"	t
OTF_Handler_NoOp	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_NoOp) ( void* userData,$/;"	t
OTF_Handler_OpenFileSnapshot	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_OpenFileSnapshot) ( void* userData,$/;"	t
OTF_Handler_RMAEnd	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_RMAEnd) ( void* userData,$/;"	t
OTF_Handler_RMAGet	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_RMAGet) ( void* userData,$/;"	t
OTF_Handler_RMAPut	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_RMAPut) ( void* userData,$/;"	t
OTF_Handler_RMAPutRemoteEnd	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_RMAPutRemoteEnd) ( void* userData,$/;"	t
OTF_Handler_RecvMsg	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_RecvMsg) ( void* userData,$/;"	t
OTF_Handler_SendMsg	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_SendMsg) ( void* userData,$/;"	t
OTF_Handler_SendSnapshot	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_SendSnapshot) ( void *userData,$/;"	t
OTF_Handler_SnapshotComment	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_SnapshotComment) ( void* userData,$/;"	t
OTF_Handler_SummaryComment	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_SummaryComment) ( void* userData,$/;"	t
OTF_Handler_UnknownRecord	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^typedef int (OTF_Handler_UnknownRecord) ( void *userData,$/;"	t
OTF_INT16	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_INT16 = 3, 		\/**< *\/$/;"	e	enum:OTF_Type_enum
OTF_INT32	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_INT32 = 5, 		\/**< *\/$/;"	e	enum:OTF_Type_enum
OTF_INT64	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_INT64 = 7, 		\/**< *\/$/;"	e	enum:OTF_Type_enum
OTF_INT8	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_INT8 = 1, 		\/**< *\/$/;"	e	enum:OTF_Type_enum
OTF_INTTYPES_H	vampirtrace/open-trace-format/OTF_inttypes.h	16;"	d
OTF_INTTYPES_UNIX_H	vampirtrace/open-trace-format/OTF_inttypes_unix.h	16;"	d
OTF_IOFLAGS_BITS	vampirtrace/open-trace-format/OTF_Definitions.h	219;"	d
OTF_IOFLAG_ASYNC	vampirtrace/open-trace-format/OTF_Definitions.h	221;"	d
OTF_IOFLAG_COLL	vampirtrace/open-trace-format/OTF_Definitions.h	222;"	d
OTF_IOFLAG_DIRECT	vampirtrace/open-trace-format/OTF_Definitions.h	223;"	d
OTF_IOFLAG_IOFAILED	vampirtrace/open-trace-format/OTF_Definitions.h	220;"	d
OTF_IOFLAG_ISREADLOCK	vampirtrace/open-trace-format/OTF_Definitions.h	225;"	d
OTF_IOFLAG_SYNC	vampirtrace/open-trace-format/OTF_Definitions.h	224;"	d
OTF_IOFSL_DISABLED	vampirtrace/open-trace-format/OTF_Definitions.h	/^	OTF_IOFSL_DISABLED        = 0,$/;"	e	enum:enum_OTF_IofslMode
OTF_IOFSL_FLAG_NONBLOCKING	vampirtrace/open-trace-format/OTF_Definitions.h	301;"	d
OTF_IOFSL_INDEX_BUFFER_DEFAULTLENGTH	vampirtrace/open-trace-format/OTF_Definitions.h	299;"	d
OTF_IOFSL_MULTIFILE	vampirtrace/open-trace-format/OTF_Definitions.h	/^	OTF_IOFSL_MULTIFILE       = 2$/;"	e	enum:enum_OTF_IofslMode
OTF_IOFSL_MULTIFILE_SPLIT	vampirtrace/open-trace-format/OTF_Definitions.h	/^	OTF_IOFSL_MULTIFILE_SPLIT = 1,$/;"	e	enum:enum_OTF_IofslMode
OTF_Int32ToFloat	vampirtrace/open-trace-format/OTF_KeyValue.h	/^float OTF_Int32ToFloat(uint32_t value);$/;"	p	signature:(uint32_t value)
OTF_Int64ToDouble	vampirtrace/open-trace-format/OTF_KeyValue.h	/^double OTF_Int64ToDouble(uint64_t value);$/;"	p	signature:(uint64_t value)
OTF_IofslMode	vampirtrace/open-trace-format/OTF_Definitions.h	/^typedef enum enum_OTF_IofslMode OTF_IofslMode;$/;"	t	typeref:enum:enum_OTF_IofslMode
OTF_KEYVALUE_H	vampirtrace/open-trace-format/OTF_KeyValue.h	167;"	d
OTF_KEYVALUE_MAX_ARRAY_LEN	vampirtrace/open-trace-format/OTF_Definitions.h	249;"	d
OTF_KeyValue.h	vampirtrace/open-trace-format/OTF_KeyValue.h	1;"	F
OTF_KeyValueList	vampirtrace/open-trace-format/OTF_KeyValue.h	/^typedef struct OTF_KeyValueList_struct OTF_KeyValueList;$/;"	t	typeref:struct:OTF_KeyValueList_struct
OTF_KeyValueList_appendByteArray	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_appendByteArray(OTF_KeyValueList* list, uint32_t key, uint8_t *value, uint32_t len);$/;"	p	signature:(OTF_KeyValueList* list, uint32_t key, uint8_t *value, uint32_t len)
OTF_KeyValueList_appendChar	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_appendChar(OTF_KeyValueList* list, uint32_t key, char value);$/;"	p	signature:(OTF_KeyValueList* list, uint32_t key, char value)
OTF_KeyValueList_appendDouble	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_appendDouble(OTF_KeyValueList* list, uint32_t key, double value);$/;"	p	signature:(OTF_KeyValueList* list, uint32_t key, double value)
OTF_KeyValueList_appendFloat	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_appendFloat(OTF_KeyValueList* list, uint32_t key, float value);$/;"	p	signature:(OTF_KeyValueList* list, uint32_t key, float value)
OTF_KeyValueList_appendInt16	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_appendInt16(OTF_KeyValueList* list, uint32_t key, int16_t value);$/;"	p	signature:(OTF_KeyValueList* list, uint32_t key, int16_t value)
OTF_KeyValueList_appendInt32	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_appendInt32(OTF_KeyValueList* list, uint32_t key, int32_t value);$/;"	p	signature:(OTF_KeyValueList* list, uint32_t key, int32_t value)
OTF_KeyValueList_appendInt64	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_appendInt64(OTF_KeyValueList* list, uint32_t key, int64_t value);$/;"	p	signature:(OTF_KeyValueList* list, uint32_t key, int64_t value)
OTF_KeyValueList_appendInt8	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_appendInt8(OTF_KeyValueList* list, uint32_t key, int8_t value);$/;"	p	signature:(OTF_KeyValueList* list, uint32_t key, int8_t value)
OTF_KeyValueList_appendKeyValueList	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_appendKeyValueList(OTF_KeyValueList* dest_list, OTF_KeyValueList *source_list);$/;"	p	signature:(OTF_KeyValueList* dest_list, OTF_KeyValueList *source_list)
OTF_KeyValueList_appendPair	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_appendPair(OTF_KeyValueList* list, OTF_KeyValuePair pair);$/;"	p	signature:(OTF_KeyValueList* list, OTF_KeyValuePair pair)
OTF_KeyValueList_appendUint16	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_appendUint16(OTF_KeyValueList* list, uint32_t key, uint16_t value);$/;"	p	signature:(OTF_KeyValueList* list, uint32_t key, uint16_t value)
OTF_KeyValueList_appendUint32	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_appendUint32(OTF_KeyValueList* list, uint32_t key, uint32_t value);$/;"	p	signature:(OTF_KeyValueList* list, uint32_t key, uint32_t value)
OTF_KeyValueList_appendUint64	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_appendUint64(OTF_KeyValueList* list, uint32_t key, uint64_t value);$/;"	p	signature:(OTF_KeyValueList* list, uint32_t key, uint64_t value)
OTF_KeyValueList_appendUint8	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_appendUint8(OTF_KeyValueList* list, uint32_t key, uint8_t value);$/;"	p	signature:(OTF_KeyValueList* list, uint32_t key, uint8_t value)
OTF_KeyValueList_clone	vampirtrace/open-trace-format/OTF_KeyValue.h	/^OTF_KeyValueList* OTF_KeyValueList_clone(OTF_KeyValueList* list);$/;"	p	signature:(OTF_KeyValueList* list)
OTF_KeyValueList_close	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_close(OTF_KeyValueList* list);$/;"	p	signature:(OTF_KeyValueList* list)
OTF_KeyValueList_getArrayLength	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_getArrayLength(OTF_KeyValueList *list, uint32_t key, uint32_t *len);$/;"	p	signature:(OTF_KeyValueList *list, uint32_t key, uint32_t *len)
OTF_KeyValueList_getByteArray	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_getByteArray(OTF_KeyValueList *list, uint32_t key, uint8_t *value, uint32_t *len);$/;"	p	signature:(OTF_KeyValueList *list, uint32_t key, uint8_t *value, uint32_t *len)
OTF_KeyValueList_getChar	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_getChar(OTF_KeyValueList *list, uint32_t key, char *value);$/;"	p	signature:(OTF_KeyValueList *list, uint32_t key, char *value)
OTF_KeyValueList_getCount	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint32_t OTF_KeyValueList_getCount(OTF_KeyValueList *list);$/;"	p	signature:(OTF_KeyValueList *list)
OTF_KeyValueList_getDouble	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_getDouble(OTF_KeyValueList *list, uint32_t key, double *value);$/;"	p	signature:(OTF_KeyValueList *list, uint32_t key, double *value)
OTF_KeyValueList_getFloat	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_getFloat(OTF_KeyValueList *list, uint32_t key, float *value);$/;"	p	signature:(OTF_KeyValueList *list, uint32_t key, float *value)
OTF_KeyValueList_getInt16	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_getInt16(OTF_KeyValueList *list, uint32_t key, int16_t *value);$/;"	p	signature:(OTF_KeyValueList *list, uint32_t key, int16_t *value)
OTF_KeyValueList_getInt32	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_getInt32(OTF_KeyValueList *list, uint32_t key, int32_t *value);$/;"	p	signature:(OTF_KeyValueList *list, uint32_t key, int32_t *value)
OTF_KeyValueList_getInt64	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_getInt64(OTF_KeyValueList *list, uint32_t key, int64_t *value);$/;"	p	signature:(OTF_KeyValueList *list, uint32_t key, int64_t *value)
OTF_KeyValueList_getInt8	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_getInt8(OTF_KeyValueList *list, uint32_t key, int8_t *value);$/;"	p	signature:(OTF_KeyValueList *list, uint32_t key, int8_t *value)
OTF_KeyValueList_getKeyByIndex	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_getKeyByIndex(OTF_KeyValueList *list, uint32_t index, uint32_t *key);$/;"	p	signature:(OTF_KeyValueList *list, uint32_t index, uint32_t *key)
OTF_KeyValueList_getPairByIndex	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_getPairByIndex(OTF_KeyValueList *list, uint32_t index, OTF_KeyValuePair **pair);$/;"	p	signature:(OTF_KeyValueList *list, uint32_t index, OTF_KeyValuePair **pair)
OTF_KeyValueList_getTypeForKey	vampirtrace/open-trace-format/OTF_KeyValue.h	/^OTF_Type OTF_KeyValueList_getTypeForKey(OTF_KeyValueList *list, uint32_t key);$/;"	p	signature:(OTF_KeyValueList *list, uint32_t key)
OTF_KeyValueList_getUint16	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_getUint16(OTF_KeyValueList *list, uint32_t key, uint16_t *value);$/;"	p	signature:(OTF_KeyValueList *list, uint32_t key, uint16_t *value)
OTF_KeyValueList_getUint32	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_getUint32(OTF_KeyValueList *list, uint32_t key, uint32_t *value);$/;"	p	signature:(OTF_KeyValueList *list, uint32_t key, uint32_t *value)
OTF_KeyValueList_getUint64	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_getUint64(OTF_KeyValueList *list, uint32_t key, uint64_t *value);$/;"	p	signature:(OTF_KeyValueList *list, uint32_t key, uint64_t *value)
OTF_KeyValueList_getUint8	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_getUint8(OTF_KeyValueList *list, uint32_t key, uint8_t *value);$/;"	p	signature:(OTF_KeyValueList *list, uint32_t key, uint8_t *value)
OTF_KeyValueList_hasKey	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_hasKey(OTF_KeyValueList *list, uint32_t key);$/;"	p	signature:(OTF_KeyValueList *list, uint32_t key)
OTF_KeyValueList_new	vampirtrace/open-trace-format/OTF_KeyValue.h	/^OTF_KeyValueList *OTF_KeyValueList_new(void);$/;"	p	signature:(void)
OTF_KeyValueList_realloc	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_realloc(OTF_KeyValueList* list, uint32_t num);$/;"	p	signature:(OTF_KeyValueList* list, uint32_t num)
OTF_KeyValueList_removeKey	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_removeKey(OTF_KeyValueList *list, uint32_t key);$/;"	p	signature:(OTF_KeyValueList *list, uint32_t key)
OTF_KeyValueList_reset	vampirtrace/open-trace-format/OTF_KeyValue.h	/^uint8_t OTF_KeyValueList_reset(OTF_KeyValueList* list);$/;"	p	signature:(OTF_KeyValueList* list)
OTF_KeyValueList_struct	vampirtrace/open-trace-format/OTF_KeyValue.h	/^struct OTF_KeyValueList_struct {$/;"	s
OTF_KeyValueList_struct::count	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint32_t count;                 \/* total number of entries in list (treat byte arrays particular) --> internal use only *\/$/;"	m	struct:OTF_KeyValueList_struct	access:public
OTF_KeyValueList_struct::key_count	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint32_t key_count;             \/* number of different keys in list --> user-relevant *\/$/;"	m	struct:OTF_KeyValueList_struct	access:public
OTF_KeyValueList_struct::kvBegin	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_KeyValuePairList *kvBegin;   \/* first element of the list *\/$/;"	m	struct:OTF_KeyValueList_struct	access:public
OTF_KeyValueList_struct::kvCurrent	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_KeyValuePairList *kvCurrent; \/* first unused element in the list, insert new ones here *\/$/;"	m	struct:OTF_KeyValueList_struct	access:public
OTF_KeyValueList_struct::kvEnd	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_KeyValuePairList *kvEnd;     \/* last allocated element of the list, may be used or not *\/$/;"	m	struct:OTF_KeyValueList_struct	access:public
OTF_KeyValueList_struct::size	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint32_t size;                  \/* number of allocated entries --> internal *\/$/;"	m	struct:OTF_KeyValueList_struct	access:public
OTF_KeyValuePair	vampirtrace/open-trace-format/OTF_KeyValue.h	/^typedef struct OTF_KeyValuePair_struct OTF_KeyValuePair;$/;"	t	typeref:struct:OTF_KeyValuePair_struct
OTF_KeyValuePairList	vampirtrace/open-trace-format/OTF_KeyValue.h	/^} OTF_KeyValuePairList;$/;"	t	typeref:struct:OTF_KeyValuePairList_struct
OTF_KeyValuePairList_struct	vampirtrace/open-trace-format/OTF_KeyValue.h	/^typedef struct OTF_KeyValuePairList_struct {$/;"	s
OTF_KeyValuePairList_struct::kvNext	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	struct OTF_KeyValuePairList_struct *kvNext;$/;"	m	struct:OTF_KeyValuePairList_struct	typeref:struct:OTF_KeyValuePairList_struct::OTF_KeyValuePairList_struct	access:public
OTF_KeyValuePairList_struct::kvPair	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	struct OTF_KeyValuePair_struct kvPair;$/;"	m	struct:OTF_KeyValuePairList_struct	typeref:struct:OTF_KeyValuePairList_struct::OTF_KeyValuePair_struct	access:public
OTF_KeyValuePairList_struct::kvPrev	vampirtrace/open-trace-format/OTF_KeyValue.h	/^    struct OTF_KeyValuePairList_struct *kvPrev;$/;"	m	struct:OTF_KeyValuePairList_struct	typeref:struct:OTF_KeyValuePairList_struct::OTF_KeyValuePairList_struct	access:public
OTF_KeyValuePair_struct	vampirtrace/open-trace-format/OTF_KeyValue.h	/^struct OTF_KeyValuePair_struct {$/;"	s
OTF_KeyValuePair_struct::key	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint32_t key;$/;"	m	struct:OTF_KeyValuePair_struct	access:public
OTF_KeyValuePair_struct::type	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_Type type;$/;"	m	struct:OTF_KeyValuePair_struct	access:public
OTF_KeyValuePair_struct::value	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_Value value;$/;"	m	struct:OTF_KeyValuePair_struct	access:public
OTF_LEAVE_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	39;"	d
OTF_MARKER_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	107;"	d
OTF_MARKER_TYPE_ERROR	vampirtrace/open-trace-format/OTF_Definitions.h	231;"	d
OTF_MARKER_TYPE_HINT	vampirtrace/open-trace-format/OTF_Definitions.h	233;"	d
OTF_MARKER_TYPE_UNKNOWN	vampirtrace/open-trace-format/OTF_Definitions.h	230;"	d
OTF_MARKER_TYPE_WARNING	vampirtrace/open-trace-format/OTF_Definitions.h	232;"	d
OTF_MASTERCONTROL_H	vampirtrace/open-trace-format/OTF_MasterControl.h	112;"	d
OTF_MESSAGESUMMARY_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	85;"	d
OTF_MapEntry	vampirtrace/open-trace-format/OTF_MasterControl.h	/^typedef struct struct_OTF_MapEntry OTF_MapEntry;$/;"	t	typeref:struct:struct_OTF_MapEntry
OTF_MasterControl	vampirtrace/open-trace-format/OTF_MasterControl.h	/^typedef struct struct_OTF_MasterControl OTF_MasterControl;$/;"	t	typeref:struct:struct_OTF_MasterControl
OTF_MasterControl.h	vampirtrace/open-trace-format/OTF_MasterControl.h	1;"	F
OTF_MasterControl_append	vampirtrace/open-trace-format/OTF_MasterControl.h	/^int OTF_MasterControl_append( OTF_MasterControl* mc,$/;"	p	signature:( OTF_MasterControl* mc, uint32_t argument, uint32_t value )
OTF_MasterControl_appendList	vampirtrace/open-trace-format/OTF_MasterControl.h	/^int OTF_MasterControl_appendList( OTF_MasterControl* mc, uint32_t argument,$/;"	p	signature:( OTF_MasterControl* mc, uint32_t argument, uint32_t l, uint32_t* values )
OTF_MasterControl_check	vampirtrace/open-trace-format/OTF_MasterControl.h	/^int OTF_MasterControl_check( OTF_MasterControl* mc );$/;"	p	signature:( OTF_MasterControl* mc )
OTF_MasterControl_clone	vampirtrace/open-trace-format/OTF_MasterControl.h	/^OTF_MasterControl* OTF_MasterControl_clone( OTF_MasterControl* mc,$/;"	p	signature:( OTF_MasterControl* mc, OTF_FileManager* manager )
OTF_MasterControl_close	vampirtrace/open-trace-format/OTF_MasterControl.h	/^void OTF_MasterControl_close( OTF_MasterControl* mc );$/;"	p	signature:( OTF_MasterControl* mc )
OTF_MasterControl_finish	vampirtrace/open-trace-format/OTF_MasterControl.h	/^void OTF_MasterControl_finish( OTF_MasterControl* mc );$/;"	p	signature:( OTF_MasterControl* mc )
OTF_MasterControl_getCount	vampirtrace/open-trace-format/OTF_MasterControl.h	/^uint32_t OTF_MasterControl_getCount( OTF_MasterControl* mc );$/;"	p	signature:( OTF_MasterControl* mc )
OTF_MasterControl_getEntry	vampirtrace/open-trace-format/OTF_MasterControl.h	/^OTF_MapEntry* OTF_MasterControl_getEntry( OTF_MasterControl* mc,$/;"	p	signature:( OTF_MasterControl* mc, uint32_t argument )
OTF_MasterControl_getEntryByIndex	vampirtrace/open-trace-format/OTF_MasterControl.h	/^OTF_MapEntry* OTF_MasterControl_getEntryByIndex( OTF_MasterControl* mc,$/;"	p	signature:( OTF_MasterControl* mc, uint32_t index )
OTF_MasterControl_getNewStreamId	vampirtrace/open-trace-format/OTF_MasterControl.h	/^uint32_t OTF_MasterControl_getNewStreamId( OTF_MasterControl* mc );$/;"	p	signature:( OTF_MasterControl* mc )
OTF_MasterControl_getREntryByIndex	vampirtrace/open-trace-format/OTF_MasterControl.h	/^OTF_Pair* OTF_MasterControl_getREntryByIndex( OTF_MasterControl* mc,$/;"	p	signature:( OTF_MasterControl* mc, uint32_t index )
OTF_MasterControl_getValueCount	vampirtrace/open-trace-format/OTF_MasterControl.h	/^uint32_t OTF_MasterControl_getValueCount( OTF_MasterControl* mc,$/;"	p	signature:( OTF_MasterControl* mc, uint32_t argument )
OTF_MasterControl_getValues	vampirtrace/open-trace-format/OTF_MasterControl.h	/^uint32_t* OTF_MasterControl_getValues( OTF_MasterControl* mc, $/;"	p	signature:( OTF_MasterControl* mc, uint32_t argument )
OTF_MasterControl_getrCount	vampirtrace/open-trace-format/OTF_MasterControl.h	/^uint32_t OTF_MasterControl_getrCount( OTF_MasterControl* mc );$/;"	p	signature:( OTF_MasterControl* mc )
OTF_MasterControl_mapReverse	vampirtrace/open-trace-format/OTF_MasterControl.h	/^uint32_t OTF_MasterControl_mapReverse( OTF_MasterControl* mc, uint32_t value );$/;"	p	signature:( OTF_MasterControl* mc, uint32_t value )
OTF_MasterControl_new	vampirtrace/open-trace-format/OTF_MasterControl.h	/^OTF_MasterControl* OTF_MasterControl_new( OTF_FileManager* manager );$/;"	p	signature:( OTF_FileManager* manager )
OTF_MasterControl_print	vampirtrace/open-trace-format/OTF_MasterControl.h	/^void OTF_MasterControl_print( OTF_MasterControl* mc );$/;"	p	signature:( OTF_MasterControl* mc )
OTF_MasterControl_read	vampirtrace/open-trace-format/OTF_MasterControl.h	/^int OTF_MasterControl_read(OTF_MasterControl* mc, const char* namestub );$/;"	p	signature:(OTF_MasterControl* mc, const char* namestub )
OTF_MasterControl_write	vampirtrace/open-trace-format/OTF_MasterControl.h	/^int OTF_MasterControl_write( OTF_MasterControl* mc, const char* namestub );$/;"	p	signature:( OTF_MasterControl* mc, const char* namestub )
OTF_NOOP_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	33;"	d
OTF_NO_ERROR	vampirtrace/open-trace-format/OTF_Definitions.h	237;"	d
OTF_NRECORDS	vampirtrace/open-trace-format/OTF_Definitions.h	110;"	d
OTF_OPENFILESNAPSHOT_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	97;"	d
OTF_Pair	vampirtrace/open-trace-format/OTF_MasterControl.h	/^typedef struct struct_OTF_Pair OTF_Pair;$/;"	t	typeref:struct:struct_OTF_Pair
OTF_RBUFFER_H	vampirtrace/open-trace-format/OTF_RBuffer.h	16;"	d
OTF_RBuffer	vampirtrace/open-trace-format/OTF_RBuffer.h	/^typedef struct struct_OTF_RBuffer OTF_RBuffer;$/;"	t	typeref:struct:struct_OTF_RBuffer
OTF_RBuffer.h	vampirtrace/open-trace-format/OTF_RBuffer.h	1;"	F
OTF_RBuffer_close	vampirtrace/open-trace-format/OTF_RBuffer.h	/^int OTF_RBuffer_close( OTF_RBuffer* rbuffer );$/;"	p	signature:( OTF_RBuffer* rbuffer )
OTF_RBuffer_getCurrentProcess	vampirtrace/open-trace-format/OTF_RBuffer.h	/^uint32_t OTF_RBuffer_getCurrentProcess( OTF_RBuffer* rbuffer );$/;"	p	signature:( OTF_RBuffer* rbuffer )
OTF_RBuffer_getCurrentTime	vampirtrace/open-trace-format/OTF_RBuffer.h	/^uint64_t OTF_RBuffer_getCurrentTime( OTF_RBuffer* rbuffer );$/;"	p	signature:( OTF_RBuffer* rbuffer )
OTF_RBuffer_getFilePos	vampirtrace/open-trace-format/OTF_RBuffer.h	/^uint64_t OTF_RBuffer_getFilePos( OTF_RBuffer* rbuffer );$/;"	p	signature:( OTF_RBuffer* rbuffer )
OTF_RBuffer_getFileProperties	vampirtrace/open-trace-format/OTF_RBuffer.h	/^int OTF_RBuffer_getFileProperties( OTF_RBuffer* rbuffer );$/;"	p	signature:( OTF_RBuffer* rbuffer )
OTF_RBuffer_getFileSize	vampirtrace/open-trace-format/OTF_RBuffer.h	/^uint64_t OTF_RBuffer_getFileSize( OTF_RBuffer* rbuffer );$/;"	p	signature:( OTF_RBuffer* rbuffer )
OTF_RBuffer_getRecord	vampirtrace/open-trace-format/OTF_RBuffer.h	/^char* OTF_RBuffer_getRecord( OTF_RBuffer* rbuffer );$/;"	p	signature:( OTF_RBuffer* rbuffer )
OTF_RBuffer_guaranteeRecord	vampirtrace/open-trace-format/OTF_RBuffer.h	/^int OTF_RBuffer_guaranteeRecord( OTF_RBuffer* rbuffer );$/;"	p	signature:( OTF_RBuffer* rbuffer )
OTF_RBuffer_jump	vampirtrace/open-trace-format/OTF_RBuffer.h	/^int OTF_RBuffer_jump( OTF_RBuffer* rbuffer, uint64_t filepos );$/;"	p	signature:( OTF_RBuffer* rbuffer, uint64_t filepos )
OTF_RBuffer_open	vampirtrace/open-trace-format/OTF_RBuffer.h	/^OTF_RBuffer* OTF_RBuffer_open( const char* filename, OTF_FileManager* manager );$/;"	p	signature:( const char* filename, OTF_FileManager* manager )
OTF_RBuffer_open_with_external_buffer	vampirtrace/open-trace-format/OTF_RBuffer.h	/^OTF_RBuffer* OTF_RBuffer_open_with_external_buffer( uint32_t len, const char* buffer, uint8_t is_compressed  );$/;"	p	signature:( uint32_t len, const char* buffer, uint8_t is_compressed )
OTF_RBuffer_printRecord	vampirtrace/open-trace-format/OTF_RBuffer.h	/^char *OTF_RBuffer_printRecord( OTF_RBuffer* rbuffer );$/;"	p	signature:( OTF_RBuffer* rbuffer )
OTF_RBuffer_readArray	vampirtrace/open-trace-format/OTF_RBuffer.h	/^uint32_t OTF_RBuffer_readArray( OTF_RBuffer* rbuffer, uint32_t** array, uint32_t* size );$/;"	p	signature:( OTF_RBuffer* rbuffer, uint32_t** array, uint32_t* size )
OTF_RBuffer_readBytes	vampirtrace/open-trace-format/OTF_RBuffer.h	/^uint32_t OTF_RBuffer_readBytes( OTF_RBuffer* rbuffer, uint8_t *array, uint32_t max_len );$/;"	p	signature:( OTF_RBuffer* rbuffer, uint8_t *array, uint32_t max_len )
OTF_RBuffer_readKeyValueList	vampirtrace/open-trace-format/OTF_RBuffer.h	/^uint32_t OTF_RBuffer_readKeyValueList(OTF_RBuffer* buffer );$/;"	p	signature:(OTF_RBuffer* buffer )
OTF_RBuffer_readNewline	vampirtrace/open-trace-format/OTF_RBuffer.h	/^int OTF_RBuffer_readNewline( OTF_RBuffer* rbuffer );$/;"	p	signature:( OTF_RBuffer* rbuffer )
OTF_RBuffer_readString	vampirtrace/open-trace-format/OTF_RBuffer.h	/^const char* OTF_RBuffer_readString( OTF_RBuffer* rbuffer );$/;"	p	signature:( OTF_RBuffer* rbuffer )
OTF_RBuffer_readUint32	vampirtrace/open-trace-format/OTF_RBuffer.h	/^uint32_t OTF_RBuffer_readUint32( OTF_RBuffer* rbuffer );$/;"	p	signature:( OTF_RBuffer* rbuffer )
OTF_RBuffer_readUint64	vampirtrace/open-trace-format/OTF_RBuffer.h	/^uint64_t OTF_RBuffer_readUint64( OTF_RBuffer* rbuffer );$/;"	p	signature:( OTF_RBuffer* rbuffer )
OTF_RBuffer_searchTime	vampirtrace/open-trace-format/OTF_RBuffer.h	/^int OTF_RBuffer_searchTime( OTF_RBuffer* rbuffer, uint64_t time );$/;"	p	signature:( OTF_RBuffer* rbuffer, uint64_t time )
OTF_RBuffer_setCurrentProcess	vampirtrace/open-trace-format/OTF_RBuffer.h	/^void OTF_RBuffer_setCurrentProcess( OTF_RBuffer* rbuffer, uint32_t process );$/;"	p	signature:( OTF_RBuffer* rbuffer, uint32_t process )
OTF_RBuffer_setCurrentTime	vampirtrace/open-trace-format/OTF_RBuffer.h	/^void OTF_RBuffer_setCurrentTime( OTF_RBuffer* rbuffer, uint64_t time );$/;"	p	signature:( OTF_RBuffer* rbuffer, uint64_t time )
OTF_RBuffer_setJumpSize	vampirtrace/open-trace-format/OTF_RBuffer.h	/^int OTF_RBuffer_setJumpSize( OTF_RBuffer* rbuffer, size_t size );$/;"	p	signature:( OTF_RBuffer* rbuffer, size_t size )
OTF_RBuffer_setSize	vampirtrace/open-trace-format/OTF_RBuffer.h	/^int OTF_RBuffer_setSize( OTF_RBuffer* rbuffer, size_t size );$/;"	p	signature:( OTF_RBuffer* rbuffer, size_t size )
OTF_RBuffer_setZBufferSize	vampirtrace/open-trace-format/OTF_RBuffer.h	/^void OTF_RBuffer_setZBufferSize( OTF_RBuffer* rbuffer, uint32_t size );$/;"	p	signature:( OTF_RBuffer* rbuffer, uint32_t size )
OTF_RBuffer_skipKeyword	vampirtrace/open-trace-format/OTF_RBuffer.h	/^void OTF_RBuffer_skipKeyword( OTF_RBuffer* rbuffer );$/;"	p	signature:( OTF_RBuffer* rbuffer )
OTF_RBuffer_skipSpaces	vampirtrace/open-trace-format/OTF_RBuffer.h	/^void OTF_RBuffer_skipSpaces( OTF_RBuffer* rbuffer );$/;"	p	signature:( OTF_RBuffer* rbuffer )
OTF_RBuffer_testChar	vampirtrace/open-trace-format/OTF_RBuffer.h	/^int OTF_RBuffer_testChar( OTF_RBuffer* rbuffer, char c );$/;"	p	signature:( OTF_RBuffer* rbuffer, char c )
OTF_RBuffer_testKeyword	vampirtrace/open-trace-format/OTF_RBuffer.h	/^int OTF_RBuffer_testKeyword( OTF_RBuffer* rbuffer, const char* string );$/;"	p	signature:( OTF_RBuffer* rbuffer, const char* string )
OTF_RBuffer_testPrefix	vampirtrace/open-trace-format/OTF_RBuffer.h	/^int OTF_RBuffer_testPrefix( OTF_RBuffer* rbuffer, const char* string );$/;"	p	signature:( OTF_RBuffer* rbuffer, const char* string )
OTF_READER_H	vampirtrace/open-trace-format/OTF_Reader.h	19;"	d
OTF_READ_ERROR	vampirtrace/open-trace-format/OTF_Definitions.h	286;"	d
OTF_READ_MAXRECORDS	vampirtrace/open-trace-format/OTF_Definitions.h	287;"	d
OTF_RECEIVE_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	37;"	d
OTF_RETURN_ABORT	vampirtrace/open-trace-format/OTF_Definitions.h	284;"	d
OTF_RETURN_BREAK	vampirtrace/open-trace-format/OTF_Definitions.h	282;"	d
OTF_RETURN_OK	vampirtrace/open-trace-format/OTF_Definitions.h	280;"	d
OTF_RMAEND_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	49;"	d
OTF_RMAGET_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	48;"	d
OTF_RMAPUTRE_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	47;"	d
OTF_RMAPUT_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	46;"	d
OTF_RSTREAM_H	vampirtrace/open-trace-format/OTF_RStream.h	112;"	d
OTF_RStream	vampirtrace/open-trace-format/OTF_RStream.h	/^typedef struct struct_OTF_RStream OTF_RStream;$/;"	t	typeref:struct:struct_OTF_RStream
OTF_RStream.h	vampirtrace/open-trace-format/OTF_RStream.h	1;"	F
OTF_RStream_close	vampirtrace/open-trace-format/OTF_RStream.h	/^int OTF_RStream_close( OTF_RStream* rstream );$/;"	p	signature:( OTF_RStream* rstream )
OTF_RStream_closeDefBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^int OTF_RStream_closeDefBuffer( OTF_RStream* rstream );$/;"	p	signature:( OTF_RStream* rstream )
OTF_RStream_closeEventBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^int OTF_RStream_closeEventBuffer( OTF_RStream* rstream );$/;"	p	signature:( OTF_RStream* rstream )
OTF_RStream_closeMarkerBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^int OTF_RStream_closeMarkerBuffer( OTF_RStream* rstream );$/;"	p	signature:( OTF_RStream* rstream )
OTF_RStream_closeSnapsBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^int OTF_RStream_closeSnapsBuffer( OTF_RStream* rstream );$/;"	p	signature:( OTF_RStream* rstream )
OTF_RStream_closeStatsBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^int OTF_RStream_closeStatsBuffer( OTF_RStream* rstream );$/;"	p	signature:( OTF_RStream* rstream )
OTF_RStream_eventBytesProgress	vampirtrace/open-trace-format/OTF_RStream.h	/^uint8_t OTF_RStream_eventBytesProgress( OTF_RStream* rstream, uint64_t* minimum,$/;"	p	signature:( OTF_RStream* rstream, uint64_t* minimum, uint64_t* current, uint64_t* maximum )
OTF_RStream_eventProgress	vampirtrace/open-trace-format/OTF_RStream.h	/^uint8_t OTF_RStream_eventProgress( OTF_RStream* rstream, uint64_t* minimum,$/;"	p	signature:( OTF_RStream* rstream, uint64_t* minimum, uint64_t* current, uint64_t* maximum )
OTF_RStream_eventTimeProgress	vampirtrace/open-trace-format/OTF_RStream.h	/^uint8_t OTF_RStream_eventTimeProgress( OTF_RStream* rstream, uint64_t* minimum,$/;"	p	signature:( OTF_RStream* rstream, uint64_t* minimum, uint64_t* current, uint64_t* maximum )
OTF_RStream_getBufferSizes	vampirtrace/open-trace-format/OTF_RStream.h	/^uint32_t OTF_RStream_getBufferSizes( OTF_RStream* rstream );$/;"	p	signature:( OTF_RStream* rstream )
OTF_RStream_getDefBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^OTF_RBuffer* OTF_RStream_getDefBuffer( OTF_RStream* rstream );$/;"	p	signature:( OTF_RStream* rstream )
OTF_RStream_getEventBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^OTF_RBuffer* OTF_RStream_getEventBuffer( OTF_RStream* rstream );$/;"	p	signature:( OTF_RStream* rstream )
OTF_RStream_getMarkerBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^OTF_RBuffer* OTF_RStream_getMarkerBuffer( OTF_RStream* rstream );$/;"	p	signature:( OTF_RStream* rstream )
OTF_RStream_getRecordLimit	vampirtrace/open-trace-format/OTF_RStream.h	/^uint64_t OTF_RStream_getRecordLimit( OTF_RStream* rstream );$/;"	p	signature:( OTF_RStream* rstream )
OTF_RStream_getSnapsBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^OTF_RBuffer* OTF_RStream_getSnapsBuffer( OTF_RStream* rstream );$/;"	p	signature:( OTF_RStream* rstream )
OTF_RStream_getStatsBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^OTF_RBuffer* OTF_RStream_getStatsBuffer( OTF_RStream* rstream );$/;"	p	signature:( OTF_RStream* rstream )
OTF_RStream_getZBufferSizes	vampirtrace/open-trace-format/OTF_RStream.h	/^uint32_t OTF_RStream_getZBufferSizes( OTF_RStream* rstream );$/;"	p	signature:( OTF_RStream* rstream )
OTF_RStream_open	vampirtrace/open-trace-format/OTF_RStream.h	/^OTF_RStream* OTF_RStream_open( const char* nameStub, uint32_t id, OTF_FileManager* manager );$/;"	p	signature:( const char* nameStub, uint32_t id, OTF_FileManager* manager )
OTF_RStream_readDefinitions	vampirtrace/open-trace-format/OTF_RStream.h	/^uint64_t OTF_RStream_readDefinitions( OTF_RStream* rstream, $/;"	p	signature:( OTF_RStream* rstream, OTF_HandlerArray* handlers )
OTF_RStream_readEvents	vampirtrace/open-trace-format/OTF_RStream.h	/^uint64_t OTF_RStream_readEvents( OTF_RStream* rstream, OTF_HandlerArray* handlers );$/;"	p	signature:( OTF_RStream* rstream, OTF_HandlerArray* handlers )
OTF_RStream_readMarker	vampirtrace/open-trace-format/OTF_RStream.h	/^uint64_t OTF_RStream_readMarker( OTF_RStream* rstream, OTF_HandlerArray* handlers );$/;"	p	signature:( OTF_RStream* rstream, OTF_HandlerArray* handlers )
OTF_RStream_readSnapshots	vampirtrace/open-trace-format/OTF_RStream.h	/^uint64_t OTF_RStream_readSnapshots( OTF_RStream* rstream, OTF_HandlerArray* handlers );$/;"	p	signature:( OTF_RStream* rstream, OTF_HandlerArray* handlers )
OTF_RStream_readStatistics	vampirtrace/open-trace-format/OTF_RStream.h	/^uint64_t OTF_RStream_readStatistics( OTF_RStream* rstream, OTF_HandlerArray* handlers );$/;"	p	signature:( OTF_RStream* rstream, OTF_HandlerArray* handlers )
OTF_RStream_setBufferSizes	vampirtrace/open-trace-format/OTF_RStream.h	/^void OTF_RStream_setBufferSizes( OTF_RStream* rstream, uint32_t size );$/;"	p	signature:( OTF_RStream* rstream, uint32_t size )
OTF_RStream_setDefBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^OTF_RBuffer* OTF_RStream_setDefBuffer( OTF_RStream* rstream, OTF_RBuffer* rbuffer );$/;"	p	signature:( OTF_RStream* rstream, OTF_RBuffer* rbuffer )
OTF_RStream_setRecordLimit	vampirtrace/open-trace-format/OTF_RStream.h	/^void OTF_RStream_setRecordLimit( OTF_RStream* rstream, uint64_t limit );$/;"	p	signature:( OTF_RStream* rstream, uint64_t limit )
OTF_RStream_setZBufferSizes	vampirtrace/open-trace-format/OTF_RStream.h	/^void OTF_RStream_setZBufferSizes( OTF_RStream* rstream, uint32_t size );$/;"	p	signature:( OTF_RStream* rstream, uint32_t size )
OTF_RStream_snapshotBytesProgress	vampirtrace/open-trace-format/OTF_RStream.h	/^uint8_t OTF_RStream_snapshotBytesProgress( OTF_RStream* rstream,$/;"	p	signature:( OTF_RStream* rstream, uint64_t* minimum, uint64_t* current, uint64_t* maximum )
OTF_RStream_snapshotProgress	vampirtrace/open-trace-format/OTF_RStream.h	/^uint8_t OTF_RStream_snapshotProgress( OTF_RStream* rstream,$/;"	p	signature:( OTF_RStream* rstream, uint64_t* minimum, uint64_t* current, uint64_t* maximum )
OTF_RStream_snapshotTimeProgress	vampirtrace/open-trace-format/OTF_RStream.h	/^uint8_t OTF_RStream_snapshotTimeProgress( OTF_RStream* rstream,$/;"	p	signature:( OTF_RStream* rstream, uint64_t* minimum, uint64_t* current, uint64_t* maximum )
OTF_RStream_statisticBytesProgress	vampirtrace/open-trace-format/OTF_RStream.h	/^uint8_t OTF_RStream_statisticBytesProgress( OTF_RStream* rstream,$/;"	p	signature:( OTF_RStream* rstream, uint64_t* minimum, uint64_t* current, uint64_t* maximum )
OTF_RStream_statisticProgress	vampirtrace/open-trace-format/OTF_RStream.h	/^uint8_t OTF_RStream_statisticProgress( OTF_RStream* rstream,$/;"	p	signature:( OTF_RStream* rstream, uint64_t* minimum, uint64_t* current, uint64_t* maximum )
OTF_RStream_statisticTimeProgress	vampirtrace/open-trace-format/OTF_RStream.h	/^uint8_t OTF_RStream_statisticTimeProgress( OTF_RStream* rstream,$/;"	p	signature:( OTF_RStream* rstream, uint64_t* minimum, uint64_t* current, uint64_t* maximum )
OTF_Reader	vampirtrace/open-trace-format/OTF_Reader.h	/^typedef struct struct_OTF_Reader OTF_Reader;$/;"	t	typeref:struct:struct_OTF_Reader
OTF_Reader.h	vampirtrace/open-trace-format/OTF_Reader.h	1;"	F
OTF_Reader_close	vampirtrace/open-trace-format/OTF_Reader.h	/^int OTF_Reader_close( OTF_Reader* reader );$/;"	p	signature:( OTF_Reader* reader )
OTF_Reader_closeAllStreams	vampirtrace/open-trace-format/OTF_Reader.h	/^int OTF_Reader_closeAllStreams( OTF_Reader* reader );$/;"	p	signature:( OTF_Reader* reader )
OTF_Reader_disableProcess	vampirtrace/open-trace-format/OTF_Reader.h	/^int OTF_Reader_disableProcess( OTF_Reader* reader, uint32_t processId );$/;"	p	signature:( OTF_Reader* reader, uint32_t processId )
OTF_Reader_enableProcess	vampirtrace/open-trace-format/OTF_Reader.h	/^int OTF_Reader_enableProcess( OTF_Reader* reader, uint32_t processId );$/;"	p	signature:( OTF_Reader* reader, uint32_t processId )
OTF_Reader_eventBytesProgress	vampirtrace/open-trace-format/OTF_Reader.h	/^uint8_t OTF_Reader_eventBytesProgress( OTF_Reader* reader, uint64_t* minimum,$/;"	p	signature:( OTF_Reader* reader, uint64_t* minimum, uint64_t* current, uint64_t* maximum )
OTF_Reader_eventProgress	vampirtrace/open-trace-format/OTF_Reader.h	/^uint8_t OTF_Reader_eventProgress( OTF_Reader* reader, uint64_t* minimum,$/;"	p	signature:( OTF_Reader* reader, uint64_t* minimum, uint64_t* current, uint64_t* maximum )
OTF_Reader_eventTimeProgress	vampirtrace/open-trace-format/OTF_Reader.h	/^uint8_t OTF_Reader_eventTimeProgress( OTF_Reader* reader, uint64_t* minimum,$/;"	p	signature:( OTF_Reader* reader, uint64_t* minimum, uint64_t* current, uint64_t* maximum )
OTF_Reader_getBufferSizes	vampirtrace/open-trace-format/OTF_Reader.h	/^uint32_t OTF_Reader_getBufferSizes( OTF_Reader* reader );$/;"	p	signature:( OTF_Reader* reader )
OTF_Reader_getMasterControl	vampirtrace/open-trace-format/OTF_Reader.h	/^OTF_MasterControl* OTF_Reader_getMasterControl( OTF_Reader* reader );$/;"	p	signature:( OTF_Reader* reader )
OTF_Reader_getProcessStatus	vampirtrace/open-trace-format/OTF_Reader.h	/^uint8_t OTF_Reader_getProcessStatus( OTF_Reader* reader, uint32_t processId );$/;"	p	signature:( OTF_Reader* reader, uint32_t processId )
OTF_Reader_getRecordLimit	vampirtrace/open-trace-format/OTF_Reader.h	/^uint64_t OTF_Reader_getRecordLimit( OTF_Reader* reader );$/;"	p	signature:( OTF_Reader* reader )
OTF_Reader_getStream	vampirtrace/open-trace-format/OTF_Reader.h	/^OTF_RStream* OTF_Reader_getStream( OTF_Reader* reader, uint32_t id );$/;"	p	signature:( OTF_Reader* reader, uint32_t id )
OTF_Reader_getTimeIntervalMax	vampirtrace/open-trace-format/OTF_Reader.h	/^uint64_t OTF_Reader_getTimeIntervalMax( OTF_Reader* reader );$/;"	p	signature:( OTF_Reader* reader )
OTF_Reader_getTimeIntervalMin	vampirtrace/open-trace-format/OTF_Reader.h	/^uint64_t OTF_Reader_getTimeIntervalMin( OTF_Reader* reader );$/;"	p	signature:( OTF_Reader* reader )
OTF_Reader_getZBufferSizes	vampirtrace/open-trace-format/OTF_Reader.h	/^uint32_t OTF_Reader_getZBufferSizes( OTF_Reader* reader );$/;"	p	signature:( OTF_Reader* reader )
OTF_Reader_open	vampirtrace/open-trace-format/OTF_Reader.h	/^OTF_Reader* OTF_Reader_open( const char* namestub, OTF_FileManager* manager );$/;"	p	signature:( const char* namestub, OTF_FileManager* manager )
OTF_Reader_readDefinitions	vampirtrace/open-trace-format/OTF_Reader.h	/^uint64_t OTF_Reader_readDefinitions( OTF_Reader* reader, OTF_HandlerArray* handlers );$/;"	p	signature:( OTF_Reader* reader, OTF_HandlerArray* handlers )
OTF_Reader_readEvents	vampirtrace/open-trace-format/OTF_Reader.h	/^uint64_t OTF_Reader_readEvents( OTF_Reader* reader, OTF_HandlerArray* handlers );$/;"	p	signature:( OTF_Reader* reader, OTF_HandlerArray* handlers )
OTF_Reader_readEventsUnsorted	vampirtrace/open-trace-format/OTF_Reader.h	/^uint64_t OTF_Reader_readEventsUnsorted( OTF_Reader* reader, OTF_HandlerArray* handlers );$/;"	p	signature:( OTF_Reader* reader, OTF_HandlerArray* handlers )
OTF_Reader_readMarkers	vampirtrace/open-trace-format/OTF_Reader.h	/^uint64_t OTF_Reader_readMarkers( OTF_Reader* reader, OTF_HandlerArray* handlers );$/;"	p	signature:( OTF_Reader* reader, OTF_HandlerArray* handlers )
OTF_Reader_readSnapshots	vampirtrace/open-trace-format/OTF_Reader.h	/^uint64_t OTF_Reader_readSnapshots( OTF_Reader* reader, OTF_HandlerArray* handlers );$/;"	p	signature:( OTF_Reader* reader, OTF_HandlerArray* handlers )
OTF_Reader_readSnapshotsUnsorted	vampirtrace/open-trace-format/OTF_Reader.h	/^uint64_t OTF_Reader_readSnapshotsUnsorted( OTF_Reader* reader, OTF_HandlerArray* handlers );$/;"	p	signature:( OTF_Reader* reader, OTF_HandlerArray* handlers )
OTF_Reader_readStatistics	vampirtrace/open-trace-format/OTF_Reader.h	/^uint64_t OTF_Reader_readStatistics( OTF_Reader* reader, OTF_HandlerArray* handlers );$/;"	p	signature:( OTF_Reader* reader, OTF_HandlerArray* handlers )
OTF_Reader_readStatisticsUnsorted	vampirtrace/open-trace-format/OTF_Reader.h	/^uint64_t OTF_Reader_readStatisticsUnsorted( OTF_Reader* reader, OTF_HandlerArray* handlers );$/;"	p	signature:( OTF_Reader* reader, OTF_HandlerArray* handlers )
OTF_Reader_reset	vampirtrace/open-trace-format/OTF_Reader.h	/^void OTF_Reader_reset( OTF_Reader* reader );$/;"	p	signature:( OTF_Reader* reader )
OTF_Reader_setBufferSizes	vampirtrace/open-trace-format/OTF_Reader.h	/^int OTF_Reader_setBufferSizes( OTF_Reader* reader, uint32_t size );$/;"	p	signature:( OTF_Reader* reader, uint32_t size )
OTF_Reader_setProcessStatus	vampirtrace/open-trace-format/OTF_Reader.h	/^int OTF_Reader_setProcessStatus( OTF_Reader* reader, uint32_t processId, $/;"	p	signature:( OTF_Reader* reader, uint32_t processId, uint8_t status )
OTF_Reader_setProcessStatusAll	vampirtrace/open-trace-format/OTF_Reader.h	/^int OTF_Reader_setProcessStatusAll( OTF_Reader* reader, uint8_t status );$/;"	p	signature:( OTF_Reader* reader, uint8_t status )
OTF_Reader_setRecordLimit	vampirtrace/open-trace-format/OTF_Reader.h	/^void OTF_Reader_setRecordLimit( OTF_Reader* reader, uint64_t limit );$/;"	p	signature:( OTF_Reader* reader, uint64_t limit )
OTF_Reader_setTimeInterval	vampirtrace/open-trace-format/OTF_Reader.h	/^void OTF_Reader_setTimeInterval( OTF_Reader* reader, uint64_t minTime,$/;"	p	signature:( OTF_Reader* reader, uint64_t minTime, uint64_t maxTime )
OTF_Reader_setZBufferSizes	vampirtrace/open-trace-format/OTF_Reader.h	/^void OTF_Reader_setZBufferSizes( OTF_Reader* reader, uint32_t size );$/;"	p	signature:( OTF_Reader* reader, uint32_t size )
OTF_Reader_snapshotBytesProgress	vampirtrace/open-trace-format/OTF_Reader.h	/^uint8_t OTF_Reader_snapshotBytesProgress( OTF_Reader* reader, $/;"	p	signature:( OTF_Reader* reader, uint64_t* minimum, uint64_t* current, uint64_t* maximum )
OTF_Reader_snapshotProgress	vampirtrace/open-trace-format/OTF_Reader.h	/^uint8_t OTF_Reader_snapshotProgress( OTF_Reader* reader, $/;"	p	signature:( OTF_Reader* reader, uint64_t* minimum, uint64_t* current, uint64_t* maximum )
OTF_Reader_snapshotTimeProgress	vampirtrace/open-trace-format/OTF_Reader.h	/^uint8_t OTF_Reader_snapshotTimeProgress( OTF_Reader* reader, $/;"	p	signature:( OTF_Reader* reader, uint64_t* minimum, uint64_t* current, uint64_t* maximum )
OTF_Reader_statisticBytesProgress	vampirtrace/open-trace-format/OTF_Reader.h	/^uint8_t OTF_Reader_statisticBytesProgress( OTF_Reader* reader,$/;"	p	signature:( OTF_Reader* reader, uint64_t* minimum, uint64_t* current, uint64_t* maximum )
OTF_Reader_statisticProgress	vampirtrace/open-trace-format/OTF_Reader.h	/^uint8_t OTF_Reader_statisticProgress( OTF_Reader* reader,$/;"	p	signature:( OTF_Reader* reader, uint64_t* minimum, uint64_t* current, uint64_t* maximum )
OTF_Reader_statisticTimeProgress	vampirtrace/open-trace-format/OTF_Reader.h	/^uint8_t OTF_Reader_statisticTimeProgress( OTF_Reader* reader,$/;"	p	signature:( OTF_Reader* reader, uint64_t* minimum, uint64_t* current, uint64_t* maximum )
OTF_SENDSNAPSHOT_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	93;"	d
OTF_SEND_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	38;"	d
OTF_SIZEOF_LONG	vampirtrace/open-trace-format/OTF_inttypes_unix.h	20;"	d
OTF_SNAPSHOTCOMMENT_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	96;"	d
OTF_SUMMARYCOMMENT_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	95;"	d
OTF_Signed2Counter	vampirtrace/open-trace-format/OTF_inttypes.h	/^uint64_t OTF_Signed2Counter( int64_t value );$/;"	p	signature:( int64_t value )
OTF_Type	vampirtrace/open-trace-format/OTF_KeyValue.h	/^} OTF_Type;$/;"	t	typeref:enum:OTF_Type_enum
OTF_Type_enum	vampirtrace/open-trace-format/OTF_KeyValue.h	/^typedef enum OTF_Type_enum {$/;"	g
OTF_UINT16	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_UINT16 = 4, 	\/**< *\/$/;"	e	enum:OTF_Type_enum
OTF_UINT32	vampirtrace/open-trace-format/OTF_KeyValue.h	/^ 	OTF_UINT32 = 6, 	\/**< *\/$/;"	e	enum:OTF_Type_enum
OTF_UINT64	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_UINT64 = 8,		\/**< *\/$/;"	e	enum:OTF_Type_enum
OTF_UINT64_MAX	vampirtrace/open-trace-format/OTF_inttypes_unix.h	54;"	d
OTF_UINT64_MAX	vampirtrace/open-trace-format/OTF_inttypes_unix.h	56;"	d
OTF_UINT8	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_UINT8 = 2, 		\/**< *\/$/;"	e	enum:OTF_Type_enum
OTF_UNKNOWN	vampirtrace/open-trace-format/OTF_KeyValue.h	/^    OTF_UNKNOWN = -1,$/;"	e	enum:OTF_Type_enum
OTF_UNKNOWN_RECORD	vampirtrace/open-trace-format/OTF_Definitions.h	104;"	d
OTF_Unsigned2Counter	vampirtrace/open-trace-format/OTF_inttypes.h	/^uint64_t OTF_Unsigned2Counter( uint64_t value );$/;"	p	signature:( uint64_t value )
OTF_VERSION_H	vampirtrace/open-trace-format/OTF_Version.h	16;"	d
OTF_VERSION_MAJOR	vampirtrace/open-trace-format/OTF_Version.h	19;"	d
OTF_VERSION_MAYOR	vampirtrace/open-trace-format/OTF_Version.h	28;"	d
OTF_VERSION_MINOR	vampirtrace/open-trace-format/OTF_Version.h	20;"	d
OTF_VERSION_STRING	vampirtrace/open-trace-format/OTF_Version.h	22;"	d
OTF_VERSION_SUB	vampirtrace/open-trace-format/OTF_Version.h	21;"	d
OTF_Value	vampirtrace/open-trace-format/OTF_KeyValue.h	/^} OTF_Value;$/;"	t	typeref:union:OTF_Value_union
OTF_Value_union	vampirtrace/open-trace-format/OTF_KeyValue.h	/^typedef union OTF_Value_union {$/;"	u
OTF_Value_union::otf_byte_array	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	byte_array  otf_byte_array;$/;"	m	union:OTF_Value_union	access:public
OTF_Value_union::otf_char	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	char	    otf_char;$/;"	m	union:OTF_Value_union	access:public
OTF_Value_union::otf_double	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	double 	    otf_double;$/;"	m	union:OTF_Value_union	access:public
OTF_Value_union::otf_float	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	float       otf_float;$/;"	m	union:OTF_Value_union	access:public
OTF_Value_union::otf_int16	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	int16_t	    otf_int16;$/;"	m	union:OTF_Value_union	access:public
OTF_Value_union::otf_int32	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	int32_t	    otf_int32;$/;"	m	union:OTF_Value_union	access:public
OTF_Value_union::otf_int64	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	int64_t	    otf_int64;$/;"	m	union:OTF_Value_union	access:public
OTF_Value_union::otf_int8	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	int8_t	    otf_int8;$/;"	m	union:OTF_Value_union	access:public
OTF_Value_union::otf_uint16	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint16_t    otf_uint16;$/;"	m	union:OTF_Value_union	access:public
OTF_Value_union::otf_uint32	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint32_t    otf_uint32;$/;"	m	union:OTF_Value_union	access:public
OTF_Value_union::otf_uint64	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint64_t    otf_uint64;$/;"	m	union:OTF_Value_union	access:public
OTF_Value_union::otf_uint8	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint8_t	    otf_uint8;$/;"	m	union:OTF_Value_union	access:public
OTF_Version.h	vampirtrace/open-trace-format/OTF_Version.h	1;"	F
OTF_WBUFFER_H	vampirtrace/open-trace-format/OTF_WBuffer.h	16;"	d
OTF_WBuffer	vampirtrace/open-trace-format/OTF_WBuffer.h	/^typedef struct struct_OTF_WBuffer OTF_WBuffer;$/;"	t	typeref:struct:struct_OTF_WBuffer
OTF_WBuffer.h	vampirtrace/open-trace-format/OTF_WBuffer.h	1;"	F
OTF_WBuffer_close	vampirtrace/open-trace-format/OTF_WBuffer.h	/^int OTF_WBuffer_close( OTF_WBuffer* wbuffer );$/;"	p	signature:( OTF_WBuffer* wbuffer )
OTF_WBuffer_flush	vampirtrace/open-trace-format/OTF_WBuffer.h	/^int OTF_WBuffer_flush( OTF_WBuffer* wbuffer );$/;"	p	signature:( OTF_WBuffer* wbuffer )
OTF_WBuffer_guarantee	vampirtrace/open-trace-format/OTF_WBuffer.h	/^int OTF_WBuffer_guarantee( OTF_WBuffer* wbuffer, size_t space );$/;"	p	signature:( OTF_WBuffer* wbuffer, size_t space )
OTF_WBuffer_open	vampirtrace/open-trace-format/OTF_WBuffer.h	/^OTF_WBuffer* OTF_WBuffer_open( const char* filename, OTF_FileManager* manager );$/;"	p	signature:( const char* filename, OTF_FileManager* manager )
OTF_WBuffer_open_zlevel	vampirtrace/open-trace-format/OTF_WBuffer.h	/^OTF_WBuffer* OTF_WBuffer_open_zlevel( const char* filename,$/;"	p	signature:( const char* filename, OTF_FileManager* manager, OTF_FileCompression compression )
OTF_WBuffer_setSize	vampirtrace/open-trace-format/OTF_WBuffer.h	/^int OTF_WBuffer_setSize( OTF_WBuffer* wbuffer, size_t size );$/;"	p	signature:( OTF_WBuffer* wbuffer, size_t size )
OTF_WBuffer_setTimeAndProcess	vampirtrace/open-trace-format/OTF_WBuffer.h	/^int OTF_WBuffer_setTimeAndProcess( OTF_WBuffer* wbuffer, $/;"	p	signature:( OTF_WBuffer* wbuffer, uint64_t t, uint32_t p )
OTF_WBuffer_setZBufferSize	vampirtrace/open-trace-format/OTF_WBuffer.h	/^void OTF_WBuffer_setZBufferSize( OTF_WBuffer* wbuffer, uint32_t size );$/;"	p	signature:( OTF_WBuffer* wbuffer, uint32_t size )
OTF_WBuffer_writeBytes	vampirtrace/open-trace-format/OTF_WBuffer.h	/^uint32_t OTF_WBuffer_writeBytes( OTF_WBuffer* wbuffer, const uint8_t *value, uint32_t len);$/;"	p	signature:( OTF_WBuffer* wbuffer, const uint8_t *value, uint32_t len)
OTF_WBuffer_writeChar	vampirtrace/open-trace-format/OTF_WBuffer.h	/^uint32_t OTF_WBuffer_writeChar( OTF_WBuffer* wbuffer, const char character );$/;"	p	signature:( OTF_WBuffer* wbuffer, const char character )
OTF_WBuffer_writeKeyValueList_long	vampirtrace/open-trace-format/OTF_WBuffer.h	/^uint32_t OTF_WBuffer_writeKeyValueList_long(OTF_WBuffer* buffer, OTF_KeyValueList *list );$/;"	p	signature:(OTF_WBuffer* buffer, OTF_KeyValueList *list )
OTF_WBuffer_writeKeyValueList_short	vampirtrace/open-trace-format/OTF_WBuffer.h	/^uint32_t OTF_WBuffer_writeKeyValueList_short(OTF_WBuffer* buffer, OTF_KeyValueList *list );$/;"	p	signature:(OTF_WBuffer* buffer, OTF_KeyValueList *list )
OTF_WBuffer_writeKeyValuePair_long	vampirtrace/open-trace-format/OTF_WBuffer.h	/^uint32_t OTF_WBuffer_writeKeyValuePair_long(OTF_WBuffer* buffer, OTF_KeyValuePair* pair);$/;"	p	signature:(OTF_WBuffer* buffer, OTF_KeyValuePair* pair)
OTF_WBuffer_writeKeyValuePair_short	vampirtrace/open-trace-format/OTF_WBuffer.h	/^uint32_t OTF_WBuffer_writeKeyValuePair_short(OTF_WBuffer* buffer, OTF_KeyValuePair* pair);$/;"	p	signature:(OTF_WBuffer* buffer, OTF_KeyValuePair* pair)
OTF_WBuffer_writeKeyword	vampirtrace/open-trace-format/OTF_WBuffer.h	/^uint32_t OTF_WBuffer_writeKeyword( OTF_WBuffer* wbuffer, const char* keyword );$/;"	p	signature:( OTF_WBuffer* wbuffer, const char* keyword )
OTF_WBuffer_writeNewline	vampirtrace/open-trace-format/OTF_WBuffer.h	/^uint32_t OTF_WBuffer_writeNewline( OTF_WBuffer* wbuffer );$/;"	p	signature:( OTF_WBuffer* wbuffer )
OTF_WBuffer_writeString	vampirtrace/open-trace-format/OTF_WBuffer.h	/^uint32_t OTF_WBuffer_writeString( OTF_WBuffer* wbuffer, const char* string );$/;"	p	signature:( OTF_WBuffer* wbuffer, const char* string )
OTF_WBuffer_writeUint16	vampirtrace/open-trace-format/OTF_WBuffer.h	/^uint32_t OTF_WBuffer_writeUint16( OTF_WBuffer* wbuffer, uint16_t value );$/;"	p	signature:( OTF_WBuffer* wbuffer, uint16_t value )
OTF_WBuffer_writeUint32	vampirtrace/open-trace-format/OTF_WBuffer.h	/^uint32_t OTF_WBuffer_writeUint32( OTF_WBuffer* wbuffer, uint32_t value );$/;"	p	signature:( OTF_WBuffer* wbuffer, uint32_t value )
OTF_WBuffer_writeUint64	vampirtrace/open-trace-format/OTF_WBuffer.h	/^uint32_t OTF_WBuffer_writeUint64( OTF_WBuffer* wbuffer, uint64_t value );$/;"	p	signature:( OTF_WBuffer* wbuffer, uint64_t value )
OTF_WBuffer_writeUint8	vampirtrace/open-trace-format/OTF_WBuffer.h	/^uint32_t OTF_WBuffer_writeUint8( OTF_WBuffer* wbuffer, uint8_t value );$/;"	p	signature:( OTF_WBuffer* wbuffer, uint8_t value )
OTF_WRITER_H	vampirtrace/open-trace-format/OTF_Writer.h	83;"	d
OTF_WSTREAM_FORMAT_INLINE_SNAPSHOTS	vampirtrace/open-trace-format/OTF_Definitions.h	116;"	d
OTF_WSTREAM_FORMAT_LONG	vampirtrace/open-trace-format/OTF_Definitions.h	115;"	d
OTF_WSTREAM_FORMAT_SHORT	vampirtrace/open-trace-format/OTF_Definitions.h	114;"	d
OTF_WSTREAM_H	vampirtrace/open-trace-format/OTF_WStream.h	76;"	d
OTF_WStream	vampirtrace/open-trace-format/OTF_WStream.h	/^typedef struct struct_OTF_WStream OTF_WStream;$/;"	t	typeref:struct:struct_OTF_WStream
OTF_WStream.h	vampirtrace/open-trace-format/OTF_WStream.h	1;"	F
OTF_WStream_close	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_close( OTF_WStream* wstream );$/;"	p	signature:( OTF_WStream* wstream )
OTF_WStream_flush	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_flush( OTF_WStream* wstream );$/;"	p	signature:( OTF_WStream* wstream )
OTF_WStream_getBufferSizes	vampirtrace/open-trace-format/OTF_WStream.h	/^uint32_t OTF_WStream_getBufferSizes( OTF_WStream* wstream );$/;"	p	signature:( OTF_WStream* wstream )
OTF_WStream_getCompression	vampirtrace/open-trace-format/OTF_WStream.h	/^OTF_FileCompression OTF_WStream_getCompression( OTF_WStream* wstream );$/;"	p	signature:( OTF_WStream* wstream )
OTF_WStream_getDefBuffer	vampirtrace/open-trace-format/OTF_WStream.h	/^OTF_WBuffer* OTF_WStream_getDefBuffer( OTF_WStream* wstream );$/;"	p	signature:( OTF_WStream* wstream )
OTF_WStream_getEventBuffer	vampirtrace/open-trace-format/OTF_WStream.h	/^OTF_WBuffer* OTF_WStream_getEventBuffer( OTF_WStream* wstream );$/;"	p	signature:( OTF_WStream* wstream )
OTF_WStream_getFormat	vampirtrace/open-trace-format/OTF_WStream.h	/^uint32_t OTF_WStream_getFormat( OTF_WStream* wstream );$/;"	p	signature:( OTF_WStream* wstream )
OTF_WStream_getMarkerBuffer	vampirtrace/open-trace-format/OTF_WStream.h	/^OTF_WBuffer* OTF_WStream_getMarkerBuffer( OTF_WStream* wstream );$/;"	p	signature:( OTF_WStream* wstream )
OTF_WStream_getSnapshotBuffer	vampirtrace/open-trace-format/OTF_WStream.h	/^OTF_WBuffer* OTF_WStream_getSnapshotBuffer( OTF_WStream* wstream );$/;"	p	signature:( OTF_WStream* wstream )
OTF_WStream_getStatsBuffer	vampirtrace/open-trace-format/OTF_WStream.h	/^OTF_WBuffer* OTF_WStream_getStatsBuffer( OTF_WStream* wstream );$/;"	p	signature:( OTF_WStream* wstream )
OTF_WStream_getZBufferSizes	vampirtrace/open-trace-format/OTF_WStream.h	/^uint32_t OTF_WStream_getZBufferSizes( OTF_WStream* wstream );$/;"	p	signature:( OTF_WStream* wstream )
OTF_WStream_open	vampirtrace/open-trace-format/OTF_WStream.h	/^OTF_WStream* OTF_WStream_open( const char* namestub, uint32_t id, $/;"	p	signature:( const char* namestub, uint32_t id, OTF_FileManager* manager )
OTF_WStream_setBufferSizes	vampirtrace/open-trace-format/OTF_WStream.h	/^void OTF_WStream_setBufferSizes( OTF_WStream* wstream, uint32_t size );$/;"	p	signature:( OTF_WStream* wstream, uint32_t size )
OTF_WStream_setCompression	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_setCompression( OTF_WStream* wstream, OTF_FileCompression$/;"	p	signature:( OTF_WStream* wstream, OTF_FileCompression compression )
OTF_WStream_setFormat	vampirtrace/open-trace-format/OTF_WStream.h	/^void OTF_WStream_setFormat( OTF_WStream* wstream, uint32_t format );$/;"	p	signature:( OTF_WStream* wstream, uint32_t format )
OTF_WStream_setZBufferSizes	vampirtrace/open-trace-format/OTF_WStream.h	/^void OTF_WStream_setZBufferSizes( OTF_WStream* wstream, uint32_t size );$/;"	p	signature:( OTF_WStream* wstream, uint32_t size )
OTF_WStream_writeBeginCollectiveOperation	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeBeginCollectiveOperation( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t collOp, uint64_t matchingId, uint32_t procGroup, uint32_t rootProc, uint64_t sent, uint64_t received, uint32_t scltoken )
OTF_WStream_writeBeginCollectiveOperationKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeBeginCollectiveOperationKV( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t collOp, uint64_t matchingId, uint32_t procGroup, uint32_t rootProc, uint64_t sent, uint64_t received, uint32_t scltoken, OTF_KeyValueList* list )
OTF_WStream_writeBeginCollopSnapshot	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeBeginCollopSnapshot( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint64_t originaltime, uint32_t process, uint32_t collOp, uint64_t matchingId, uint32_t procGroup, uint32_t rootProc, uint64_t sent, uint64_t received, uint32_t scltoken )
OTF_WStream_writeBeginCollopSnapshotKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeBeginCollopSnapshotKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint64_t originaltime, uint32_t process, uint32_t collOp, uint64_t matchingId, uint32_t procGroup, uint32_t rootProc, uint64_t sent, uint64_t received, uint32_t scltoken, OTF_KeyValueList *list )
OTF_WStream_writeBeginFileOpSnapshot	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeBeginFileOpSnapshot( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint64_t originaltime, uint32_t process, uint64_t matchingId, uint32_t scltoken )
OTF_WStream_writeBeginFileOpSnapshotKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeBeginFileOpSnapshotKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint64_t originaltime, uint32_t process, uint64_t matchingId, uint32_t scltoken, OTF_KeyValueList *list )
OTF_WStream_writeBeginFileOperation	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeBeginFileOperation( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint64_t matchingId, uint32_t scltoken )
OTF_WStream_writeBeginFileOperationKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeBeginFileOperationKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint64_t matchingId, uint32_t scltoken, OTF_KeyValueList* list )
OTF_WStream_writeBeginProcess	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeBeginProcess( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process )
OTF_WStream_writeBeginProcessKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeBeginProcessKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, OTF_KeyValueList* list )
OTF_WStream_writeCollectiveOperation	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeCollectiveOperation( OTF_WStream* wstream, uint64_t time, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t functionToken, uint32_t communicator, uint32_t rootprocess, uint32_t sent, uint32_t received, uint64_t duration, uint32_t scltoken )
OTF_WStream_writeCollectiveOperationKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeCollectiveOperationKV( OTF_WStream* wstream, uint64_t time, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t functionToken, uint32_t communicator, uint32_t rootprocess, uint32_t sent, uint32_t received, uint64_t duration, uint32_t scltoken, OTF_KeyValueList* list )
OTF_WStream_writeCollopCountSnapshot	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeCollopCountSnapshot( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t communicator, uint64_t count, OTF_KeyValueList* list )
OTF_WStream_writeCollopSummary	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeCollopSummary( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t comm, uint32_t collective, uint64_t number_sent, uint64_t number_recved, uint64_t bytes_sent, uint64_t bytes_recved )
OTF_WStream_writeCollopSummaryKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeCollopSummaryKV( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t comm, uint32_t collective, uint64_t number_sent, uint64_t number_recved, uint64_t bytes_sent, uint64_t bytes_recved, OTF_KeyValueList* list )
OTF_WStream_writeCounter	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeCounter( OTF_WStream* wstream, uint64_t time, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t counter_token, uint64_t value )
OTF_WStream_writeCounterKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeCounterKV( OTF_WStream* wstream, uint64_t time, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t counter_token, uint64_t value, OTF_KeyValueList* list )
OTF_WStream_writeCounterSnapshot	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeCounterSnapshot( OTF_WStream*      wstream,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint64_t originaltime, uint32_t process, uint32_t counter, uint64_t value, OTF_KeyValueList* list )
OTF_WStream_writeDefAttributeList	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefAttributeList( OTF_WStream* wstream, uint32_t attr_token,$/;"	p	signature:( OTF_WStream* wstream, uint32_t attr_token, uint32_t num, OTF_ATTR_TYPE* array )
OTF_WStream_writeDefAttributeListKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefAttributeListKV( OTF_WStream* wstream, uint32_t attr_token,$/;"	p	signature:( OTF_WStream* wstream, uint32_t attr_token, uint32_t num, OTF_ATTR_TYPE* array, OTF_KeyValueList* list )
OTF_WStream_writeDefAuxSamplePoint	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefAuxSamplePoint( OTF_WStream*           wstream,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, OTF_AuxSamplePointType type, OTF_KeyValueList* list )
OTF_WStream_writeDefCollectiveOperation	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefCollectiveOperation( OTF_WStream* wstream, $/;"	p	signature:( OTF_WStream* wstream, uint32_t collOp, const char* name, uint32_t type )
OTF_WStream_writeDefCollectiveOperationKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefCollectiveOperationKV( OTF_WStream* wstream, $/;"	p	signature:( OTF_WStream* wstream, uint32_t collOp, const char* name, uint32_t type, OTF_KeyValueList* list )
OTF_WStream_writeDefCounter	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefCounter( OTF_WStream* wstream, uint32_t deftoken,$/;"	p	signature:( OTF_WStream* wstream, uint32_t deftoken, const char* name, uint32_t properties, uint32_t countergroup, const char* unit )
OTF_WStream_writeDefCounterAssignments	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefCounterAssignments( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint32_t counter_token, uint32_t number_of_members, const uint32_t* procs_or_groups, OTF_KeyValueList* list )
OTF_WStream_writeDefCounterGroup	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefCounterGroup( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint32_t deftoken, const char* name )
OTF_WStream_writeDefCounterGroupKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefCounterGroupKV( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint32_t deftoken, const char* name, OTF_KeyValueList* list )
OTF_WStream_writeDefCounterKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefCounterKV( OTF_WStream* wstream, uint32_t deftoken,$/;"	p	signature:( OTF_WStream* wstream, uint32_t deftoken, const char* name, uint32_t properties, uint32_t countergroup, const char* unit, OTF_KeyValueList* list )
OTF_WStream_writeDefCreator	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefCreator( OTF_WStream* wstream, const char* creator );$/;"	p	signature:( OTF_WStream* wstream, const char* creator )
OTF_WStream_writeDefCreatorKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefCreatorKV( OTF_WStream* wstream, const char* creator, OTF_KeyValueList* list );$/;"	p	signature:( OTF_WStream* wstream, const char* creator, OTF_KeyValueList* list )
OTF_WStream_writeDefFile	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefFile( OTF_WStream* wstream, uint32_t token,$/;"	p	signature:( OTF_WStream* wstream, uint32_t token, const char* name, uint32_t group )
OTF_WStream_writeDefFileGroup	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefFileGroup( OTF_WStream* wstream, uint32_t token,$/;"	p	signature:( OTF_WStream* wstream, uint32_t token, const char* name )
OTF_WStream_writeDefFileGroupKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefFileGroupKV( OTF_WStream* wstream, uint32_t token,$/;"	p	signature:( OTF_WStream* wstream, uint32_t token, const char* name, OTF_KeyValueList* list )
OTF_WStream_writeDefFileKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefFileKV( OTF_WStream* wstream, uint32_t token,$/;"	p	signature:( OTF_WStream* wstream, uint32_t token, const char* name, uint32_t group, OTF_KeyValueList* list )
OTF_WStream_writeDefFunction	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefFunction( OTF_WStream* wstream, uint32_t deftoken,$/;"	p	signature:( OTF_WStream* wstream, uint32_t deftoken, const char* name, uint32_t group, uint32_t scltoken )
OTF_WStream_writeDefFunctionGroup	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefFunctionGroup( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint32_t deftoken, const char* name )
OTF_WStream_writeDefFunctionGroupKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefFunctionGroupKV( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint32_t deftoken, const char* name, OTF_KeyValueList* list )
OTF_WStream_writeDefFunctionKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefFunctionKV( OTF_WStream* wstream, uint32_t deftoken,$/;"	p	signature:( OTF_WStream* wstream, uint32_t deftoken, const char* name, uint32_t group, uint32_t scltoken, OTF_KeyValueList* list )
OTF_WStream_writeDefKeyValue	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefKeyValue( OTF_WStream* wstream,	uint32_t key,$/;"	p	signature:( OTF_WStream* wstream, uint32_t key, OTF_Type type, const char* name, const char *description )
OTF_WStream_writeDefKeyValueKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefKeyValueKV( OTF_WStream* wstream, uint32_t key,$/;"	p	signature:( OTF_WStream* wstream, uint32_t key, OTF_Type type, const char* name, const char *description, OTF_KeyValueList* list )
OTF_WStream_writeDefMarker	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefMarker( OTF_WStream* wstream, $/;"	p	signature:( OTF_WStream* wstream, uint32_t token, const char* name, uint32_t type )
OTF_WStream_writeDefMarkerKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefMarkerKV( OTF_WStream* wstream, $/;"	p	signature:( OTF_WStream* wstream, uint32_t token, const char* name, uint32_t type, OTF_KeyValueList* list )
OTF_WStream_writeDefProcess	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefProcess( OTF_WStream* wstream, uint32_t deftoken,$/;"	p	signature:( OTF_WStream* wstream, uint32_t deftoken, const char* name, uint32_t parent )
OTF_WStream_writeDefProcessGroup	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefProcessGroup( OTF_WStream* wstream, uint32_t deftoken,$/;"	p	signature:( OTF_WStream* wstream, uint32_t deftoken, const char* name, uint32_t n, const uint32_t* array )
OTF_WStream_writeDefProcessGroupKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefProcessGroupKV( OTF_WStream* wstream, uint32_t deftoken,$/;"	p	signature:( OTF_WStream* wstream, uint32_t deftoken, const char* name, uint32_t n, const uint32_t* array, OTF_KeyValueList* list )
OTF_WStream_writeDefProcessKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefProcessKV( OTF_WStream* wstream, uint32_t deftoken,$/;"	p	signature:( OTF_WStream* wstream, uint32_t deftoken, const char* name, uint32_t parent, OTF_KeyValueList* list )
OTF_WStream_writeDefProcessOrGroupAttributes	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefProcessOrGroupAttributes( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint32_t proc_token, uint32_t attr_token )
OTF_WStream_writeDefProcessOrGroupAttributesKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefProcessOrGroupAttributesKV( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint32_t proc_token, uint32_t attr_token, OTF_KeyValueList* list )
OTF_WStream_writeDefProcessSubstitutes	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefProcessSubstitutes( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint32_t representative, uint32_t numberOfProcs, const uint32_t* procs, OTF_KeyValueList* list )
OTF_WStream_writeDefScl	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefScl( OTF_WStream* wstream, uint32_t deftoken,$/;"	p	signature:( OTF_WStream* wstream, uint32_t deftoken, uint32_t sclfile, uint32_t sclline )
OTF_WStream_writeDefSclFile	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefSclFile( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint32_t deftoken, const char* filename )
OTF_WStream_writeDefSclFileKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefSclFileKV( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint32_t deftoken, const char* filename, OTF_KeyValueList* list )
OTF_WStream_writeDefSclKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefSclKV( OTF_WStream* wstream, uint32_t deftoken,$/;"	p	signature:( OTF_WStream* wstream, uint32_t deftoken, uint32_t sclfile, uint32_t sclline, OTF_KeyValueList* list )
OTF_WStream_writeDefTimeRange	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefTimeRange( OTF_WStream* wstream, uint64_t minTime,$/;"	p	signature:( OTF_WStream* wstream, uint64_t minTime, uint64_t maxTime, OTF_KeyValueList* list )
OTF_WStream_writeDefTimerResolution	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefTimerResolution( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint64_t ticksPerSecond )
OTF_WStream_writeDefTimerResolutionKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefTimerResolutionKV( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint64_t ticksPerSecond, OTF_KeyValueList* list )
OTF_WStream_writeDefinitionComment	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefinitionComment( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, const char* comment )
OTF_WStream_writeDefinitionCommentKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeDefinitionCommentKV( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, const char* comment, OTF_KeyValueList* list )
OTF_WStream_writeEndCollectiveOperation	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeEndCollectiveOperation( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint64_t matchingId )
OTF_WStream_writeEndCollectiveOperationKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeEndCollectiveOperationKV( OTF_WStream* wstream,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint64_t matchingId, OTF_KeyValueList* list )
OTF_WStream_writeEndFileOperation	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeEndFileOperation( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t fileid, uint64_t matchingId, uint64_t handleId, uint32_t operation, uint64_t bytes, uint32_t scltoken )
OTF_WStream_writeEndFileOperationKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeEndFileOperationKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t fileid, uint64_t matchingId, uint64_t handleId, uint32_t operation, uint64_t bytes, uint32_t scltoken, OTF_KeyValueList* list )
OTF_WStream_writeEndProcess	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeEndProcess( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process )
OTF_WStream_writeEndProcessKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeEndProcessKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, OTF_KeyValueList* list )
OTF_WStream_writeEnter	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeEnter( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t statetoken, uint32_t cpuid, uint32_t scltoken )
OTF_WStream_writeEnterKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeEnterKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t statetoken, uint32_t cpuid, uint32_t scltoken, OTF_KeyValueList* list )
OTF_WStream_writeEnterSnapshot	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeEnterSnapshot( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint64_t originaltime, uint32_t statetoken, uint32_t cpuid, uint32_t scltoken )
OTF_WStream_writeEnterSnapshotKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeEnterSnapshotKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint64_t originaltime, uint32_t statetoken, uint32_t cpuid, uint32_t scltoken, OTF_KeyValueList* list )
OTF_WStream_writeEventComment	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeEventComment( OTF_WStream* wstream, uint64_t time, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, const char* comment )
OTF_WStream_writeEventCommentKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeEventCommentKV( OTF_WStream* wstream, uint64_t time, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, const char* comment, OTF_KeyValueList* list )
OTF_WStream_writeFileGroupOperationSummary	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeFileGroupOperationSummary( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t groupid, uint32_t process, uint64_t nopen, uint64_t nclose, uint64_t nread, uint64_t nwrite, uint64_t nseek, uint64_t bytesread, uint64_t byteswrite )
OTF_WStream_writeFileGroupOperationSummaryKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeFileGroupOperationSummaryKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t groupid, uint32_t process, uint64_t nopen, uint64_t nclose, uint64_t nread, uint64_t nwrite, uint64_t nseek, uint64_t bytesread, uint64_t byteswrite, OTF_KeyValueList* list )
OTF_WStream_writeFileOperation	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeFileOperation( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t fileid, uint32_t process, uint64_t handleid, uint32_t operation, uint64_t bytes, uint64_t duration, uint32_t source )
OTF_WStream_writeFileOperationKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeFileOperationKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t fileid, uint32_t process, uint64_t handleid, uint32_t operation, uint64_t bytes, uint64_t duration, uint32_t source, OTF_KeyValueList* list )
OTF_WStream_writeFileOperationSummary	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeFileOperationSummary( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t fileid, uint32_t process, uint64_t nopen, uint64_t nclose, uint64_t nread, uint64_t nwrite, uint64_t nseek, uint64_t bytesread, uint64_t byteswrite )
OTF_WStream_writeFileOperationSummaryKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeFileOperationSummaryKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t fileid, uint32_t process, uint64_t nopen, uint64_t nclose, uint64_t nread, uint64_t nwrite, uint64_t nseek, uint64_t bytesread, uint64_t byteswrite, OTF_KeyValueList* list )
OTF_WStream_writeFunctionGroupSummary	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeFunctionGroupSummary( OTF_WStream* wstream, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t functiongroup, uint32_t process, uint64_t count, uint64_t excltime, uint64_t incltime )
OTF_WStream_writeFunctionGroupSummaryKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeFunctionGroupSummaryKV( OTF_WStream* wstream, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t functiongroup, uint32_t process, uint64_t count, uint64_t excltime, uint64_t incltime, OTF_KeyValueList* list )
OTF_WStream_writeFunctionSummary	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeFunctionSummary( OTF_WStream* wstream, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t function, uint32_t process, uint64_t count, uint64_t excltime, uint64_t incltime )
OTF_WStream_writeFunctionSummaryKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeFunctionSummaryKV( OTF_WStream* wstream, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t function, uint32_t process, uint64_t count, uint64_t excltime, uint64_t incltime, OTF_KeyValueList* list )
OTF_WStream_writeLeave	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeLeave( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t statetoken, uint32_t cpuid, uint32_t scltoken )
OTF_WStream_writeLeaveKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeLeaveKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t statetoken, uint32_t cpuid, uint32_t scltoken, OTF_KeyValueList* list )
OTF_WStream_writeMarker	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeMarker( OTF_WStream* wstream, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t token, const char* text )
OTF_WStream_writeMarkerKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeMarkerKV( OTF_WStream* wstream, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t token, const char* text, OTF_KeyValueList* list )
OTF_WStream_writeMessageSummary	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeMessageSummary( OTF_WStream* wstream, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t peer, uint32_t comm, uint32_t tag, uint64_t number_sent, uint64_t number_recved, uint64_t bytes_sent, uint64_t bytes_recved )
OTF_WStream_writeMessageSummaryKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeMessageSummaryKV( OTF_WStream* wstream, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t peer, uint32_t comm, uint32_t tag, uint64_t number_sent, uint64_t number_recved, uint64_t bytes_sent, uint64_t bytes_recved, OTF_KeyValueList* list )
OTF_WStream_writeNoOpKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeNoOpKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, OTF_KeyValueList* list )
OTF_WStream_writeOpenFileSnapshot	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeOpenFileSnapshot( OTF_WStream* wstream,uint64_t time,$/;"	p	signature:( OTF_WStream* wstream,uint64_t time, uint64_t originaltime, uint32_t fileid, uint32_t process, uint64_t handleid, uint32_t source )
OTF_WStream_writeOpenFileSnapshotKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeOpenFileSnapshotKV( OTF_WStream* wstream,uint64_t time,$/;"	p	signature:( OTF_WStream* wstream,uint64_t time, uint64_t originaltime, uint32_t fileid, uint32_t process, uint64_t handleid, uint32_t source, OTF_KeyValueList* list )
OTF_WStream_writeOtfVersion	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeOtfVersion( OTF_WStream* wstream );$/;"	p	signature:( OTF_WStream* wstream )
OTF_WStream_writeRMAEnd	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeRMAEnd( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t remote, uint32_t communicator, uint32_t tag, uint32_t scltoken )
OTF_WStream_writeRMAEndKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeRMAEndKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t remote, uint32_t communicator, uint32_t tag, uint32_t scltoken, OTF_KeyValueList* list )
OTF_WStream_writeRMAGet	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeRMAGet( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t origin, uint32_t target, uint32_t communicator, uint32_t tag, uint64_t bytes, uint32_t scltoken )
OTF_WStream_writeRMAGetKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeRMAGetKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t origin, uint32_t target, uint32_t communicator, uint32_t tag, uint64_t bytes, uint32_t scltoken, OTF_KeyValueList* list )
OTF_WStream_writeRMAPut	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeRMAPut( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t origin, uint32_t target, uint32_t communicator, uint32_t tag, uint64_t bytes, uint32_t scltoken )
OTF_WStream_writeRMAPutKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeRMAPutKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t origin, uint32_t target, uint32_t communicator, uint32_t tag, uint64_t bytes, uint32_t scltoken, OTF_KeyValueList* list )
OTF_WStream_writeRMAPutRemoteEnd	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeRMAPutRemoteEnd( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t origin, uint32_t target, uint32_t communicator, uint32_t tag, uint64_t bytes, uint32_t scltoken )
OTF_WStream_writeRMAPutRemoteEndKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeRMAPutRemoteEndKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, uint32_t origin, uint32_t target, uint32_t communicator, uint32_t tag, uint64_t bytes, uint32_t scltoken, OTF_KeyValueList* list )
OTF_WStream_writeRecvMsg	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeRecvMsg( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t receiver, uint32_t sender, uint32_t communicator, uint32_t msgtype, uint32_t msglength, uint32_t scltoken )
OTF_WStream_writeRecvMsgKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeRecvMsgKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t receiver, uint32_t sender, uint32_t communicator, uint32_t msgtype, uint32_t msglength, uint32_t scltoken, OTF_KeyValueList* list )
OTF_WStream_writeSendMsg	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeSendMsg( OTF_WStream* wstream, uint64_t time, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t sender, uint32_t receiver, uint32_t communicator, uint32_t msgtype, uint32_t msglength, uint32_t scltoken )
OTF_WStream_writeSendMsgKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeSendMsgKV( OTF_WStream* wstream, uint64_t time, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t sender, uint32_t receiver, uint32_t communicator, uint32_t msgtype, uint32_t msglength, uint32_t scltoken, OTF_KeyValueList* list )
OTF_WStream_writeSendSnapshot	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeSendSnapshot( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint64_t originaltime, uint32_t sender, uint32_t receiver, uint32_t procGroup, uint32_t type, uint32_t length, uint32_t source )
OTF_WStream_writeSendSnapshotKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeSendSnapshotKV( OTF_WStream* wstream, uint64_t time,$/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint64_t originaltime, uint32_t sender, uint32_t receiver, uint32_t procGroup, uint32_t type, uint32_t length, uint32_t source, OTF_KeyValueList* list )
OTF_WStream_writeSnapshotComment	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeSnapshotComment( OTF_WStream* wstream, uint64_t time, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, const char* comment )
OTF_WStream_writeSnapshotCommentKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeSnapshotCommentKV( OTF_WStream* wstream, uint64_t time, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, const char* comment, OTF_KeyValueList* list )
OTF_WStream_writeSummaryComment	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeSummaryComment( OTF_WStream* wstream, uint64_t time, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, const char* comment )
OTF_WStream_writeSummaryCommentKV	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeSummaryCommentKV( OTF_WStream* wstream, uint64_t time, $/;"	p	signature:( OTF_WStream* wstream, uint64_t time, uint32_t process, const char* comment, OTF_KeyValueList* list )
OTF_WStream_writeUniqueId	vampirtrace/open-trace-format/OTF_WStream.h	/^int OTF_WStream_writeUniqueId( OTF_WStream* wstream );$/;"	p	signature:( OTF_WStream* wstream )
OTF_Warning	vampirtrace/open-trace-format/OTF_Errno.h	/^void OTF_Warning( const char* format, ... );$/;"	p	signature:( const char* format, ... )
OTF_Writer	vampirtrace/open-trace-format/OTF_Writer.h	/^typedef struct struct_OTF_Writer OTF_Writer;$/;"	t	typeref:struct:struct_OTF_Writer
OTF_Writer.h	vampirtrace/open-trace-format/OTF_Writer.h	1;"	F
OTF_Writer_assignProcess	vampirtrace/open-trace-format/OTF_Writer.h	/^uint32_t OTF_Writer_assignProcess( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t process, uint32_t stream )
OTF_Writer_close	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_close( OTF_Writer* writer );$/;"	p	signature:( OTF_Writer* writer )
OTF_Writer_closeAllStreams	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_closeAllStreams( OTF_Writer* writer );$/;"	p	signature:( OTF_Writer* writer )
OTF_Writer_getBufferSizes	vampirtrace/open-trace-format/OTF_Writer.h	/^uint32_t OTF_Writer_getBufferSizes( OTF_Writer* writer );$/;"	p	signature:( OTF_Writer* writer )
OTF_Writer_getCompression	vampirtrace/open-trace-format/OTF_Writer.h	/^OTF_FileCompression OTF_Writer_getCompression( OTF_Writer* writer );$/;"	p	signature:( OTF_Writer* writer )
OTF_Writer_getFormat	vampirtrace/open-trace-format/OTF_Writer.h	/^uint32_t OTF_Writer_getFormat( OTF_Writer* writer );$/;"	p	signature:( OTF_Writer* writer )
OTF_Writer_getMasterControl	vampirtrace/open-trace-format/OTF_Writer.h	/^OTF_MasterControl* OTF_Writer_getMasterControl( OTF_Writer* writer );$/;"	p	signature:( OTF_Writer* writer )
OTF_Writer_getStream	vampirtrace/open-trace-format/OTF_Writer.h	/^OTF_WStream* OTF_Writer_getStream( OTF_Writer* writer, uint32_t stream );$/;"	p	signature:( OTF_Writer* writer, uint32_t stream )
OTF_Writer_getZBufferSizes	vampirtrace/open-trace-format/OTF_Writer.h	/^uint32_t OTF_Writer_getZBufferSizes( OTF_Writer* writer );$/;"	p	signature:( OTF_Writer* writer )
OTF_Writer_mapProcess	vampirtrace/open-trace-format/OTF_Writer.h	/^uint32_t OTF_Writer_mapProcess( OTF_Writer* writer, uint32_t processId );$/;"	p	signature:( OTF_Writer* writer, uint32_t processId )
OTF_Writer_open	vampirtrace/open-trace-format/OTF_Writer.h	/^OTF_Writer* OTF_Writer_open( const char* fileNamePrefix, $/;"	p	signature:( const char* fileNamePrefix, uint32_t numberOfStreams, OTF_FileManager* fileManager )
OTF_Writer_setBufferSizes	vampirtrace/open-trace-format/OTF_Writer.h	/^void OTF_Writer_setBufferSizes( OTF_Writer* writer, uint32_t size );$/;"	p	signature:( OTF_Writer* writer, uint32_t size )
OTF_Writer_setCompression	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_setCompression( OTF_Writer* writer, OTF_FileCompression$/;"	p	signature:( OTF_Writer* writer, OTF_FileCompression compression )
OTF_Writer_setFormat	vampirtrace/open-trace-format/OTF_Writer.h	/^void OTF_Writer_setFormat( OTF_Writer* writer, uint32_t format );$/;"	p	signature:( OTF_Writer* writer, uint32_t format )
OTF_Writer_setMasterControl	vampirtrace/open-trace-format/OTF_Writer.h	/^void OTF_Writer_setMasterControl( OTF_Writer* writer, OTF_MasterControl* mc );$/;"	p	signature:( OTF_Writer* writer, OTF_MasterControl* mc )
OTF_Writer_setZBufferSizes	vampirtrace/open-trace-format/OTF_Writer.h	/^void OTF_Writer_setZBufferSizes( OTF_Writer* writer, uint32_t size );$/;"	p	signature:( OTF_Writer* writer, uint32_t size )
OTF_Writer_writeBeginCollectiveOperation	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeBeginCollectiveOperation( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t collOp, uint64_t matchingId, uint32_t procGroup, uint32_t rootProc, uint64_t sent, uint64_t received, uint32_t scltoken )
OTF_Writer_writeBeginCollectiveOperationKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeBeginCollectiveOperationKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t collOp, uint64_t matchingId, uint32_t procGroup, uint32_t rootProc, uint64_t sent, uint64_t received, uint32_t scltoken, OTF_KeyValueList* list )
OTF_Writer_writeBeginCollopSnapshot	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeBeginCollopSnapshot( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint64_t originaltime, uint32_t process, uint32_t collOp, uint64_t matchingId, uint32_t procGroup, uint32_t rootProc, uint64_t sent, uint64_t received, uint32_t scltoken )
OTF_Writer_writeBeginCollopSnapshotKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeBeginCollopSnapshotKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint64_t originaltime, uint32_t process, uint32_t collOp, uint64_t matchingId, uint32_t procGroup, uint32_t rootProc, uint64_t sent, uint64_t received, uint32_t scltoken, OTF_KeyValueList* list )
OTF_Writer_writeBeginFileOpSnapshot	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeBeginFileOpSnapshot( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint64_t originaltime, uint32_t process, uint64_t matchingId, uint32_t scltoken )
OTF_Writer_writeBeginFileOpSnapshotKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeBeginFileOpSnapshotKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint64_t originaltime, uint32_t process, uint64_t matchingId, uint32_t scltoken, OTF_KeyValueList* list )
OTF_Writer_writeBeginFileOperation	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeBeginFileOperation( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint64_t matchingId, uint32_t scltoken )
OTF_Writer_writeBeginFileOperationKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeBeginFileOperationKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint64_t matchingId, uint32_t scltoken, OTF_KeyValueList* list )
OTF_Writer_writeBeginProcess	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeBeginProcess( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process )
OTF_Writer_writeBeginProcessKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeBeginProcessKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, OTF_KeyValueList* list )
OTF_Writer_writeCollectiveOperation	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeCollectiveOperation( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t collective, uint32_t procGroup, uint32_t rootProc, uint32_t sent, uint32_t received, uint64_t duration, uint32_t source )
OTF_Writer_writeCollectiveOperationKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeCollectiveOperationKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t collective, uint32_t procGroup, uint32_t rootProc, uint32_t sent, uint32_t received, uint64_t duration, uint32_t source, OTF_KeyValueList* list )
OTF_Writer_writeCollopCountSnapshot	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeCollopCountSnapshot( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t communicator, uint64_t count, OTF_KeyValueList *list )
OTF_Writer_writeCollopSummary	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeCollopSummary( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t comm, uint32_t collective, uint64_t number_sent, uint64_t number_recved, uint64_t bytes_sent, uint64_t bytes_recved )
OTF_Writer_writeCollopSummaryKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeCollopSummaryKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t comm, uint32_t collective, uint64_t number_sent, uint64_t number_recved, uint64_t bytes_sent, uint64_t bytes_recved, OTF_KeyValueList* list )
OTF_Writer_writeCounter	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeCounter( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t counter, uint64_t value )
OTF_Writer_writeCounterKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeCounterKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t counter, uint64_t value, OTF_KeyValueList* list )
OTF_Writer_writeCounterSnapshot	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeCounterSnapshot( OTF_Writer*       writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint64_t originaltime, uint32_t process, uint32_t counter, uint64_t value, OTF_KeyValueList *list )
OTF_Writer_writeDefAttributeList	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefAttributeList( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t attr_token, uint32_t num, OTF_ATTR_TYPE* array )
OTF_Writer_writeDefAttributeListKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefAttributeListKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t attr_token, uint32_t num, OTF_ATTR_TYPE* array, OTF_KeyValueList* list )
OTF_Writer_writeDefAuxSamplePoint	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefAuxSamplePoint( OTF_Writer*            writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t streamid, uint64_t time, OTF_AuxSamplePointType type, OTF_KeyValueList* list )
OTF_Writer_writeDefCollectiveOperation	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefCollectiveOperation( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t collOp, const char* name, uint32_t type )
OTF_Writer_writeDefCollectiveOperationKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefCollectiveOperationKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t collOp, const char* name, uint32_t type, OTF_KeyValueList* list )
OTF_Writer_writeDefCounter	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefCounter( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t counter, const char* name, uint32_t properties, uint32_t counterGroup, const char* unit )
OTF_Writer_writeDefCounterAssignments	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefCounterAssignments( OTF_Writer*       writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t streamid, uint32_t counter_token, uint32_t number_of_members, const uint32_t* procs_or_groups, OTF_KeyValueList* list )
OTF_Writer_writeDefCounterGroup	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefCounterGroup( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t counterGroup, const char* name )
OTF_Writer_writeDefCounterGroupKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefCounterGroupKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t counterGroup, const char* name, OTF_KeyValueList* list )
OTF_Writer_writeDefCounterKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefCounterKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t counter, const char* name, uint32_t properties, uint32_t counterGroup, const char* unit, OTF_KeyValueList* list )
OTF_Writer_writeDefCreator	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefCreator( OTF_Writer* writer, uint32_t stream,$/;"	p	signature:( OTF_Writer* writer, uint32_t stream, const char* creator )
OTF_Writer_writeDefCreatorKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefCreatorKV( OTF_Writer* writer, uint32_t stream,$/;"	p	signature:( OTF_Writer* writer, uint32_t stream, const char* creator, OTF_KeyValueList* list )
OTF_Writer_writeDefFile	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefFile( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t token, const char* name, uint32_t group )
OTF_Writer_writeDefFileGroup	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefFileGroup( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t token, const char* name )
OTF_Writer_writeDefFileGroupKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefFileGroupKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t token, const char* name, OTF_KeyValueList* list )
OTF_Writer_writeDefFileKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefFileKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t token, const char* name, uint32_t group, OTF_KeyValueList* list )
OTF_Writer_writeDefFunction	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefFunction( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t func, const char* name, uint32_t funcGroup, uint32_t source )
OTF_Writer_writeDefFunctionGroup	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefFunctionGroup( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t funcGroup, const char* name )
OTF_Writer_writeDefFunctionGroupKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefFunctionGroupKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t funcGroup, const char* name, OTF_KeyValueList* list )
OTF_Writer_writeDefFunctionKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefFunctionKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t func, const char* name, uint32_t funcGroup, uint32_t source, OTF_KeyValueList* list )
OTF_Writer_writeDefKeyValue	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefKeyValue( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t key, OTF_Type type, const char* name, const char* description )
OTF_Writer_writeDefKeyValueKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefKeyValueKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t key, OTF_Type type, const char* name, const char* description, OTF_KeyValueList* list )
OTF_Writer_writeDefMarker	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefMarker( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint32_t streamID, uint32_t token, const char* name, uint32_t type )
OTF_Writer_writeDefMarkerKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefMarkerKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint32_t streamID, uint32_t token, const char* name, uint32_t type, OTF_KeyValueList* list )
OTF_Writer_writeDefProcess	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefProcess( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t process, const char* name, uint32_t parent )
OTF_Writer_writeDefProcessGroup	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefProcessGroup( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t procGroup, const char* name, uint32_t numberOfProcs, const uint32_t* procs )
OTF_Writer_writeDefProcessGroupKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefProcessGroupKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t procGroup, const char* name, uint32_t numberOfProcs, const uint32_t* procs, OTF_KeyValueList* list )
OTF_Writer_writeDefProcessKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefProcessKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t process, const char* name, uint32_t parent, OTF_KeyValueList* list )
OTF_Writer_writeDefProcessOrGroupAttributes	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefProcessOrGroupAttributes( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t proc_token, uint32_t attr_token )
OTF_Writer_writeDefProcessOrGroupAttributesKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefProcessOrGroupAttributesKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t proc_token, uint32_t attr_token, OTF_KeyValueList* list )
OTF_Writer_writeDefProcessSubstitutes	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefProcessSubstitutes( OTF_Writer*       writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t streamid, uint32_t representative, uint32_t numberOfProcs, const uint32_t* procs, OTF_KeyValueList* list )
OTF_Writer_writeDefScl	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefScl( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t source, uint32_t sourceFile, uint32_t line )
OTF_Writer_writeDefSclFile	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefSclFile( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t sourceFile, const char* name )
OTF_Writer_writeDefSclFileKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefSclFileKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t sourceFile, const char* name, OTF_KeyValueList* list )
OTF_Writer_writeDefSclKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefSclKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint32_t source, uint32_t sourceFile, uint32_t line, OTF_KeyValueList* list )
OTF_Writer_writeDefTimeRange	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefTimeRange( OTF_Writer*       writer,$/;"	p	signature:( OTF_Writer* writer, uint32_t streamid, uint64_t minTime, uint64_t maxTime, OTF_KeyValueList* list )
OTF_Writer_writeDefTimerResolution	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefTimerResolution( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint64_t ticksPerSecond )
OTF_Writer_writeDefTimerResolutionKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefTimerResolutionKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint32_t stream, uint64_t ticksPerSecond, OTF_KeyValueList* list )
OTF_Writer_writeDefinitionComment	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefinitionComment( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint32_t stream, const char* comment )
OTF_Writer_writeDefinitionCommentKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeDefinitionCommentKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint32_t stream, const char* comment, OTF_KeyValueList* list )
OTF_Writer_writeEndCollectiveOperation	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeEndCollectiveOperation( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint64_t matchingId )
OTF_Writer_writeEndCollectiveOperationKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeEndCollectiveOperationKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint64_t matchingId, OTF_KeyValueList* list )
OTF_Writer_writeEndFileOperation	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeEndFileOperation( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t fileid, uint64_t matchingId, uint64_t handleId, uint32_t operation, uint64_t bytes, uint32_t scltoken )
OTF_Writer_writeEndFileOperationKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeEndFileOperationKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t fileid, uint64_t matchingId, uint64_t handleId, uint32_t operation, uint64_t bytes, uint32_t scltoken, OTF_KeyValueList* list )
OTF_Writer_writeEndProcess	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeEndProcess( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process )
OTF_Writer_writeEndProcessKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeEndProcessKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, OTF_KeyValueList* list )
OTF_Writer_writeEnter	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeEnter( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t function, uint32_t process, uint32_t source )
OTF_Writer_writeEnterKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeEnterKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t function, uint32_t process, uint32_t source, OTF_KeyValueList* list )
OTF_Writer_writeEnterSnapshot	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeEnterSnapshot( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint64_t originaltime, uint32_t function, uint32_t process, uint32_t source )
OTF_Writer_writeEnterSnapshotKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeEnterSnapshotKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint64_t originaltime, uint32_t function, uint32_t process, uint32_t source, OTF_KeyValueList* list )
OTF_Writer_writeEventComment	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeEventComment( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, const char* comment )
OTF_Writer_writeEventCommentKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeEventCommentKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, const char* comment, OTF_KeyValueList* list )
OTF_Writer_writeFileGroupOperationSummary	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeFileGroupOperationSummary( OTF_Writer* writer, uint64_t time,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t groupid, uint32_t process, uint64_t nopen, uint64_t nclose, uint64_t nread, uint64_t nwrite, uint64_t nseek, uint64_t bytesread, uint64_t byteswrite )
OTF_Writer_writeFileGroupOperationSummaryKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeFileGroupOperationSummaryKV( OTF_Writer* writer, uint64_t time,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t groupid, uint32_t process, uint64_t nopen, uint64_t nclose, uint64_t nread, uint64_t nwrite, uint64_t nseek, uint64_t bytesread, uint64_t byteswrite, OTF_KeyValueList* list )
OTF_Writer_writeFileOperation	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeFileOperation( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t fileid, uint32_t process, uint64_t handleid, uint32_t operation, uint64_t bytes, uint64_t duration, uint32_t source )
OTF_Writer_writeFileOperationKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeFileOperationKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t fileid, uint32_t process, uint64_t handleid, uint32_t operation, uint64_t bytes, uint64_t duration, uint32_t source, OTF_KeyValueList* list )
OTF_Writer_writeFileOperationSummary	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeFileOperationSummary( OTF_Writer* writer, uint64_t time,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t fileid, uint32_t process, uint64_t nopen, uint64_t nclose, uint64_t nread, uint64_t nwrite, uint64_t nseek, uint64_t bytesread, uint64_t byteswrite )
OTF_Writer_writeFileOperationSummaryKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeFileOperationSummaryKV( OTF_Writer* writer, uint64_t time,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t fileid, uint32_t process, uint64_t nopen, uint64_t nclose, uint64_t nread, uint64_t nwrite, uint64_t nseek, uint64_t bytesread, uint64_t byteswrite, OTF_KeyValueList* list )
OTF_Writer_writeFunctionGroupSummary	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeFunctionGroupSummary( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t functiongroup, uint32_t process, uint64_t count, uint64_t excltime, uint64_t incltime )
OTF_Writer_writeFunctionGroupSummaryKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeFunctionGroupSummaryKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t functiongroup, uint32_t process, uint64_t count, uint64_t excltime, uint64_t incltime, OTF_KeyValueList* list )
OTF_Writer_writeFunctionSummary	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeFunctionSummary( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t function, uint32_t process, uint64_t count, uint64_t excltime, uint64_t incltime )
OTF_Writer_writeFunctionSummaryKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeFunctionSummaryKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t function, uint32_t process, uint64_t count, uint64_t excltime, uint64_t incltime, OTF_KeyValueList* list )
OTF_Writer_writeLeave	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeLeave( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t function, uint32_t process, uint32_t source )
OTF_Writer_writeLeaveKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeLeaveKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t function, uint32_t process, uint32_t source, OTF_KeyValueList* list )
OTF_Writer_writeMarker	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeMarker( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t token, const char* text )
OTF_Writer_writeMarkerKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeMarkerKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t token, const char* text, OTF_KeyValueList* list )
OTF_Writer_writeMessageSummary	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeMessageSummary( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t peer, uint32_t comm, uint32_t tag, uint64_t number_sent, uint64_t number_recved, uint64_t bytes_sent, uint64_t bytes_recved )
OTF_Writer_writeMessageSummaryKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeMessageSummaryKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t peer, uint32_t comm, uint32_t tag, uint64_t number_sent, uint64_t number_recved, uint64_t bytes_sent, uint64_t bytes_recved, OTF_KeyValueList* list )
OTF_Writer_writeNoOpKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeNoOpKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, OTF_KeyValueList* list )
OTF_Writer_writeOpenFileSnapshot	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeOpenFileSnapshot( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint64_t originaltime, uint32_t fileid, uint32_t process, uint64_t handleid, uint32_t source )
OTF_Writer_writeOpenFileSnapshotKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeOpenFileSnapshotKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint64_t originaltime, uint32_t fileid, uint32_t process, uint64_t handleid, uint32_t source, OTF_KeyValueList* list )
OTF_Writer_writeOtfVersion	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeOtfVersion( OTF_Writer* writer, uint32_t stream );$/;"	p	signature:( OTF_Writer* writer, uint32_t stream )
OTF_Writer_writeRMAEnd	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeRMAEnd( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t remote, uint32_t communicator, uint32_t tag, uint32_t scltoken )
OTF_Writer_writeRMAEndKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeRMAEndKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t remote, uint32_t communicator, uint32_t tag, uint32_t scltoken, OTF_KeyValueList* list )
OTF_Writer_writeRMAGet	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeRMAGet( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t origin, uint32_t target, uint32_t communicator, uint32_t tag, uint64_t bytes, uint32_t scltoken )
OTF_Writer_writeRMAGetKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeRMAGetKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t origin, uint32_t target, uint32_t communicator, uint32_t tag, uint64_t bytes, uint32_t scltoken, OTF_KeyValueList* list )
OTF_Writer_writeRMAPut	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeRMAPut( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t origin, uint32_t target, uint32_t communicator, uint32_t tag, uint64_t bytes, uint32_t scltoken )
OTF_Writer_writeRMAPutKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeRMAPutKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t origin, uint32_t target, uint32_t communicator, uint32_t tag, uint64_t bytes, uint32_t scltoken, OTF_KeyValueList* list )
OTF_Writer_writeRMAPutRemoteEnd	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeRMAPutRemoteEnd( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t origin, uint32_t target, uint32_t communicator, uint32_t tag, uint64_t bytes, uint32_t scltoken )
OTF_Writer_writeRMAPutRemoteEndKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeRMAPutRemoteEndKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, uint32_t origin, uint32_t target, uint32_t communicator, uint32_t tag, uint64_t bytes, uint32_t scltoken, OTF_KeyValueList* list )
OTF_Writer_writeRecvMsg	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeRecvMsg( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t receiver, uint32_t sender, uint32_t procGroup, uint32_t tag, uint32_t length, uint32_t source )
OTF_Writer_writeRecvMsgKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeRecvMsgKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t receiver, uint32_t sender, uint32_t procGroup, uint32_t tag, uint32_t length, uint32_t source, OTF_KeyValueList* list )
OTF_Writer_writeSendMsg	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeSendMsg( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t sender, uint32_t receiver, uint32_t procGroup, uint32_t tag, uint32_t length, uint32_t source )
OTF_Writer_writeSendMsgKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeSendMsgKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t sender, uint32_t receiver, uint32_t procGroup, uint32_t tag, uint32_t length, uint32_t source, OTF_KeyValueList* list )
OTF_Writer_writeSendSnapshot	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeSendSnapshot( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint64_t originaltime, uint32_t sender, uint32_t receiver, uint32_t procGroup, uint32_t tag, uint32_t length, uint32_t source )
OTF_Writer_writeSendSnapshotKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeSendSnapshotKV( OTF_Writer* writer,$/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint64_t originaltime, uint32_t sender, uint32_t receiver, uint32_t procGroup, uint32_t tag, uint32_t length, uint32_t source, OTF_KeyValueList* list )
OTF_Writer_writeSnapshotComment	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeSnapshotComment( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, const char* comment )
OTF_Writer_writeSnapshotCommentKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeSnapshotCommentKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, const char* comment, OTF_KeyValueList* list )
OTF_Writer_writeSummaryComment	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeSummaryComment( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, const char* comment )
OTF_Writer_writeSummaryCommentKV	vampirtrace/open-trace-format/OTF_Writer.h	/^int OTF_Writer_writeSummaryCommentKV( OTF_Writer* writer, $/;"	p	signature:( OTF_Writer* writer, uint64_t time, uint32_t process, const char* comment, OTF_KeyValueList* list )
OTF_ZBUFFER_DEFAULTSIZE	vampirtrace/open-trace-format/OTF_Definitions.h	289;"	d
OTF_fileExists	vampirtrace/open-trace-format/OTF_Filenames.h	/^int OTF_fileExists( const char* filename );$/;"	p	signature:( const char* filename )
OTF_getFilename	vampirtrace/open-trace-format/OTF_Filenames.h	/^char* OTF_getFilename( const char* namestub, uint32_t id, OTF_FileType type, $/;"	p	signature:( const char* namestub, uint32_t id, OTF_FileType type, unsigned int l, char* ret )
OTF_inttypes.h	vampirtrace/open-trace-format/OTF_inttypes.h	1;"	F
OTF_inttypes_unix.h	vampirtrace/open-trace-format/OTF_inttypes_unix.h	1;"	F
OTF_stripFilename	vampirtrace/open-trace-format/OTF_Filenames.h	/^char* OTF_stripFilename( const char* filename );$/;"	p	signature:( const char* filename )
Offset	openmpi/ompi/mpi/cxx/mpicxx.h	/^  typedef MPI_Offset Offset;$/;"	t	namespace:MPI
Op	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Op;$/;"	x
Op	openmpi/ompi/mpi/cxx/op.h	/^  Op();$/;"	p	class:Op	access:public	signature:()
Op	openmpi/ompi/mpi/cxx/op.h	/^  Op(MPI_Op i);$/;"	p	class:Op	access:public	signature:(MPI_Op i)
Op	openmpi/ompi/mpi/cxx/op.h	/^  Op(const Op& op);$/;"	p	class:Op	access:public	signature:(const Op& op)
Op	openmpi/ompi/mpi/cxx/op.h	/^class Op {$/;"	c
Op	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Op() : mpi_op(MPI_OP_NULL) { }$/;"	f	class:MPI::Op	signature:()
Op	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Op(MPI_Op i) : mpi_op(i) { }$/;"	f	class:MPI::Op	signature:(MPI_Op i)
Op	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Op(const MPI::Op& op)$/;"	f	class:MPI::Op	signature:(const MPI::Op& op)
Op::Free	openmpi/ompi/mpi/cxx/op.h	/^  virtual void Free();$/;"	p	class:Op	access:public	signature:()
Op::Init	openmpi/ompi/mpi/cxx/op.h	/^  virtual void Init(User_function *func, bool commute);$/;"	p	class:Op	access:public	signature:(User_function *func, bool commute)
Op::Is_commutative	openmpi/ompi/mpi/cxx/op.h	/^  virtual bool Is_commutative(void) const;$/;"	p	class:Op	access:public	signature:(void) const
Op::Op	openmpi/ompi/mpi/cxx/op.h	/^  Op();$/;"	p	class:Op	access:public	signature:()
Op::Op	openmpi/ompi/mpi/cxx/op.h	/^  Op(MPI_Op i);$/;"	p	class:Op	access:public	signature:(MPI_Op i)
Op::Op	openmpi/ompi/mpi/cxx/op.h	/^  Op(const Op& op);$/;"	p	class:Op	access:public	signature:(const Op& op)
Op::Reduce_local	openmpi/ompi/mpi/cxx/op.h	/^  virtual void Reduce_local(const void *inbuf, void *inoutbuf, int count, $/;"	p	class:Op	access:public	signature:(const void *inbuf, void *inoutbuf, int count, const MPI::Datatype& datatype) const
Op::mpi_op	openmpi/ompi/mpi/cxx/op.h	/^  MPI_Op mpi_op;$/;"	m	class:Op	access:protected
Op::operator !=	openmpi/ompi/mpi/cxx/op.h	/^  inline bool operator!= (const Op &a);$/;"	p	class:Op	access:public	signature:(const Op &a)
Op::operator =	openmpi/ompi/mpi/cxx/op.h	/^  Op& operator= (const MPI_Op &i);$/;"	p	class:Op	access:public	signature:(const MPI_Op &i)
Op::operator =	openmpi/ompi/mpi/cxx/op.h	/^  Op& operator=(const Op& op);$/;"	p	class:Op	access:public	signature:(const Op& op)
Op::operator ==	openmpi/ompi/mpi/cxx/op.h	/^  inline bool operator== (const Op &a);$/;"	p	class:Op	access:public	signature:(const Op &a)
Op::operator MPI_Op	openmpi/ompi/mpi/cxx/op.h	/^  inline operator MPI_Op () const;$/;"	p	class:Op	access:public	signature:() const
Op::~Op	openmpi/ompi/mpi/cxx/op.h	/^  virtual ~Op();$/;"	p	class:Op	access:public	signature:()
Open	openmpi/ompi/mpi/cxx/file.h	/^  static MPI::File Open(const MPI::Intracomm& comm,$/;"	p	class:File	access:public	signature:(const MPI::Intracomm& comm, const char* filename, int amode, const MPI::Info& info)
Open	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Open(const MPI::Intracomm& comm,$/;"	f	class:MPI::File	signature:(const MPI::Intracomm& comm, const char* filename, int amode, const MPI::Info& info)
Open_port	openmpi/ompi/mpi/cxx/functions.h	/^Open_port(const Info& info, char* port_name);$/;"	p	signature:(const Info& info, char* port_name)
Open_port	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Open_port(const MPI::Info& info, char* port_name)$/;"	f	class:MPI	signature:(const MPI::Info& info, char* port_name)
PACKED	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype PACKED;$/;"	x
PARSE_ERROR	vampirtrace/open-trace-format/OTF_RBuffer.h	31;"	d
PE_size	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexd_prod_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
PE_size	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexd_sum_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
PE_size	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexf_prod_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
PE_size	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexf_sum_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
PE_size	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexd_prod_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
PE_size	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexd_sum_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
PE_size	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexf_prod_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
PE_size	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexf_sum_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
PE_start	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexd_prod_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
PE_start	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexd_sum_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
PE_start	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexf_prod_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
PE_start	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexf_sum_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
PE_start	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexd_prod_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
PE_start	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexd_sum_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
PE_start	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexf_prod_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
PE_start	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexf_sum_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
PI_SIZEOF	mpif-sizeof.h	/^! If you want support for MPI_SIZEOF, please use a different Fortran$/;"	v
PLATFORM_COMPILER_COMPAQ	mpi_portable_platform.h	188;"	d
PLATFORM_COMPILER_COMPAQ_C	mpi_portable_platform.h	194;"	d
PLATFORM_COMPILER_COMPAQ_CXX	mpi_portable_platform.h	192;"	d
PLATFORM_COMPILER_CRAY	mpi_portable_platform.h	259;"	d
PLATFORM_COMPILER_CRAY_C	mpi_portable_platform.h	265;"	d
PLATFORM_COMPILER_CRAY_CXX	mpi_portable_platform.h	263;"	d
PLATFORM_COMPILER_FAMILYID	mpi_portable_platform.h	106;"	d
PLATFORM_COMPILER_FAMILYID	mpi_portable_platform.h	119;"	d
PLATFORM_COMPILER_FAMILYID	mpi_portable_platform.h	177;"	d
PLATFORM_COMPILER_FAMILYID	mpi_portable_platform.h	190;"	d
PLATFORM_COMPILER_FAMILYID	mpi_portable_platform.h	209;"	d
PLATFORM_COMPILER_FAMILYID	mpi_portable_platform.h	226;"	d
PLATFORM_COMPILER_FAMILYID	mpi_portable_platform.h	244;"	d
PLATFORM_COMPILER_FAMILYID	mpi_portable_platform.h	261;"	d
PLATFORM_COMPILER_FAMILYID	mpi_portable_platform.h	281;"	d
PLATFORM_COMPILER_FAMILYID	mpi_portable_platform.h	291;"	d
PLATFORM_COMPILER_FAMILYID	mpi_portable_platform.h	301;"	d
PLATFORM_COMPILER_FAMILYID	mpi_portable_platform.h	311;"	d
PLATFORM_COMPILER_FAMILYID	mpi_portable_platform.h	322;"	d
PLATFORM_COMPILER_FAMILYID	mpi_portable_platform.h	332;"	d
PLATFORM_COMPILER_FAMILYID	mpi_portable_platform.h	350;"	d
PLATFORM_COMPILER_FAMILYID	mpi_portable_platform.h	383;"	d
PLATFORM_COMPILER_FAMILYID	mpi_portable_platform.h	81;"	d
PLATFORM_COMPILER_FAMILYNAME	mpi_portable_platform.h	105;"	d
PLATFORM_COMPILER_FAMILYNAME	mpi_portable_platform.h	118;"	d
PLATFORM_COMPILER_FAMILYNAME	mpi_portable_platform.h	176;"	d
PLATFORM_COMPILER_FAMILYNAME	mpi_portable_platform.h	189;"	d
PLATFORM_COMPILER_FAMILYNAME	mpi_portable_platform.h	208;"	d
PLATFORM_COMPILER_FAMILYNAME	mpi_portable_platform.h	225;"	d
PLATFORM_COMPILER_FAMILYNAME	mpi_portable_platform.h	243;"	d
PLATFORM_COMPILER_FAMILYNAME	mpi_portable_platform.h	260;"	d
PLATFORM_COMPILER_FAMILYNAME	mpi_portable_platform.h	280;"	d
PLATFORM_COMPILER_FAMILYNAME	mpi_portable_platform.h	290;"	d
PLATFORM_COMPILER_FAMILYNAME	mpi_portable_platform.h	300;"	d
PLATFORM_COMPILER_FAMILYNAME	mpi_portable_platform.h	310;"	d
PLATFORM_COMPILER_FAMILYNAME	mpi_portable_platform.h	321;"	d
PLATFORM_COMPILER_FAMILYNAME	mpi_portable_platform.h	331;"	d
PLATFORM_COMPILER_FAMILYNAME	mpi_portable_platform.h	349;"	d
PLATFORM_COMPILER_FAMILYNAME	mpi_portable_platform.h	382;"	d
PLATFORM_COMPILER_FAMILYNAME	mpi_portable_platform.h	80;"	d
PLATFORM_COMPILER_GNU	mpi_portable_platform.h	348;"	d
PLATFORM_COMPILER_GNU_C	mpi_portable_platform.h	354;"	d
PLATFORM_COMPILER_GNU_CXX	mpi_portable_platform.h	352;"	d
PLATFORM_COMPILER_HP	mpi_portable_platform.h	224;"	d
PLATFORM_COMPILER_HP_C	mpi_portable_platform.h	230;"	d
PLATFORM_COMPILER_HP_CXX	mpi_portable_platform.h	228;"	d
PLATFORM_COMPILER_INTEL_C	mpi_portable_platform.h	85;"	d
PLATFORM_COMPILER_INTEL_CXX	mpi_portable_platform.h	83;"	d
PLATFORM_COMPILER_KAI	mpi_portable_platform.h	279;"	d
PLATFORM_COMPILER_KAI_C	mpi_portable_platform.h	285;"	d
PLATFORM_COMPILER_KAI_CXX	mpi_portable_platform.h	283;"	d
PLATFORM_COMPILER_LCC	mpi_portable_platform.h	330;"	d
PLATFORM_COMPILER_LCC_C	mpi_portable_platform.h	336;"	d
PLATFORM_COMPILER_LCC_CXX	mpi_portable_platform.h	334;"	d
PLATFORM_COMPILER_MICROSOFT	mpi_portable_platform.h	309;"	d
PLATFORM_COMPILER_MICROSOFT_C	mpi_portable_platform.h	315;"	d
PLATFORM_COMPILER_MICROSOFT_CXX	mpi_portable_platform.h	313;"	d
PLATFORM_COMPILER_MTA	mpi_portable_platform.h	289;"	d
PLATFORM_COMPILER_MTA_C	mpi_portable_platform.h	295;"	d
PLATFORM_COMPILER_MTA_CXX	mpi_portable_platform.h	293;"	d
PLATFORM_COMPILER_NECSX	mpi_portable_platform.h	299;"	d
PLATFORM_COMPILER_NECSX_C	mpi_portable_platform.h	305;"	d
PLATFORM_COMPILER_NECSX_CXX	mpi_portable_platform.h	303;"	d
PLATFORM_COMPILER_PATHSCALE	mpi_portable_platform.h	104;"	d
PLATFORM_COMPILER_PATHSCALE_C	mpi_portable_platform.h	110;"	d
PLATFORM_COMPILER_PATHSCALE_CXX	mpi_portable_platform.h	108;"	d
PLATFORM_COMPILER_PGI	mpi_portable_platform.h	117;"	d
PLATFORM_COMPILER_PGI_C	mpi_portable_platform.h	123;"	d
PLATFORM_COMPILER_PGI_CXX	mpi_portable_platform.h	121;"	d
PLATFORM_COMPILER_SGI	mpi_portable_platform.h	242;"	d
PLATFORM_COMPILER_SGI_C	mpi_portable_platform.h	248;"	d
PLATFORM_COMPILER_SGI_CXX	mpi_portable_platform.h	246;"	d
PLATFORM_COMPILER_SUN	mpi_portable_platform.h	207;"	d
PLATFORM_COMPILER_SUN_C	mpi_portable_platform.h	213;"	d
PLATFORM_COMPILER_SUN_CXX	mpi_portable_platform.h	211;"	d
PLATFORM_COMPILER_TINY	mpi_portable_platform.h	320;"	d
PLATFORM_COMPILER_TINY_C	mpi_portable_platform.h	326;"	d
PLATFORM_COMPILER_TINY_CXX	mpi_portable_platform.h	324;"	d
PLATFORM_COMPILER_UNKNOWN	mpi_portable_platform.h	340;"	d
PLATFORM_COMPILER_UNKNOWN	mpi_portable_platform.h	346;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	112;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	128;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	131;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	183;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	197;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	199;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	216;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	218;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	233;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	235;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	251;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	253;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	268;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	271;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	317;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	357;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	360;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	363;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	388;"	d
PLATFORM_COMPILER_VERSION	mpi_portable_platform.h	98;"	d
PLATFORM_COMPILER_VERSION_INT	mpi_portable_platform.h	184;"	d
PLATFORM_COMPILER_VERSION_INT	mpi_portable_platform.h	202;"	d
PLATFORM_COMPILER_VERSION_INT	mpi_portable_platform.h	220;"	d
PLATFORM_COMPILER_VERSION_INT	mpi_portable_platform.h	237;"	d
PLATFORM_COMPILER_VERSION_INT	mpi_portable_platform.h	255;"	d
PLATFORM_COMPILER_VERSION_INT	mpi_portable_platform.h	396;"	d
PLATFORM_COMPILER_VERSION_INT	mpi_portable_platform.h	94;"	d
PLATFORM_COMPILER_VERSION_STR	mpi_portable_platform.h	100;"	d
PLATFORM_COMPILER_VERSION_STR	mpi_portable_platform.h	114;"	d
PLATFORM_COMPILER_VERSION_STR	mpi_portable_platform.h	129;"	d
PLATFORM_COMPILER_VERSION_STR	mpi_portable_platform.h	133;"	d
PLATFORM_COMPILER_VERSION_STR	mpi_portable_platform.h	275;"	d
PLATFORM_COMPILER_VERSION_STR	mpi_portable_platform.h	366;"	d
PLATFORM_COMPILER_VERSION_STR	mpi_portable_platform.h	392;"	d
PLATFORM_COMPILER_XLC	mpi_portable_platform.h	175;"	d
PLATFORM_COMPILER_XLC_C	mpi_portable_platform.h	181;"	d
PLATFORM_COMPILER_XLC_CXX	mpi_portable_platform.h	179;"	d
PMPI_Abort	mpi.h	/^OMPI_DECLSPEC  int PMPI_Abort(MPI_Comm comm, int errorcode);$/;"	p	signature:(MPI_Comm comm, int errorcode)
PMPI_Accumulate	mpi.h	/^OMPI_DECLSPEC  int PMPI_Accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype,$/;"	p	signature:(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win)
PMPI_Add_error_class	mpi.h	/^OMPI_DECLSPEC  int PMPI_Add_error_class(int *errorclass);$/;"	p	signature:(int *errorclass)
PMPI_Add_error_code	mpi.h	/^OMPI_DECLSPEC  int PMPI_Add_error_code(int errorclass, int *errorcode);$/;"	p	signature:(int errorclass, int *errorcode)
PMPI_Add_error_string	mpi.h	/^OMPI_DECLSPEC  int PMPI_Add_error_string(int errorcode, const char *string);$/;"	p	signature:(int errorcode, const char *string)
PMPI_Allgather	mpi.h	/^OMPI_DECLSPEC  int PMPI_Allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm)
PMPI_Allgatherv	mpi.h	/^OMPI_DECLSPEC  int PMPI_Allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm)
PMPI_Alloc_mem	mpi.h	/^OMPI_DECLSPEC  int PMPI_Alloc_mem(MPI_Aint size, MPI_Info info,$/;"	p	signature:(MPI_Aint size, MPI_Info info, void *baseptr)
PMPI_Allreduce	mpi.h	/^OMPI_DECLSPEC  int PMPI_Allreduce(const void *sendbuf, void *recvbuf, int count,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)
PMPI_Alltoall	mpi.h	/^OMPI_DECLSPEC  int PMPI_Alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm)
PMPI_Alltoallv	mpi.h	/^OMPI_DECLSPEC  int PMPI_Alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[],$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm)
PMPI_Alltoallw	mpi.h	/^OMPI_DECLSPEC  int PMPI_Alltoallw(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[],$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm)
PMPI_Barrier	mpi.h	/^OMPI_DECLSPEC  int PMPI_Barrier(MPI_Comm comm);$/;"	p	signature:(MPI_Comm comm)
PMPI_Bcast	mpi.h	/^OMPI_DECLSPEC  int PMPI_Bcast(void *buffer, int count, MPI_Datatype datatype,$/;"	p	signature:(void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm)
PMPI_Bsend	mpi.h	/^OMPI_DECLSPEC  int PMPI_Bsend(const void *buf, int count, MPI_Datatype datatype,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm)
PMPI_Bsend_init	mpi.h	/^OMPI_DECLSPEC  int PMPI_Bsend_init(const void *buf, int count, MPI_Datatype datatype,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request)
PMPI_Buffer_attach	mpi.h	/^OMPI_DECLSPEC  int PMPI_Buffer_attach(void *buffer, int size);$/;"	p	signature:(void *buffer, int size)
PMPI_Buffer_detach	mpi.h	/^OMPI_DECLSPEC  int PMPI_Buffer_detach(void *buffer, int *size);$/;"	p	signature:(void *buffer, int *size)
PMPI_Cancel	mpi.h	/^OMPI_DECLSPEC  int PMPI_Cancel(MPI_Request *request);$/;"	p	signature:(MPI_Request *request)
PMPI_Cart_coords	mpi.h	/^OMPI_DECLSPEC  int PMPI_Cart_coords(MPI_Comm comm, int rank, int maxdims, int coords[]);$/;"	p	signature:(MPI_Comm comm, int rank, int maxdims, int coords[])
PMPI_Cart_create	mpi.h	/^OMPI_DECLSPEC  int PMPI_Cart_create(MPI_Comm old_comm, int ndims, const int dims[],$/;"	p	signature:(MPI_Comm old_comm, int ndims, const int dims[], const int periods[], int reorder, MPI_Comm *comm_cart)
PMPI_Cart_get	mpi.h	/^OMPI_DECLSPEC  int PMPI_Cart_get(MPI_Comm comm, int maxdims, int dims[],$/;"	p	signature:(MPI_Comm comm, int maxdims, int dims[], int periods[], int coords[])
PMPI_Cart_map	mpi.h	/^OMPI_DECLSPEC  int PMPI_Cart_map(MPI_Comm comm, int ndims, const int dims[],$/;"	p	signature:(MPI_Comm comm, int ndims, const int dims[], const int periods[], int *newrank)
PMPI_Cart_rank	mpi.h	/^OMPI_DECLSPEC  int PMPI_Cart_rank(MPI_Comm comm, const int coords[], int *rank);$/;"	p	signature:(MPI_Comm comm, const int coords[], int *rank)
PMPI_Cart_shift	mpi.h	/^OMPI_DECLSPEC  int PMPI_Cart_shift(MPI_Comm comm, int direction, int disp,$/;"	p	signature:(MPI_Comm comm, int direction, int disp, int *rank_source, int *rank_dest)
PMPI_Cart_sub	mpi.h	/^OMPI_DECLSPEC  int PMPI_Cart_sub(MPI_Comm comm, const int remain_dims[], MPI_Comm *new_comm);$/;"	p	signature:(MPI_Comm comm, const int remain_dims[], MPI_Comm *new_comm)
PMPI_Cartdim_get	mpi.h	/^OMPI_DECLSPEC  int PMPI_Cartdim_get(MPI_Comm comm, int *ndims);$/;"	p	signature:(MPI_Comm comm, int *ndims)
PMPI_Close_port	mpi.h	/^OMPI_DECLSPEC  int PMPI_Close_port(const char *port_name);$/;"	p	signature:(const char *port_name)
PMPI_Comm_accept	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_accept(const char *port_name, MPI_Info info, int root,$/;"	p	signature:(const char *port_name, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *newcomm)
PMPI_Comm_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint PMPI_Comm_c2f(MPI_Comm comm);$/;"	p	signature:(MPI_Comm comm)
PMPI_Comm_call_errhandler	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_call_errhandler(MPI_Comm comm, int errorcode);$/;"	p	signature:(MPI_Comm comm, int errorcode)
PMPI_Comm_compare	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int *result);$/;"	p	signature:(MPI_Comm comm1, MPI_Comm comm2, int *result)
PMPI_Comm_connect	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_connect(const char *port_name, MPI_Info info, int root,$/;"	p	signature:(const char *port_name, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *newcomm)
PMPI_Comm_create	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_create(MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm);$/;"	p	signature:(MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm)
PMPI_Comm_create_errhandler	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_create_errhandler(MPI_Comm_errhandler_function *function,$/;"	p	signature:(MPI_Comm_errhandler_function *function, MPI_Errhandler *errhandler)
PMPI_Comm_create_group	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_create_group(MPI_Comm comm, MPI_Group group, int tag, MPI_Comm *newcomm);$/;"	p	signature:(MPI_Comm comm, MPI_Group group, int tag, MPI_Comm *newcomm)
PMPI_Comm_create_keyval	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_create_keyval(MPI_Comm_copy_attr_function *comm_copy_attr_fn,$/;"	p	signature:(MPI_Comm_copy_attr_function *comm_copy_attr_fn, MPI_Comm_delete_attr_function *comm_delete_attr_fn, int *comm_keyval, void *extra_state)
PMPI_Comm_delete_attr	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval);$/;"	p	signature:(MPI_Comm comm, int comm_keyval)
PMPI_Comm_disconnect	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_disconnect(MPI_Comm *comm);$/;"	p	signature:(MPI_Comm *comm)
PMPI_Comm_dup	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_dup(MPI_Comm comm, MPI_Comm *newcomm);$/;"	p	signature:(MPI_Comm comm, MPI_Comm *newcomm)
PMPI_Comm_dup_with_info	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_dup_with_info(MPI_Comm comm, MPI_Info info, MPI_Comm *newcomm);$/;"	p	signature:(MPI_Comm comm, MPI_Info info, MPI_Comm *newcomm)
PMPI_Comm_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_Comm PMPI_Comm_f2c(MPI_Fint comm);$/;"	p	signature:(MPI_Fint comm)
PMPI_Comm_free	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_free(MPI_Comm *comm);$/;"	p	signature:(MPI_Comm *comm)
PMPI_Comm_free_keyval	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_free_keyval(int *comm_keyval);$/;"	p	signature:(int *comm_keyval)
PMPI_Comm_get_attr	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_get_attr(MPI_Comm comm, int comm_keyval,$/;"	p	signature:(MPI_Comm comm, int comm_keyval, void *attribute_val, int *flag)
PMPI_Comm_get_errhandler	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_get_errhandler(MPI_Comm comm, MPI_Errhandler *erhandler);$/;"	p	signature:(MPI_Comm comm, MPI_Errhandler *erhandler)
PMPI_Comm_get_info	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_get_info(MPI_Comm comm, MPI_Info *info_used);$/;"	p	signature:(MPI_Comm comm, MPI_Info *info_used)
PMPI_Comm_get_name	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_get_name(MPI_Comm comm, char *comm_name, int *resultlen);$/;"	p	signature:(MPI_Comm comm, char *comm_name, int *resultlen)
PMPI_Comm_get_parent	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_get_parent(MPI_Comm *parent);$/;"	p	signature:(MPI_Comm *parent)
PMPI_Comm_group	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_group(MPI_Comm comm, MPI_Group *group);$/;"	p	signature:(MPI_Comm comm, MPI_Group *group)
PMPI_Comm_idup	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_idup(MPI_Comm comm, MPI_Comm *newcomm, MPI_Request *request);$/;"	p	signature:(MPI_Comm comm, MPI_Comm *newcomm, MPI_Request *request)
PMPI_Comm_join	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_join(int fd, MPI_Comm *intercomm);$/;"	p	signature:(int fd, MPI_Comm *intercomm)
PMPI_Comm_rank	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_rank(MPI_Comm comm, int *rank);$/;"	p	signature:(MPI_Comm comm, int *rank)
PMPI_Comm_remote_group	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_remote_group(MPI_Comm comm, MPI_Group *group);$/;"	p	signature:(MPI_Comm comm, MPI_Group *group)
PMPI_Comm_remote_size	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_remote_size(MPI_Comm comm, int *size);$/;"	p	signature:(MPI_Comm comm, int *size)
PMPI_Comm_set_attr	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, void *attribute_val);$/;"	p	signature:(MPI_Comm comm, int comm_keyval, void *attribute_val)
PMPI_Comm_set_errhandler	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_set_errhandler(MPI_Comm comm, MPI_Errhandler errhandler);$/;"	p	signature:(MPI_Comm comm, MPI_Errhandler errhandler)
PMPI_Comm_set_info	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_set_info(MPI_Comm comm, MPI_Info info);$/;"	p	signature:(MPI_Comm comm, MPI_Info info)
PMPI_Comm_set_name	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_set_name(MPI_Comm comm, const char *comm_name);$/;"	p	signature:(MPI_Comm comm, const char *comm_name)
PMPI_Comm_size	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_size(MPI_Comm comm, int *size);$/;"	p	signature:(MPI_Comm comm, int *size)
PMPI_Comm_spawn	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_spawn(const char *command, char *argv[], int maxprocs, MPI_Info info,$/;"	p	signature:(const char *command, char *argv[], int maxprocs, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[])
PMPI_Comm_spawn_multiple	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_spawn_multiple(int count, char *array_of_commands[], char **array_of_argv[],$/;"	p	signature:(int count, char *array_of_commands[], char **array_of_argv[], const int array_of_maxprocs[], const MPI_Info array_of_info[], int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[])
PMPI_Comm_split	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm *newcomm);$/;"	p	signature:(MPI_Comm comm, int color, int key, MPI_Comm *newcomm)
PMPI_Comm_split_type	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_split_type(MPI_Comm comm, int split_type, int key, MPI_Info info, MPI_Comm *newcomm);$/;"	p	signature:(MPI_Comm comm, int split_type, int key, MPI_Info info, MPI_Comm *newcomm)
PMPI_Comm_test_inter	mpi.h	/^OMPI_DECLSPEC  int PMPI_Comm_test_inter(MPI_Comm comm, int *flag);$/;"	p	signature:(MPI_Comm comm, int *flag)
PMPI_Compare_and_swap	mpi.h	/^OMPI_DECLSPEC  int PMPI_Compare_and_swap(void *origin_addr, void *compare_addr,$/;"	p	signature:(void *origin_addr, void *compare_addr, void *result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Win win)
PMPI_Dims_create	mpi.h	/^OMPI_DECLSPEC  int PMPI_Dims_create(int nnodes, int ndims, int dims[]);$/;"	p	signature:(int nnodes, int ndims, int dims[])
PMPI_Dist_graph_create	mpi.h	/^OMPI_DECLSPEC  int PMPI_Dist_graph_create(MPI_Comm comm_old, int n, const int nodes[],$/;"	p	signature:(MPI_Comm comm_old, int n, const int nodes[], const int degrees[], const int targets[], const int weights[], MPI_Info info, int reorder, MPI_Comm * newcomm)
PMPI_Dist_graph_create_adjacent	mpi.h	/^OMPI_DECLSPEC  int PMPI_Dist_graph_create_adjacent(MPI_Comm comm_old,$/;"	p	signature:(MPI_Comm comm_old, int indegree, const int sources[], const int sourceweights[], int outdegree, const int destinations[], const int destweights[], MPI_Info info, int reorder, MPI_Comm *comm_dist_graph)
PMPI_Dist_graph_neighbors	mpi.h	/^OMPI_DECLSPEC int PMPI_Dist_graph_neighbors(MPI_Comm comm, int maxindegree,$/;"	p	signature:(MPI_Comm comm, int maxindegree, int sources[], int sourceweights[], int maxoutdegree, int destinations[], int destweights[])
PMPI_Dist_graph_neighbors_count	mpi.h	/^OMPI_DECLSPEC  int PMPI_Dist_graph_neighbors_count(MPI_Comm comm,$/;"	p	signature:(MPI_Comm comm, int *inneighbors, int *outneighbors, int *weighted)
PMPI_Errhandler_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint PMPI_Errhandler_c2f(MPI_Errhandler errhandler);$/;"	p	signature:(MPI_Errhandler errhandler)
PMPI_Errhandler_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_Errhandler PMPI_Errhandler_f2c(MPI_Fint errhandler);$/;"	p	signature:(MPI_Fint errhandler)
PMPI_Errhandler_free	mpi.h	/^OMPI_DECLSPEC  int PMPI_Errhandler_free(MPI_Errhandler *errhandler);$/;"	p	signature:(MPI_Errhandler *errhandler)
PMPI_Error_class	mpi.h	/^OMPI_DECLSPEC  int PMPI_Error_class(int errorcode, int *errorclass);$/;"	p	signature:(int errorcode, int *errorclass)
PMPI_Error_string	mpi.h	/^OMPI_DECLSPEC  int PMPI_Error_string(int errorcode, char *string, int *resultlen);$/;"	p	signature:(int errorcode, char *string, int *resultlen)
PMPI_Exscan	mpi.h	/^OMPI_DECLSPEC  int PMPI_Exscan(const void *sendbuf, void *recvbuf, int count,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)
PMPI_Fetch_and_op	mpi.h	/^OMPI_DECLSPEC  int PMPI_Fetch_and_op(void *origin_addr, void *result_addr, MPI_Datatype datatype,$/;"	p	signature:(void *origin_addr, void *result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Op op, MPI_Win win)
PMPI_File_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint PMPI_File_c2f(MPI_File file);$/;"	p	signature:(MPI_File file)
PMPI_File_call_errhandler	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_call_errhandler(MPI_File fh, int errorcode);$/;"	p	signature:(MPI_File fh, int errorcode)
PMPI_File_close	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_close(MPI_File *fh);$/;"	p	signature:(MPI_File *fh)
PMPI_File_create_errhandler	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_create_errhandler(MPI_File_errhandler_function *function,$/;"	p	signature:(MPI_File_errhandler_function *function, MPI_Errhandler *errhandler)
PMPI_File_delete	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_delete(const char *filename, MPI_Info info);$/;"	p	signature:(const char *filename, MPI_Info info)
PMPI_File_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_File PMPI_File_f2c(MPI_Fint file);$/;"	p	signature:(MPI_Fint file)
PMPI_File_get_amode	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_get_amode(MPI_File fh, int *amode);$/;"	p	signature:(MPI_File fh, int *amode)
PMPI_File_get_atomicity	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_get_atomicity(MPI_File fh, int *flag);$/;"	p	signature:(MPI_File fh, int *flag)
PMPI_File_get_byte_offset	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_get_byte_offset(MPI_File fh, MPI_Offset offset,$/;"	p	signature:(MPI_File fh, MPI_Offset offset, MPI_Offset *disp)
PMPI_File_get_errhandler	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_get_errhandler( MPI_File file, MPI_Errhandler *errhandler);$/;"	p	signature:( MPI_File file, MPI_Errhandler *errhandler)
PMPI_File_get_group	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_get_group(MPI_File fh, MPI_Group *group);$/;"	p	signature:(MPI_File fh, MPI_Group *group)
PMPI_File_get_info	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_get_info(MPI_File fh, MPI_Info *info_used);$/;"	p	signature:(MPI_File fh, MPI_Info *info_used)
PMPI_File_get_position	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_get_position(MPI_File fh, MPI_Offset *offset);$/;"	p	signature:(MPI_File fh, MPI_Offset *offset)
PMPI_File_get_position_shared	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_get_position_shared(MPI_File fh, MPI_Offset *offset);$/;"	p	signature:(MPI_File fh, MPI_Offset *offset)
PMPI_File_get_size	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_get_size(MPI_File fh, MPI_Offset *size);$/;"	p	signature:(MPI_File fh, MPI_Offset *size)
PMPI_File_get_type_extent	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_get_type_extent(MPI_File fh, MPI_Datatype datatype,$/;"	p	signature:(MPI_File fh, MPI_Datatype datatype, MPI_Aint *extent)
PMPI_File_get_view	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_get_view(MPI_File fh, MPI_Offset *disp,$/;"	p	signature:(MPI_File fh, MPI_Offset *disp, MPI_Datatype *etype, MPI_Datatype *filetype, char *datarep)
PMPI_File_iread	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_iread(MPI_File fh, void *buf, int count,$/;"	p	signature:(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *request)
PMPI_File_iread_at	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_iread_at(MPI_File fh, MPI_Offset offset, void *buf,$/;"	p	signature:(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Request *request)
PMPI_File_iread_shared	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_iread_shared(MPI_File fh, void *buf, int count,$/;"	p	signature:(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *request)
PMPI_File_iwrite	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_iwrite(MPI_File fh, const void *buf, int count,$/;"	p	signature:(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request)
PMPI_File_iwrite_at	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_iwrite_at(MPI_File fh, MPI_Offset offset, const void *buf,$/;"	p	signature:(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request)
PMPI_File_iwrite_shared	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_iwrite_shared(MPI_File fh, const void *buf, int count,$/;"	p	signature:(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request)
PMPI_File_open	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_open(MPI_Comm comm, const char *filename, int amode,$/;"	p	signature:(MPI_Comm comm, const char *filename, int amode, MPI_Info info, MPI_File *fh)
PMPI_File_preallocate	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_preallocate(MPI_File fh, MPI_Offset size);$/;"	p	signature:(MPI_File fh, MPI_Offset size)
PMPI_File_read	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_read(MPI_File fh, void *buf, int count,$/;"	p	signature:(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
PMPI_File_read_all	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_read_all(MPI_File fh, void *buf, int count,$/;"	p	signature:(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
PMPI_File_read_all_begin	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_read_all_begin(MPI_File fh, void *buf, int count,$/;"	p	signature:(MPI_File fh, void *buf, int count, MPI_Datatype datatype)
PMPI_File_read_all_end	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_read_all_end(MPI_File fh, void *buf, MPI_Status *status);$/;"	p	signature:(MPI_File fh, void *buf, MPI_Status *status)
PMPI_File_read_at	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_read_at(MPI_File fh, MPI_Offset offset, void *buf,$/;"	p	signature:(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
PMPI_File_read_at_all	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_read_at_all(MPI_File fh, MPI_Offset offset, void *buf,$/;"	p	signature:(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
PMPI_File_read_at_all_begin	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_read_at_all_begin(MPI_File fh, MPI_Offset offset, void *buf,$/;"	p	signature:(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype)
PMPI_File_read_at_all_end	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_read_at_all_end(MPI_File fh, void *buf, MPI_Status *status);$/;"	p	signature:(MPI_File fh, void *buf, MPI_Status *status)
PMPI_File_read_ordered	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_read_ordered(MPI_File fh, void *buf, int count,$/;"	p	signature:(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
PMPI_File_read_ordered_begin	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_read_ordered_begin(MPI_File fh, void *buf, int count,$/;"	p	signature:(MPI_File fh, void *buf, int count, MPI_Datatype datatype)
PMPI_File_read_ordered_end	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_read_ordered_end(MPI_File fh, void *buf, MPI_Status *status);$/;"	p	signature:(MPI_File fh, void *buf, MPI_Status *status)
PMPI_File_read_shared	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_read_shared(MPI_File fh, void *buf, int count,$/;"	p	signature:(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
PMPI_File_seek	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_seek(MPI_File fh, MPI_Offset offset, int whence);$/;"	p	signature:(MPI_File fh, MPI_Offset offset, int whence)
PMPI_File_seek_shared	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_seek_shared(MPI_File fh, MPI_Offset offset, int whence);$/;"	p	signature:(MPI_File fh, MPI_Offset offset, int whence)
PMPI_File_set_atomicity	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_set_atomicity(MPI_File fh, int flag);$/;"	p	signature:(MPI_File fh, int flag)
PMPI_File_set_errhandler	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_set_errhandler( MPI_File file, MPI_Errhandler errhandler);$/;"	p	signature:( MPI_File file, MPI_Errhandler errhandler)
PMPI_File_set_info	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_set_info(MPI_File fh, MPI_Info info);$/;"	p	signature:(MPI_File fh, MPI_Info info)
PMPI_File_set_size	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_set_size(MPI_File fh, MPI_Offset size);$/;"	p	signature:(MPI_File fh, MPI_Offset size)
PMPI_File_set_view	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_set_view(MPI_File fh, MPI_Offset disp, MPI_Datatype etype,$/;"	p	signature:(MPI_File fh, MPI_Offset disp, MPI_Datatype etype, MPI_Datatype filetype, const char *datarep, MPI_Info info)
PMPI_File_sync	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_sync(MPI_File fh);$/;"	p	signature:(MPI_File fh)
PMPI_File_write	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_write(MPI_File fh, const void *buf, int count,$/;"	p	signature:(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
PMPI_File_write_all	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_write_all(MPI_File fh, const void *buf, int count,$/;"	p	signature:(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
PMPI_File_write_all_begin	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_write_all_begin(MPI_File fh, const void *buf, int count,$/;"	p	signature:(MPI_File fh, const void *buf, int count, MPI_Datatype datatype)
PMPI_File_write_all_end	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_write_all_end(MPI_File fh, const void *buf, MPI_Status *status);$/;"	p	signature:(MPI_File fh, const void *buf, MPI_Status *status)
PMPI_File_write_at	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_write_at(MPI_File fh, MPI_Offset offset, const void *buf,$/;"	p	signature:(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
PMPI_File_write_at_all	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_write_at_all(MPI_File fh, MPI_Offset offset, const void *buf,$/;"	p	signature:(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
PMPI_File_write_at_all_begin	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_write_at_all_begin(MPI_File fh, MPI_Offset offset, const void *buf,$/;"	p	signature:(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype)
PMPI_File_write_at_all_end	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_write_at_all_end(MPI_File fh, const void *buf, MPI_Status *status);$/;"	p	signature:(MPI_File fh, const void *buf, MPI_Status *status)
PMPI_File_write_ordered	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_write_ordered(MPI_File fh, const void *buf, int count,$/;"	p	signature:(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
PMPI_File_write_ordered_begin	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_write_ordered_begin(MPI_File fh, const void *buf, int count,$/;"	p	signature:(MPI_File fh, const void *buf, int count, MPI_Datatype datatype)
PMPI_File_write_ordered_end	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_write_ordered_end(MPI_File fh, const void *buf, MPI_Status *status);$/;"	p	signature:(MPI_File fh, const void *buf, MPI_Status *status)
PMPI_File_write_shared	mpi.h	/^OMPI_DECLSPEC  int PMPI_File_write_shared(MPI_File fh, const void *buf, int count,$/;"	p	signature:(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status)
PMPI_Finalize	mpi.h	/^OMPI_DECLSPEC  int PMPI_Finalize(void);$/;"	p	signature:(void)
PMPI_Finalized	mpi.h	/^OMPI_DECLSPEC  int PMPI_Finalized(int *flag);$/;"	p	signature:(int *flag)
PMPI_Free_mem	mpi.h	/^OMPI_DECLSPEC  int PMPI_Free_mem(void *base);$/;"	p	signature:(void *base)
PMPI_Gather	mpi.h	/^OMPI_DECLSPEC  int PMPI_Gather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm)
PMPI_Gatherv	mpi.h	/^OMPI_DECLSPEC  int PMPI_Gatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, int root, MPI_Comm comm)
PMPI_Get	mpi.h	/^OMPI_DECLSPEC  int PMPI_Get(void *origin_addr, int origin_count,$/;"	p	signature:(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win)
PMPI_Get_accumulate	mpi.h	/^OMPI_DECLSPEC  int PMPI_Get_accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype,$/;"	p	signature:(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, void *result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win)
PMPI_Get_address	mpi.h	/^OMPI_DECLSPEC  int PMPI_Get_address(const void *location, MPI_Aint *address);$/;"	p	signature:(const void *location, MPI_Aint *address)
PMPI_Get_count	mpi.h	/^OMPI_DECLSPEC  int PMPI_Get_count(const MPI_Status *status, MPI_Datatype datatype, int *count);$/;"	p	signature:(const MPI_Status *status, MPI_Datatype datatype, int *count)
PMPI_Get_elements	mpi.h	/^OMPI_DECLSPEC  int PMPI_Get_elements(const MPI_Status *status, MPI_Datatype datatype,$/;"	p	signature:(const MPI_Status *status, MPI_Datatype datatype, int *count)
PMPI_Get_elements_x	mpi.h	/^OMPI_DECLSPEC  int PMPI_Get_elements_x(const MPI_Status *status, MPI_Datatype datatype,$/;"	p	signature:(const MPI_Status *status, MPI_Datatype datatype, MPI_Count *count)
PMPI_Get_library_version	mpi.h	/^OMPI_DECLSPEC  int PMPI_Get_library_version(char *version, int *resultlen);$/;"	p	signature:(char *version, int *resultlen)
PMPI_Get_processor_name	mpi.h	/^OMPI_DECLSPEC  int PMPI_Get_processor_name(char *name, int *resultlen);$/;"	p	signature:(char *name, int *resultlen)
PMPI_Get_version	mpi.h	/^OMPI_DECLSPEC  int PMPI_Get_version(int *version, int *subversion);$/;"	p	signature:(int *version, int *subversion)
PMPI_Graph_create	mpi.h	/^OMPI_DECLSPEC  int PMPI_Graph_create(MPI_Comm comm_old, int nnodes, const int index[],$/;"	p	signature:(MPI_Comm comm_old, int nnodes, const int index[], const int edges[], int reorder, MPI_Comm *comm_graph)
PMPI_Graph_get	mpi.h	/^OMPI_DECLSPEC  int PMPI_Graph_get(MPI_Comm comm, int maxindex, int maxedges,$/;"	p	signature:(MPI_Comm comm, int maxindex, int maxedges, int index[], int edges[])
PMPI_Graph_map	mpi.h	/^OMPI_DECLSPEC  int PMPI_Graph_map(MPI_Comm comm, int nnodes, const int index[], const int edges[],$/;"	p	signature:(MPI_Comm comm, int nnodes, const int index[], const int edges[], int *newrank)
PMPI_Graph_neighbors	mpi.h	/^OMPI_DECLSPEC  int PMPI_Graph_neighbors(MPI_Comm comm, int rank, int maxneighbors,$/;"	p	signature:(MPI_Comm comm, int rank, int maxneighbors, int neighbors[])
PMPI_Graph_neighbors_count	mpi.h	/^OMPI_DECLSPEC  int PMPI_Graph_neighbors_count(MPI_Comm comm, int rank, int *nneighbors);$/;"	p	signature:(MPI_Comm comm, int rank, int *nneighbors)
PMPI_Graphdims_get	mpi.h	/^OMPI_DECLSPEC  int PMPI_Graphdims_get(MPI_Comm comm, int *nnodes, int *nedges);$/;"	p	signature:(MPI_Comm comm, int *nnodes, int *nedges)
PMPI_Grequest_complete	mpi.h	/^OMPI_DECLSPEC  int PMPI_Grequest_complete(MPI_Request request);$/;"	p	signature:(MPI_Request request)
PMPI_Grequest_start	mpi.h	/^OMPI_DECLSPEC  int PMPI_Grequest_start(MPI_Grequest_query_function *query_fn,$/;"	p	signature:(MPI_Grequest_query_function *query_fn, MPI_Grequest_free_function *free_fn, MPI_Grequest_cancel_function *cancel_fn, void *extra_state, MPI_Request *request)
PMPI_Group_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint PMPI_Group_c2f(MPI_Group group);$/;"	p	signature:(MPI_Group group)
PMPI_Group_compare	mpi.h	/^OMPI_DECLSPEC  int PMPI_Group_compare(MPI_Group group1, MPI_Group group2, int *result);$/;"	p	signature:(MPI_Group group1, MPI_Group group2, int *result)
PMPI_Group_difference	mpi.h	/^OMPI_DECLSPEC  int PMPI_Group_difference(MPI_Group group1, MPI_Group group2,$/;"	p	signature:(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup)
PMPI_Group_excl	mpi.h	/^OMPI_DECLSPEC  int PMPI_Group_excl(MPI_Group group, int n, const int ranks[],$/;"	p	signature:(MPI_Group group, int n, const int ranks[], MPI_Group *newgroup)
PMPI_Group_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_Group PMPI_Group_f2c(MPI_Fint group);$/;"	p	signature:(MPI_Fint group)
PMPI_Group_free	mpi.h	/^OMPI_DECLSPEC  int PMPI_Group_free(MPI_Group *group);$/;"	p	signature:(MPI_Group *group)
PMPI_Group_incl	mpi.h	/^OMPI_DECLSPEC  int PMPI_Group_incl(MPI_Group group, int n, const int ranks[],$/;"	p	signature:(MPI_Group group, int n, const int ranks[], MPI_Group *newgroup)
PMPI_Group_intersection	mpi.h	/^OMPI_DECLSPEC  int PMPI_Group_intersection(MPI_Group group1, MPI_Group group2,$/;"	p	signature:(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup)
PMPI_Group_range_excl	mpi.h	/^OMPI_DECLSPEC  int PMPI_Group_range_excl(MPI_Group group, int n, int ranges[][3],$/;"	p	signature:(MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup)
PMPI_Group_range_incl	mpi.h	/^OMPI_DECLSPEC  int PMPI_Group_range_incl(MPI_Group group, int n, int ranges[][3],$/;"	p	signature:(MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup)
PMPI_Group_rank	mpi.h	/^OMPI_DECLSPEC  int PMPI_Group_rank(MPI_Group group, int *rank);$/;"	p	signature:(MPI_Group group, int *rank)
PMPI_Group_size	mpi.h	/^OMPI_DECLSPEC  int PMPI_Group_size(MPI_Group group, int *size);$/;"	p	signature:(MPI_Group group, int *size)
PMPI_Group_translate_ranks	mpi.h	/^OMPI_DECLSPEC  int PMPI_Group_translate_ranks(MPI_Group group1, int n, const int ranks1[],$/;"	p	signature:(MPI_Group group1, int n, const int ranks1[], MPI_Group group2, int ranks2[])
PMPI_Group_union	mpi.h	/^OMPI_DECLSPEC  int PMPI_Group_union(MPI_Group group1, MPI_Group group2,$/;"	p	signature:(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup)
PMPI_Iallgather	mpi.h	/^OMPI_DECLSPEC  int PMPI_Iallgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
PMPI_Iallgatherv	mpi.h	/^OMPI_DECLSPEC  int PMPI_Iallgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
PMPI_Iallreduce	mpi.h	/^OMPI_DECLSPEC  int PMPI_Iallreduce(const void *sendbuf, void *recvbuf, int count,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request)
PMPI_Ialltoall	mpi.h	/^OMPI_DECLSPEC  int PMPI_Ialltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
PMPI_Ialltoallv	mpi.h	/^OMPI_DECLSPEC  int PMPI_Ialltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[],$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
PMPI_Ialltoallw	mpi.h	/^OMPI_DECLSPEC  int PMPI_Ialltoallw(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[],$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request *request)
PMPI_Ibarrier	mpi.h	/^OMPI_DECLSPEC  int PMPI_Ibarrier(MPI_Comm comm, MPI_Request *request);$/;"	p	signature:(MPI_Comm comm, MPI_Request *request)
PMPI_Ibcast	mpi.h	/^OMPI_DECLSPEC  int PMPI_Ibcast(void *buffer, int count, MPI_Datatype datatype,$/;"	p	signature:(void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm, MPI_Request *request)
PMPI_Ibsend	mpi.h	/^OMPI_DECLSPEC  int PMPI_Ibsend(const void *buf, int count, MPI_Datatype datatype, int dest,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request)
PMPI_Iexscan	mpi.h	/^OMPI_DECLSPEC  int PMPI_Iexscan(const void *sendbuf, void *recvbuf, int count,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request)
PMPI_Igather	mpi.h	/^OMPI_DECLSPEC  int PMPI_Igather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request)
PMPI_Igatherv	mpi.h	/^OMPI_DECLSPEC  int PMPI_Igatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request)
PMPI_Improbe	mpi.h	/^OMPI_DECLSPEC  int PMPI_Improbe(int source, int tag, MPI_Comm comm,$/;"	p	signature:(int source, int tag, MPI_Comm comm, int *flag, MPI_Message *message, MPI_Status *status)
PMPI_Imrecv	mpi.h	/^OMPI_DECLSPEC  int PMPI_Imrecv(void *buf, int count, MPI_Datatype type,$/;"	p	signature:(void *buf, int count, MPI_Datatype type, MPI_Message *message, MPI_Request *request)
PMPI_Ineighbor_allgather	mpi.h	/^OMPI_DECLSPEC  int PMPI_Ineighbor_allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
PMPI_Ineighbor_allgatherv	mpi.h	/^OMPI_DECLSPEC  int PMPI_Ineighbor_allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
PMPI_Ineighbor_alltoall	mpi.h	/^OMPI_DECLSPEC  int PMPI_Ineighbor_alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
PMPI_Ineighbor_alltoallv	mpi.h	/^OMPI_DECLSPEC  int PMPI_Ineighbor_alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)
PMPI_Ineighbor_alltoallw	mpi.h	/^OMPI_DECLSPEC  int PMPI_Ineighbor_alltoallw(const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[],$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request *request)
PMPI_Info_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint PMPI_Info_c2f(MPI_Info info);$/;"	p	signature:(MPI_Info info)
PMPI_Info_create	mpi.h	/^OMPI_DECLSPEC  int PMPI_Info_create(MPI_Info *info);$/;"	p	signature:(MPI_Info *info)
PMPI_Info_delete	mpi.h	/^OMPI_DECLSPEC  int PMPI_Info_delete(MPI_Info info, const char *key);$/;"	p	signature:(MPI_Info info, const char *key)
PMPI_Info_dup	mpi.h	/^OMPI_DECLSPEC  int PMPI_Info_dup(MPI_Info info, MPI_Info *newinfo);$/;"	p	signature:(MPI_Info info, MPI_Info *newinfo)
PMPI_Info_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_Info PMPI_Info_f2c(MPI_Fint info);$/;"	p	signature:(MPI_Fint info)
PMPI_Info_free	mpi.h	/^OMPI_DECLSPEC  int PMPI_Info_free(MPI_Info *info);$/;"	p	signature:(MPI_Info *info)
PMPI_Info_get	mpi.h	/^OMPI_DECLSPEC  int PMPI_Info_get(MPI_Info info, const char *key, int valuelen,$/;"	p	signature:(MPI_Info info, const char *key, int valuelen, char *value, int *flag)
PMPI_Info_get_nkeys	mpi.h	/^OMPI_DECLSPEC  int PMPI_Info_get_nkeys(MPI_Info info, int *nkeys);$/;"	p	signature:(MPI_Info info, int *nkeys)
PMPI_Info_get_nthkey	mpi.h	/^OMPI_DECLSPEC  int PMPI_Info_get_nthkey(MPI_Info info, int n, char *key);$/;"	p	signature:(MPI_Info info, int n, char *key)
PMPI_Info_get_valuelen	mpi.h	/^OMPI_DECLSPEC  int PMPI_Info_get_valuelen(MPI_Info info, const char *key, int *valuelen,$/;"	p	signature:(MPI_Info info, const char *key, int *valuelen, int *flag)
PMPI_Info_set	mpi.h	/^OMPI_DECLSPEC  int PMPI_Info_set(MPI_Info info, const char *key, const char *value);$/;"	p	signature:(MPI_Info info, const char *key, const char *value)
PMPI_Init	mpi.h	/^OMPI_DECLSPEC  int PMPI_Init(int *argc, char ***argv);$/;"	p	signature:(int *argc, char ***argv)
PMPI_Init_thread	mpi.h	/^OMPI_DECLSPEC  int PMPI_Init_thread(int *argc, char ***argv, int required,$/;"	p	signature:(int *argc, char ***argv, int required, int *provided)
PMPI_Initialized	mpi.h	/^OMPI_DECLSPEC  int PMPI_Initialized(int *flag);$/;"	p	signature:(int *flag)
PMPI_Intercomm_create	mpi.h	/^OMPI_DECLSPEC  int PMPI_Intercomm_create(MPI_Comm local_comm, int local_leader,$/;"	p	signature:(MPI_Comm local_comm, int local_leader, MPI_Comm bridge_comm, int remote_leader, int tag, MPI_Comm *newintercomm)
PMPI_Intercomm_merge	mpi.h	/^OMPI_DECLSPEC  int PMPI_Intercomm_merge(MPI_Comm intercomm, int high,$/;"	p	signature:(MPI_Comm intercomm, int high, MPI_Comm *newintercomm)
PMPI_Iprobe	mpi.h	/^OMPI_DECLSPEC  int PMPI_Iprobe(int source, int tag, MPI_Comm comm, int *flag,$/;"	p	signature:(int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status)
PMPI_Irecv	mpi.h	/^OMPI_DECLSPEC  int PMPI_Irecv(void *buf, int count, MPI_Datatype datatype, int source,$/;"	p	signature:(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request)
PMPI_Ireduce	mpi.h	/^OMPI_DECLSPEC  int PMPI_Ireduce(const void *sendbuf, void *recvbuf, int count,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm, MPI_Request *request)
PMPI_Ireduce_scatter	mpi.h	/^OMPI_DECLSPEC  int PMPI_Ireduce_scatter(const void *sendbuf, void *recvbuf, const int recvcounts[],$/;"	p	signature:(const void *sendbuf, void *recvbuf, const int recvcounts[], MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request)
PMPI_Ireduce_scatter_block	mpi.h	/^OMPI_DECLSPEC  int PMPI_Ireduce_scatter_block(const void *sendbuf, void *recvbuf, int recvcount,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request)
PMPI_Irsend	mpi.h	/^OMPI_DECLSPEC  int PMPI_Irsend(const void *buf, int count, MPI_Datatype datatype, int dest,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request)
PMPI_Is_thread_main	mpi.h	/^OMPI_DECLSPEC  int PMPI_Is_thread_main(int *flag);$/;"	p	signature:(int *flag)
PMPI_Iscan	mpi.h	/^OMPI_DECLSPEC  int PMPI_Iscan(const void *sendbuf, void *recvbuf, int count,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request)
PMPI_Iscatter	mpi.h	/^OMPI_DECLSPEC  int PMPI_Iscatter(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request)
PMPI_Iscatterv	mpi.h	/^OMPI_DECLSPEC  int PMPI_Iscatterv(const void *sendbuf, const int sendcounts[], const int displs[],$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const int displs[], MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request)
PMPI_Isend	mpi.h	/^OMPI_DECLSPEC  int PMPI_Isend(const void *buf, int count, MPI_Datatype datatype, int dest,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request)
PMPI_Issend	mpi.h	/^OMPI_DECLSPEC  int PMPI_Issend(const void *buf, int count, MPI_Datatype datatype, int dest,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request)
PMPI_Lookup_name	mpi.h	/^OMPI_DECLSPEC  int PMPI_Lookup_name(const char *service_name, MPI_Info info, char *port_name);$/;"	p	signature:(const char *service_name, MPI_Info info, char *port_name)
PMPI_Message_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint PMPI_Message_c2f(MPI_Message message);$/;"	p	signature:(MPI_Message message)
PMPI_Message_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_Message PMPI_Message_f2c(MPI_Fint message);$/;"	p	signature:(MPI_Fint message)
PMPI_Mprobe	mpi.h	/^OMPI_DECLSPEC  int PMPI_Mprobe(int source, int tag, MPI_Comm comm,$/;"	p	signature:(int source, int tag, MPI_Comm comm, MPI_Message *message, MPI_Status *status)
PMPI_Mrecv	mpi.h	/^OMPI_DECLSPEC  int PMPI_Mrecv(void *buf, int count, MPI_Datatype type,$/;"	p	signature:(void *buf, int count, MPI_Datatype type, MPI_Message *message, MPI_Status *status)
PMPI_Neighbor_allgather	mpi.h	/^OMPI_DECLSPEC  int PMPI_Neighbor_allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm)
PMPI_Neighbor_allgatherv	mpi.h	/^OMPI_DECLSPEC  int PMPI_Neighbor_allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm)
PMPI_Neighbor_alltoall	mpi.h	/^OMPI_DECLSPEC  int PMPI_Neighbor_alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm)
PMPI_Neighbor_alltoallv	mpi.h	/^OMPI_DECLSPEC  int PMPI_Neighbor_alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[],  MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm)
PMPI_Neighbor_alltoallw	mpi.h	/^OMPI_DECLSPEC  int PMPI_Neighbor_alltoallw(const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[],$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm)
PMPI_Op_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint PMPI_Op_c2f(MPI_Op op);$/;"	p	signature:(MPI_Op op)
PMPI_Op_commutative	mpi.h	/^OMPI_DECLSPEC  int PMPI_Op_commutative(MPI_Op op, int *commute);$/;"	p	signature:(MPI_Op op, int *commute)
PMPI_Op_create	mpi.h	/^OMPI_DECLSPEC  int PMPI_Op_create(MPI_User_function *function, int commute, MPI_Op *op);$/;"	p	signature:(MPI_User_function *function, int commute, MPI_Op *op)
PMPI_Op_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_Op PMPI_Op_f2c(MPI_Fint op);$/;"	p	signature:(MPI_Fint op)
PMPI_Op_free	mpi.h	/^OMPI_DECLSPEC  int PMPI_Op_free(MPI_Op *op);$/;"	p	signature:(MPI_Op *op)
PMPI_Open_port	mpi.h	/^OMPI_DECLSPEC  int PMPI_Open_port(MPI_Info info, char *port_name);$/;"	p	signature:(MPI_Info info, char *port_name)
PMPI_Pack	mpi.h	/^OMPI_DECLSPEC  int PMPI_Pack(const void *inbuf, int incount, MPI_Datatype datatype,$/;"	p	signature:(const void *inbuf, int incount, MPI_Datatype datatype, void *outbuf, int outsize, int *position, MPI_Comm comm)
PMPI_Pack_external	mpi.h	/^OMPI_DECLSPEC  int PMPI_Pack_external(const char datarep[], const void *inbuf, int incount,$/;"	p	signature:(const char datarep[], const void *inbuf, int incount, MPI_Datatype datatype, void *outbuf, MPI_Aint outsize, MPI_Aint *position)
PMPI_Pack_external_size	mpi.h	/^OMPI_DECLSPEC  int PMPI_Pack_external_size(const char datarep[], int incount,$/;"	p	signature:(const char datarep[], int incount, MPI_Datatype datatype, MPI_Aint *size)
PMPI_Pack_size	mpi.h	/^OMPI_DECLSPEC  int PMPI_Pack_size(int incount, MPI_Datatype datatype, MPI_Comm comm,$/;"	p	signature:(int incount, MPI_Datatype datatype, MPI_Comm comm, int *size)
PMPI_Pcontrol	mpi.h	/^OMPI_DECLSPEC  int PMPI_Pcontrol(const int level, ...);$/;"	p	signature:(const int level, ...)
PMPI_Probe	mpi.h	/^OMPI_DECLSPEC  int PMPI_Probe(int source, int tag, MPI_Comm comm, MPI_Status *status);$/;"	p	signature:(int source, int tag, MPI_Comm comm, MPI_Status *status)
PMPI_Publish_name	mpi.h	/^OMPI_DECLSPEC  int PMPI_Publish_name(const char *service_name, MPI_Info info,$/;"	p	signature:(const char *service_name, MPI_Info info, const char *port_name)
PMPI_Put	mpi.h	/^OMPI_DECLSPEC  int PMPI_Put(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype,$/;"	p	signature:(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win)
PMPI_Query_thread	mpi.h	/^OMPI_DECLSPEC  int PMPI_Query_thread(int *provided);$/;"	p	signature:(int *provided)
PMPI_Raccumulate	mpi.h	/^OMPI_DECLSPEC  int PMPI_Raccumulate(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, $/;"	p	signature:(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request *request)
PMPI_Recv	mpi.h	/^OMPI_DECLSPEC  int PMPI_Recv(void *buf, int count, MPI_Datatype datatype, int source,$/;"	p	signature:(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status *status)
PMPI_Recv_init	mpi.h	/^OMPI_DECLSPEC  int PMPI_Recv_init(void *buf, int count, MPI_Datatype datatype, int source,$/;"	p	signature:(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request)
PMPI_Reduce	mpi.h	/^OMPI_DECLSPEC  int PMPI_Reduce(const void *sendbuf, void *recvbuf, int count,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm)
PMPI_Reduce_local	mpi.h	/^OMPI_DECLSPEC  int PMPI_Reduce_local(const void *inbuf, void *inoutbuf, int count,$/;"	p	signature:(const void *inbuf, void *inoutbuf, int count, MPI_Datatype datatype, MPI_Op)
PMPI_Reduce_scatter	mpi.h	/^OMPI_DECLSPEC  int PMPI_Reduce_scatter(const void *sendbuf, void *recvbuf, const int recvcounts[],$/;"	p	signature:(const void *sendbuf, void *recvbuf, const int recvcounts[], MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)
PMPI_Reduce_scatter_block	mpi.h	/^OMPI_DECLSPEC  int PMPI_Reduce_scatter_block(const void *sendbuf, void *recvbuf, int recvcount,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)
PMPI_Register_datarep	mpi.h	/^OMPI_DECLSPEC  int PMPI_Register_datarep(const char *datarep,$/;"	p	signature:(const char *datarep, MPI_Datarep_conversion_function *read_conversion_fn, MPI_Datarep_conversion_function *write_conversion_fn, MPI_Datarep_extent_function *dtype_file_extent_fn, void *extra_state)
PMPI_Request_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint PMPI_Request_c2f(MPI_Request request);$/;"	p	signature:(MPI_Request request)
PMPI_Request_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_Request PMPI_Request_f2c(MPI_Fint request);$/;"	p	signature:(MPI_Fint request)
PMPI_Request_free	mpi.h	/^OMPI_DECLSPEC  int PMPI_Request_free(MPI_Request *request);$/;"	p	signature:(MPI_Request *request)
PMPI_Request_get_status	mpi.h	/^OMPI_DECLSPEC  int PMPI_Request_get_status(MPI_Request request, int *flag,$/;"	p	signature:(MPI_Request request, int *flag, MPI_Status *status)
PMPI_Rget	mpi.h	/^OMPI_DECLSPEC  int PMPI_Rget(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, $/;"	p	signature:(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win, MPI_Request *request)
PMPI_Rget_accumulate	mpi.h	/^OMPI_DECLSPEC  int PMPI_Rget_accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype,$/;"	p	signature:(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, void *result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request *request)
PMPI_Rput	mpi.h	/^OMPI_DECLSPEC  int PMPI_Rput(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype,$/;"	p	signature:(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_cout, MPI_Datatype target_datatype, MPI_Win win, MPI_Request *request)
PMPI_Rsend	mpi.h	/^OMPI_DECLSPEC  int PMPI_Rsend(const void *ibuf, int count, MPI_Datatype datatype, int dest,$/;"	p	signature:(const void *ibuf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm)
PMPI_Rsend_init	mpi.h	/^OMPI_DECLSPEC  int PMPI_Rsend_init(const void *buf, int count, MPI_Datatype datatype,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request)
PMPI_Scan	mpi.h	/^OMPI_DECLSPEC  int PMPI_Scan(const void *sendbuf, void *recvbuf, int count,$/;"	p	signature:(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)
PMPI_Scatter	mpi.h	/^OMPI_DECLSPEC  int PMPI_Scatter(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm)
PMPI_Scatterv	mpi.h	/^OMPI_DECLSPEC  int PMPI_Scatterv(const void *sendbuf, const int sendcounts[], const int displs[],$/;"	p	signature:(const void *sendbuf, const int sendcounts[], const int displs[], MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm)
PMPI_Send	mpi.h	/^OMPI_DECLSPEC  int PMPI_Send(const void *buf, int count, MPI_Datatype datatype, int dest,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm)
PMPI_Send_init	mpi.h	/^OMPI_DECLSPEC  int PMPI_Send_init(const void *buf, int count, MPI_Datatype datatype,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request)
PMPI_Sendrecv	mpi.h	/^OMPI_DECLSPEC  int PMPI_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,$/;"	p	signature:(const void *sendbuf, int sendcount, MPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, int recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Status *status)
PMPI_Sendrecv_replace	mpi.h	/^OMPI_DECLSPEC  int PMPI_Sendrecv_replace(void * buf, int count, MPI_Datatype datatype,$/;"	p	signature:(void * buf, int count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Status *status)
PMPI_Ssend	mpi.h	/^OMPI_DECLSPEC  int PMPI_Ssend(const void *buf, int count, MPI_Datatype datatype, int dest,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm)
PMPI_Ssend_init	mpi.h	/^OMPI_DECLSPEC  int PMPI_Ssend_init(const void *buf, int count, MPI_Datatype datatype,$/;"	p	signature:(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request)
PMPI_Start	mpi.h	/^OMPI_DECLSPEC  int PMPI_Start(MPI_Request *request);$/;"	p	signature:(MPI_Request *request)
PMPI_Startall	mpi.h	/^OMPI_DECLSPEC  int PMPI_Startall(int count, MPI_Request array_of_requests[]);$/;"	p	signature:(int count, MPI_Request array_of_requests[])
PMPI_Status_c2f	mpi.h	/^OMPI_DECLSPEC  int PMPI_Status_c2f(const MPI_Status *c_status, MPI_Fint *f_status);$/;"	p	signature:(const MPI_Status *c_status, MPI_Fint *f_status)
PMPI_Status_f2c	mpi.h	/^OMPI_DECLSPEC  int PMPI_Status_f2c(const MPI_Fint *f_status, MPI_Status *c_status);$/;"	p	signature:(const MPI_Fint *f_status, MPI_Status *c_status)
PMPI_Status_set_cancelled	mpi.h	/^OMPI_DECLSPEC  int PMPI_Status_set_cancelled(MPI_Status *status, int flag);$/;"	p	signature:(MPI_Status *status, int flag)
PMPI_Status_set_elements	mpi.h	/^OMPI_DECLSPEC  int PMPI_Status_set_elements(MPI_Status *status, MPI_Datatype datatype,$/;"	p	signature:(MPI_Status *status, MPI_Datatype datatype, int count)
PMPI_Status_set_elements_x	mpi.h	/^OMPI_DECLSPEC  int PMPI_Status_set_elements_x(MPI_Status *status, MPI_Datatype datatype,$/;"	p	signature:(MPI_Status *status, MPI_Datatype datatype, MPI_Count count)
PMPI_T_category_changed	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_category_changed(int *stamp);$/;"	p	signature:(int *stamp)
PMPI_T_category_get_categories	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_category_get_categories(int cat_index, int len, int indices[]);$/;"	p	signature:(int cat_index, int len, int indices[])
PMPI_T_category_get_cvars	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_category_get_cvars(int cat_index, int len, int indices[]);$/;"	p	signature:(int cat_index, int len, int indices[])
PMPI_T_category_get_index	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_category_get_index (const char *name, int *category_index);$/;"	p	signature:(const char *name, int *category_index)
PMPI_T_category_get_info	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_category_get_info(int cat_index, char *name, int *name_len,$/;"	p	signature:(int cat_index, char *name, int *name_len, char *desc, int *desc_len, int *num_cvars, int *num_pvars, int *num_categories)
PMPI_T_category_get_num	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_category_get_num(int *num_cat);$/;"	p	signature:(int *num_cat)
PMPI_T_category_get_pvars	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_category_get_pvars(int cat_index, int len, int indices[]);$/;"	p	signature:(int cat_index, int len, int indices[])
PMPI_T_cvar_get_index	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_cvar_get_index (const char *name, int *cvar_index);$/;"	p	signature:(const char *name, int *cvar_index)
PMPI_T_cvar_get_info	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_cvar_get_info (int cvar_index, char *name, int *name_len,$/;"	p	signature:(int cvar_index, char *name, int *name_len, int *verbosity, MPI_Datatype *datatype, MPI_T_enum *enumtype, char *desc, int *desc_len, int *bind, int *scope)
PMPI_T_cvar_get_num	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_cvar_get_num (int *num_cvar);$/;"	p	signature:(int *num_cvar)
PMPI_T_cvar_handle_alloc	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_cvar_handle_alloc (int cvar_index, void *obj_handle,$/;"	p	signature:(int cvar_index, void *obj_handle, MPI_T_cvar_handle *handle, int *count)
PMPI_T_cvar_handle_free	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_cvar_handle_free (MPI_T_cvar_handle *handle);$/;"	p	signature:(MPI_T_cvar_handle *handle)
PMPI_T_cvar_read	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_cvar_read (MPI_T_cvar_handle handle, void *buf);$/;"	p	signature:(MPI_T_cvar_handle handle, void *buf)
PMPI_T_cvar_write	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_cvar_write (MPI_T_cvar_handle handle, const void *buf);$/;"	p	signature:(MPI_T_cvar_handle handle, const void *buf)
PMPI_T_enum_get_info	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_enum_get_info(MPI_T_enum enumtype, int *num, char *name, int *name_len);$/;"	p	signature:(MPI_T_enum enumtype, int *num, char *name, int *name_len)
PMPI_T_enum_get_item	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_enum_get_item(MPI_T_enum enumtype, int index, int *value, char *name,$/;"	p	signature:(MPI_T_enum enumtype, int index, int *value, char *name, int *name_len)
PMPI_T_finalize	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_finalize (void);$/;"	p	signature:(void)
PMPI_T_init_thread	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_init_thread (int required, int *provided);$/;"	p	signature:(int required, int *provided)
PMPI_T_pvar_get_index	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_pvar_get_index (const char *name, int *pvar_index);$/;"	p	signature:(const char *name, int *pvar_index)
PMPI_T_pvar_get_info	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_pvar_get_info(int pvar_index, char *name, int *name_len,$/;"	p	signature:(int pvar_index, char *name, int *name_len, int *verbosity, int *var_class, MPI_Datatype *datatype, MPI_T_enum *enumtype, char *desc, int *desc_len, int *bind, int *readonly, int *continuous, int *atomic)
PMPI_T_pvar_get_num	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_pvar_get_num(int *num_pvar);$/;"	p	signature:(int *num_pvar)
PMPI_T_pvar_handle_alloc	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_pvar_handle_alloc(MPI_T_pvar_session session, int pvar_index,$/;"	p	signature:(MPI_T_pvar_session session, int pvar_index, void *obj_handle, MPI_T_pvar_handle *handle, int *count)
PMPI_T_pvar_handle_free	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_pvar_handle_free(MPI_T_pvar_session session, MPI_T_pvar_handle *handle);$/;"	p	signature:(MPI_T_pvar_session session, MPI_T_pvar_handle *handle)
PMPI_T_pvar_read	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_pvar_read(MPI_T_pvar_session session, MPI_T_pvar_handle handle,$/;"	p	signature:(MPI_T_pvar_session session, MPI_T_pvar_handle handle, void *buf)
PMPI_T_pvar_readreset	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_pvar_readreset(MPI_T_pvar_session session, MPI_T_pvar_handle handle,$/;"	p	signature:(MPI_T_pvar_session session, MPI_T_pvar_handle handle, void *buf)
PMPI_T_pvar_reset	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_pvar_reset(MPI_T_pvar_session session, MPI_T_pvar_handle handle);$/;"	p	signature:(MPI_T_pvar_session session, MPI_T_pvar_handle handle)
PMPI_T_pvar_session_create	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_pvar_session_create(MPI_T_pvar_session *session);$/;"	p	signature:(MPI_T_pvar_session *session)
PMPI_T_pvar_session_free	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_pvar_session_free(MPI_T_pvar_session *session);$/;"	p	signature:(MPI_T_pvar_session *session)
PMPI_T_pvar_start	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_pvar_start(MPI_T_pvar_session session, MPI_T_pvar_handle handle);$/;"	p	signature:(MPI_T_pvar_session session, MPI_T_pvar_handle handle)
PMPI_T_pvar_stop	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_pvar_stop(MPI_T_pvar_session session, MPI_T_pvar_handle handle);$/;"	p	signature:(MPI_T_pvar_session session, MPI_T_pvar_handle handle)
PMPI_T_pvar_write	mpi.h	/^OMPI_DECLSPEC  int PMPI_T_pvar_write(MPI_T_pvar_session session, MPI_T_pvar_handle handle,$/;"	p	signature:(MPI_T_pvar_session session, MPI_T_pvar_handle handle, const void *buf)
PMPI_Test	mpi.h	/^OMPI_DECLSPEC  int PMPI_Test(MPI_Request *request, int *flag, MPI_Status *status);$/;"	p	signature:(MPI_Request *request, int *flag, MPI_Status *status)
PMPI_Test_cancelled	mpi.h	/^OMPI_DECLSPEC  int PMPI_Test_cancelled(const MPI_Status *status, int *flag);$/;"	p	signature:(const MPI_Status *status, int *flag)
PMPI_Testall	mpi.h	/^OMPI_DECLSPEC  int PMPI_Testall(int count, MPI_Request array_of_requests[], int *flag,$/;"	p	signature:(int count, MPI_Request array_of_requests[], int *flag, MPI_Status array_of_statuses[])
PMPI_Testany	mpi.h	/^OMPI_DECLSPEC  int PMPI_Testany(int count, MPI_Request array_of_requests[], int *index, int *flag, MPI_Status *status);$/;"	p	signature:(int count, MPI_Request array_of_requests[], int *index, int *flag, MPI_Status *status)
PMPI_Testsome	mpi.h	/^OMPI_DECLSPEC  int PMPI_Testsome(int incount, MPI_Request array_of_requests[],$/;"	p	signature:(int incount, MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[])
PMPI_Topo_test	mpi.h	/^OMPI_DECLSPEC  int PMPI_Topo_test(MPI_Comm comm, int *status);$/;"	p	signature:(MPI_Comm comm, int *status)
PMPI_Type_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint PMPI_Type_c2f(MPI_Datatype datatype);$/;"	p	signature:(MPI_Datatype datatype)
PMPI_Type_commit	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_commit(MPI_Datatype *type);$/;"	p	signature:(MPI_Datatype *type)
PMPI_Type_contiguous	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_contiguous(int count, MPI_Datatype oldtype,$/;"	p	signature:(int count, MPI_Datatype oldtype, MPI_Datatype *newtype)
PMPI_Type_create_darray	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_create_darray(int size, int rank, int ndims,$/;"	p	signature:(int size, int rank, int ndims, const int gsize_array[], const int distrib_array[], const int darg_array[], const int psize_array[], int order, MPI_Datatype oldtype, MPI_Datatype *newtype)
PMPI_Type_create_f90_complex	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_create_f90_complex(int p, int r, MPI_Datatype *newtype);$/;"	p	signature:(int p, int r, MPI_Datatype *newtype)
PMPI_Type_create_f90_integer	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_create_f90_integer(int r, MPI_Datatype *newtype);$/;"	p	signature:(int r, MPI_Datatype *newtype)
PMPI_Type_create_f90_real	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_create_f90_real(int p, int r, MPI_Datatype *newtype);$/;"	p	signature:(int p, int r, MPI_Datatype *newtype)
PMPI_Type_create_hindexed	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_create_hindexed(int count, const int array_of_blocklengths[],$/;"	p	signature:(int count, const int array_of_blocklengths[], const MPI_Aint array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype)
PMPI_Type_create_hindexed_block	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_create_hindexed_block(int count, int blocklength,$/;"	p	signature:(int count, int blocklength, const MPI_Aint array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype)
PMPI_Type_create_hvector	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_create_hvector(int count, int blocklength, MPI_Aint stride,$/;"	p	signature:(int count, int blocklength, MPI_Aint stride, MPI_Datatype oldtype, MPI_Datatype *newtype)
PMPI_Type_create_indexed_block	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_create_indexed_block(int count, int blocklength,$/;"	p	signature:(int count, int blocklength, const int array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype)
PMPI_Type_create_keyval	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_create_keyval(MPI_Type_copy_attr_function *type_copy_attr_fn,$/;"	p	signature:(MPI_Type_copy_attr_function *type_copy_attr_fn, MPI_Type_delete_attr_function *type_delete_attr_fn, int *type_keyval, void *extra_state)
PMPI_Type_create_resized	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_create_resized(MPI_Datatype oldtype, MPI_Aint lb,$/;"	p	signature:(MPI_Datatype oldtype, MPI_Aint lb, MPI_Aint extent, MPI_Datatype *newtype)
PMPI_Type_create_struct	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_create_struct(int count, const int array_of_block_lengths[],$/;"	p	signature:(int count, const int array_of_block_lengths[], const MPI_Aint array_of_displacements[], const MPI_Datatype array_of_types[], MPI_Datatype *newtype)
PMPI_Type_create_subarray	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_create_subarray(int ndims, const int size_array[], const int subsize_array[],$/;"	p	signature:(int ndims, const int size_array[], const int subsize_array[], const int start_array[], int order, MPI_Datatype oldtype, MPI_Datatype *newtype)
PMPI_Type_delete_attr	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_delete_attr(MPI_Datatype type, int type_keyval);$/;"	p	signature:(MPI_Datatype type, int type_keyval)
PMPI_Type_dup	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_dup(MPI_Datatype type, MPI_Datatype *newtype);$/;"	p	signature:(MPI_Datatype type, MPI_Datatype *newtype)
PMPI_Type_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_Datatype PMPI_Type_f2c(MPI_Fint datatype);$/;"	p	signature:(MPI_Fint datatype)
PMPI_Type_free	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_free(MPI_Datatype *type);$/;"	p	signature:(MPI_Datatype *type)
PMPI_Type_free_keyval	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_free_keyval(int *type_keyval);$/;"	p	signature:(int *type_keyval)
PMPI_Type_get_attr	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_get_attr(MPI_Datatype type, int type_keyval,$/;"	p	signature:(MPI_Datatype type, int type_keyval, void *attribute_val, int *flag)
PMPI_Type_get_contents	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_get_contents(MPI_Datatype mtype, int max_integers,$/;"	p	signature:(MPI_Datatype mtype, int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], MPI_Aint array_of_addresses[], MPI_Datatype array_of_datatypes[])
PMPI_Type_get_envelope	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_get_envelope(MPI_Datatype type, int *num_integers,$/;"	p	signature:(MPI_Datatype type, int *num_integers, int *num_addresses, int *num_datatypes, int *combiner)
PMPI_Type_get_extent	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_get_extent(MPI_Datatype type, MPI_Aint *lb,$/;"	p	signature:(MPI_Datatype type, MPI_Aint *lb, MPI_Aint *extent)
PMPI_Type_get_extent_x	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_get_extent_x(MPI_Datatype type, MPI_Count *lb,$/;"	p	signature:(MPI_Datatype type, MPI_Count *lb, MPI_Count *extent)
PMPI_Type_get_name	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_get_name(MPI_Datatype type, char *type_name,$/;"	p	signature:(MPI_Datatype type, char *type_name, int *resultlen)
PMPI_Type_get_true_extent	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_get_true_extent(MPI_Datatype datatype, MPI_Aint *true_lb,$/;"	p	signature:(MPI_Datatype datatype, MPI_Aint *true_lb, MPI_Aint *true_extent)
PMPI_Type_get_true_extent_x	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_get_true_extent_x(MPI_Datatype datatype, MPI_Count *true_lb,$/;"	p	signature:(MPI_Datatype datatype, MPI_Count *true_lb, MPI_Count *true_extent)
PMPI_Type_indexed	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_indexed(int count, const int array_of_blocklengths[],$/;"	p	signature:(int count, const int array_of_blocklengths[], const int array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype)
PMPI_Type_match_size	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_match_size(int typeclass, int size, MPI_Datatype *type);$/;"	p	signature:(int typeclass, int size, MPI_Datatype *type)
PMPI_Type_set_attr	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_set_attr(MPI_Datatype type, int type_keyval,$/;"	p	signature:(MPI_Datatype type, int type_keyval, void *attr_val)
PMPI_Type_set_name	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_set_name(MPI_Datatype type, const char *type_name);$/;"	p	signature:(MPI_Datatype type, const char *type_name)
PMPI_Type_size	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_size(MPI_Datatype type, int *size);$/;"	p	signature:(MPI_Datatype type, int *size)
PMPI_Type_size_x	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_size_x(MPI_Datatype type, MPI_Count *size);$/;"	p	signature:(MPI_Datatype type, MPI_Count *size)
PMPI_Type_vector	mpi.h	/^OMPI_DECLSPEC  int PMPI_Type_vector(int count, int blocklength, int stride,$/;"	p	signature:(int count, int blocklength, int stride, MPI_Datatype oldtype, MPI_Datatype *newtype)
PMPI_Unpack	mpi.h	/^OMPI_DECLSPEC  int PMPI_Unpack(const void *inbuf, int insize, int *position,$/;"	p	signature:(const void *inbuf, int insize, int *position, void *outbuf, int outcount, MPI_Datatype datatype, MPI_Comm comm)
PMPI_Unpack_external	mpi.h	/^OMPI_DECLSPEC  int PMPI_Unpack_external (const char datarep[], const void *inbuf, MPI_Aint insize,$/;"	p	signature:(const char datarep[], const void *inbuf, MPI_Aint insize, MPI_Aint *position, void *outbuf, int outcount, MPI_Datatype datatype)
PMPI_Unpublish_name	mpi.h	/^OMPI_DECLSPEC  int PMPI_Unpublish_name(const char *service_name, MPI_Info info,$/;"	p	signature:(const char *service_name, MPI_Info info, const char *port_name)
PMPI_Wait	mpi.h	/^OMPI_DECLSPEC  int PMPI_Wait(MPI_Request *request, MPI_Status *status);$/;"	p	signature:(MPI_Request *request, MPI_Status *status)
PMPI_Waitall	mpi.h	/^OMPI_DECLSPEC  int PMPI_Waitall(int count, MPI_Request array_of_requests[],$/;"	p	signature:(int count, MPI_Request array_of_requests[], MPI_Status array_of_statuses[])
PMPI_Waitany	mpi.h	/^OMPI_DECLSPEC  int PMPI_Waitany(int count, MPI_Request array_of_requests[],$/;"	p	signature:(int count, MPI_Request array_of_requests[], int *index, MPI_Status *status)
PMPI_Waitsome	mpi.h	/^OMPI_DECLSPEC  int PMPI_Waitsome(int incount, MPI_Request array_of_requests[],$/;"	p	signature:(int incount, MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[])
PMPI_Win_allocate	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_allocate(MPI_Aint size, int disp_unit, MPI_Info info,$/;"	p	signature:(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr, MPI_Win *win)
PMPI_Win_allocate_shared	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_allocate_shared(MPI_Aint size, int disp_unit, MPI_Info info,$/;"	p	signature:(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr, MPI_Win *win)
PMPI_Win_attach	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_attach(MPI_Win win, void *base, MPI_Aint size);$/;"	p	signature:(MPI_Win win, void *base, MPI_Aint size)
PMPI_Win_c2f	mpi.h	/^OMPI_DECLSPEC  MPI_Fint PMPI_Win_c2f(MPI_Win win);$/;"	p	signature:(MPI_Win win)
PMPI_Win_call_errhandler	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_call_errhandler(MPI_Win win, int errorcode);$/;"	p	signature:(MPI_Win win, int errorcode)
PMPI_Win_complete	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_complete(MPI_Win win);$/;"	p	signature:(MPI_Win win)
PMPI_Win_create	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_create(void *base, MPI_Aint size, int disp_unit,$/;"	p	signature:(void *base, MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, MPI_Win *win)
PMPI_Win_create_dynamic	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_create_dynamic(MPI_Info info, MPI_Comm comm, MPI_Win *win);$/;"	p	signature:(MPI_Info info, MPI_Comm comm, MPI_Win *win)
PMPI_Win_create_errhandler	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_create_errhandler(MPI_Win_errhandler_function *function,$/;"	p	signature:(MPI_Win_errhandler_function *function, MPI_Errhandler *errhandler)
PMPI_Win_create_keyval	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_create_keyval(MPI_Win_copy_attr_function *win_copy_attr_fn,$/;"	p	signature:(MPI_Win_copy_attr_function *win_copy_attr_fn, MPI_Win_delete_attr_function *win_delete_attr_fn, int *win_keyval, void *extra_state)
PMPI_Win_delete_attr	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_delete_attr(MPI_Win win, int win_keyval);$/;"	p	signature:(MPI_Win win, int win_keyval)
PMPI_Win_detach	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_detach(MPI_Win win, void *base);$/;"	p	signature:(MPI_Win win, void *base)
PMPI_Win_f2c	mpi.h	/^OMPI_DECLSPEC  MPI_Win PMPI_Win_f2c(MPI_Fint win);$/;"	p	signature:(MPI_Fint win)
PMPI_Win_fence	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_fence(int assert, MPI_Win win);$/;"	p	signature:(int assert, MPI_Win win)
PMPI_Win_flush	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_flush(int rank, MPI_Win win);$/;"	p	signature:(int rank, MPI_Win win)
PMPI_Win_flush_all	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_flush_all(MPI_Win win);$/;"	p	signature:(MPI_Win win)
PMPI_Win_flush_local	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_flush_local(int rank, MPI_Win win);$/;"	p	signature:(int rank, MPI_Win win)
PMPI_Win_flush_local_all	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_flush_local_all(MPI_Win win);$/;"	p	signature:(MPI_Win win)
PMPI_Win_free	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_free(MPI_Win *win);$/;"	p	signature:(MPI_Win *win)
PMPI_Win_free_keyval	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_free_keyval(int *win_keyval);$/;"	p	signature:(int *win_keyval)
PMPI_Win_get_attr	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_get_attr(MPI_Win win, int win_keyval,$/;"	p	signature:(MPI_Win win, int win_keyval, void *attribute_val, int *flag)
PMPI_Win_get_errhandler	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_get_errhandler(MPI_Win win, MPI_Errhandler *errhandler);$/;"	p	signature:(MPI_Win win, MPI_Errhandler *errhandler)
PMPI_Win_get_group	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_get_group(MPI_Win win, MPI_Group *group);$/;"	p	signature:(MPI_Win win, MPI_Group *group)
PMPI_Win_get_info	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_get_info(MPI_Win win, MPI_Info *info_used);$/;"	p	signature:(MPI_Win win, MPI_Info *info_used)
PMPI_Win_get_name	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_get_name(MPI_Win win, char *win_name, int *resultlen);$/;"	p	signature:(MPI_Win win, char *win_name, int *resultlen)
PMPI_Win_lock	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_lock(int lock_type, int rank, int assert, MPI_Win win);$/;"	p	signature:(int lock_type, int rank, int assert, MPI_Win win)
PMPI_Win_lock_all	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_lock_all(int assert, MPI_Win win);$/;"	p	signature:(int assert, MPI_Win win)
PMPI_Win_post	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_post(MPI_Group group, int assert, MPI_Win win);$/;"	p	signature:(MPI_Group group, int assert, MPI_Win win)
PMPI_Win_set_attr	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_set_attr(MPI_Win win, int win_keyval, void *attribute_val);$/;"	p	signature:(MPI_Win win, int win_keyval, void *attribute_val)
PMPI_Win_set_errhandler	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_set_errhandler(MPI_Win win, MPI_Errhandler errhandler);$/;"	p	signature:(MPI_Win win, MPI_Errhandler errhandler)
PMPI_Win_set_info	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_set_info(MPI_Win win, MPI_Info info);$/;"	p	signature:(MPI_Win win, MPI_Info info)
PMPI_Win_set_name	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_set_name(MPI_Win win, const char *win_name);$/;"	p	signature:(MPI_Win win, const char *win_name)
PMPI_Win_shared_query	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_shared_query(MPI_Win win, int rank, MPI_Aint *size, int *disp_unit, void *baseptr);$/;"	p	signature:(MPI_Win win, int rank, MPI_Aint *size, int *disp_unit, void *baseptr)
PMPI_Win_start	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_start(MPI_Group group, int assert, MPI_Win win);$/;"	p	signature:(MPI_Group group, int assert, MPI_Win win)
PMPI_Win_sync	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_sync(MPI_Win win);$/;"	p	signature:(MPI_Win win)
PMPI_Win_test	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_test(MPI_Win win, int *flag);$/;"	p	signature:(MPI_Win win, int *flag)
PMPI_Win_unlock	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_unlock(int rank, MPI_Win win);$/;"	p	signature:(int rank, MPI_Win win)
PMPI_Win_unlock_all	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_unlock_all(MPI_Win win);$/;"	p	signature:(MPI_Win win)
PMPI_Win_wait	mpi.h	/^OMPI_DECLSPEC  int PMPI_Win_wait(MPI_Win win);$/;"	p	signature:(MPI_Win win)
PMPI_Wtick	mpi.h	/^OMPI_DECLSPEC  double PMPI_Wtick(void);$/;"	p	signature:(void)
PMPI_Wtime	mpi.h	/^OMPI_DECLSPEC  double PMPI_Wtime(void);$/;"	p	signature:(void)
POMP_Atomic_enter	vampirtrace/pomp_lib.h	/^extern void POMP_Atomic_enter(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Atomic_exit	vampirtrace/pomp_lib.h	/^extern void POMP_Atomic_exit(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Barrier_enter	vampirtrace/pomp_lib.h	/^extern void POMP_Barrier_enter(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Barrier_exit	vampirtrace/pomp_lib.h	/^extern void POMP_Barrier_exit(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Begin	vampirtrace/pomp_lib.h	/^extern void POMP_Begin(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Critical_begin	vampirtrace/pomp_lib.h	/^extern void POMP_Critical_begin(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Critical_end	vampirtrace/pomp_lib.h	/^extern void POMP_Critical_end(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Critical_enter	vampirtrace/pomp_lib.h	/^extern void POMP_Critical_enter(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Critical_exit	vampirtrace/pomp_lib.h	/^extern void POMP_Critical_exit(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Destroy_lock	vampirtrace/pomp_lib.h	/^extern void POMP_Destroy_lock(omp_lock_t *s);$/;"	p	signature:(omp_lock_t *s)
POMP_Destroy_nest_lock	vampirtrace/pomp_lib.h	/^extern void POMP_Destroy_nest_lock(omp_nest_lock_t *s);$/;"	p	signature:(omp_nest_lock_t *s)
POMP_End	vampirtrace/pomp_lib.h	/^extern void POMP_End(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Finalize	vampirtrace/pomp_lib.h	/^extern void POMP_Finalize(void);$/;"	p	signature:(void)
POMP_Flush_enter	vampirtrace/pomp_lib.h	/^extern void POMP_Flush_enter(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Flush_exit	vampirtrace/pomp_lib.h	/^extern void POMP_Flush_exit(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_For_enter	vampirtrace/pomp_lib.h	/^extern void POMP_For_enter(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_For_exit	vampirtrace/pomp_lib.h	/^extern void POMP_For_exit(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Init	vampirtrace/pomp_lib.h	/^extern void POMP_Init(void);$/;"	p	signature:(void)
POMP_Init_lock	vampirtrace/pomp_lib.h	/^extern void POMP_Init_lock(omp_lock_t *s);$/;"	p	signature:(omp_lock_t *s)
POMP_Init_nest_lock	vampirtrace/pomp_lib.h	/^extern void POMP_Init_nest_lock(omp_nest_lock_t *s);$/;"	p	signature:(omp_nest_lock_t *s)
POMP_LIB_H	vampirtrace/pomp_lib.h	8;"	d
POMP_MAX_ID	vampirtrace/pomp_lib.h	/^extern int POMP_MAX_ID;$/;"	x
POMP_Master_begin	vampirtrace/pomp_lib.h	/^extern void POMP_Master_begin(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Master_end	vampirtrace/pomp_lib.h	/^extern void POMP_Master_end(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Off	vampirtrace/pomp_lib.h	/^extern void POMP_Off(void);$/;"	p	signature:(void)
POMP_On	vampirtrace/pomp_lib.h	/^extern void POMP_On(void);$/;"	p	signature:(void)
POMP_Parallel_begin	vampirtrace/pomp_lib.h	/^extern void POMP_Parallel_begin(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Parallel_begin2	vampirtrace/pomp_lib.h	/^extern void POMP_Parallel_begin2(struct ompregdescr* r, int* p);$/;"	p	signature:(struct ompregdescr* r, int* p)
POMP_Parallel_end	vampirtrace/pomp_lib.h	/^extern void POMP_Parallel_end(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Parallel_fork	vampirtrace/pomp_lib.h	/^extern void POMP_Parallel_fork(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Parallel_fork2	vampirtrace/pomp_lib.h	/^extern void POMP_Parallel_fork2(struct ompregdescr* r, int* p);$/;"	p	signature:(struct ompregdescr* r, int* p)
POMP_Parallel_join	vampirtrace/pomp_lib.h	/^extern void POMP_Parallel_join(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Section_begin	vampirtrace/pomp_lib.h	/^extern void POMP_Section_begin(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Section_end	vampirtrace/pomp_lib.h	/^extern void POMP_Section_end(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Sections_enter	vampirtrace/pomp_lib.h	/^extern void POMP_Sections_enter(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Sections_exit	vampirtrace/pomp_lib.h	/^extern void POMP_Sections_exit(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Set_lock	vampirtrace/pomp_lib.h	/^extern void POMP_Set_lock(omp_lock_t *s);$/;"	p	signature:(omp_lock_t *s)
POMP_Set_nest_lock	vampirtrace/pomp_lib.h	/^extern void POMP_Set_nest_lock(omp_nest_lock_t *s);$/;"	p	signature:(omp_nest_lock_t *s)
POMP_Single_begin	vampirtrace/pomp_lib.h	/^extern void POMP_Single_begin(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Single_end	vampirtrace/pomp_lib.h	/^extern void POMP_Single_end(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Single_enter	vampirtrace/pomp_lib.h	/^extern void POMP_Single_enter(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Single_exit	vampirtrace/pomp_lib.h	/^extern void POMP_Single_exit(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Test_lock	vampirtrace/pomp_lib.h	/^extern int  POMP_Test_lock(omp_lock_t *s);$/;"	p	signature:(omp_lock_t *s)
POMP_Test_nest_lock	vampirtrace/pomp_lib.h	/^extern int  POMP_Test_nest_lock(omp_nest_lock_t *s);$/;"	p	signature:(omp_nest_lock_t *s)
POMP_Unset_lock	vampirtrace/pomp_lib.h	/^extern void POMP_Unset_lock(omp_lock_t *s);$/;"	p	signature:(omp_lock_t *s)
POMP_Unset_nest_lock	vampirtrace/pomp_lib.h	/^extern void POMP_Unset_nest_lock(omp_nest_lock_t *s);$/;"	p	signature:(omp_nest_lock_t *s)
POMP_Workshare_enter	vampirtrace/pomp_lib.h	/^extern void POMP_Workshare_enter(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
POMP_Workshare_exit	vampirtrace/pomp_lib.h	/^extern void POMP_Workshare_exit(struct ompregdescr* r);$/;"	p	signature:(struct ompregdescr* r)
PROC_NULL	openmpi/ompi/mpi/cxx/constants.h	/^static const int PROC_NULL = MPI_PROC_NULL;$/;"	v
PROD	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Op PROD;$/;"	x
PSHMEM_SHMEMX_H	pshmemx.h	13;"	d
PSHMEM_SHMEM_H	pshmem.h	13;"	d
Pack	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Pack(const void* inbuf, int incount, void *outbuf, $/;"	p	class:Datatype	access:public	signature:(const void* inbuf, int incount, void *outbuf, int outsize, int& position, const Comm &comm) const
Pack	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Pack(const void* inbuf, int incount,$/;"	f	class:MPI::Datatype	signature:(const void* inbuf, int incount, void *outbuf, int outsize, int& position, const MPI::Comm &comm) const
Pack_external	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Pack_external(const char* datarep, const void* inbuf, int incount,$/;"	p	class:Datatype	access:public	signature:(const char* datarep, const void* inbuf, int incount, void* outbuf, Aint outsize, Aint& position) const
Pack_external	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Pack_external(const char* datarep, const void* inbuf, int incount,$/;"	f	class:MPI::Datatype	signature:(const char* datarep, const void* inbuf, int incount, void* outbuf, MPI::Aint outsize, MPI::Aint& position) const
Pack_external_size	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual Aint Pack_external_size(const char* datarep, int incount) const;$/;"	p	class:Datatype	access:public	signature:(const char* datarep, int incount) const
Pack_external_size	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Pack_external_size(const char* datarep, int incount) const$/;"	f	class:MPI::Datatype	signature:(const char* datarep, int incount) const
Pack_size	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual int Pack_size(int incount, const Comm& comm) const;$/;"	p	class:Datatype	access:public	signature:(int incount, const Comm& comm) const
Pack_size	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Pack_size(int incount, const MPI::Comm& comm) const $/;"	f	class:MPI::Datatype	signature:(int incount, const MPI::Comm& comm) const
Pcontrol	openmpi/ompi/mpi/cxx/functions.h	/^Pcontrol(const int level, ...);$/;"	p	signature:(const int level, ...)
Pcontrol	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Pcontrol(const int level, ...)$/;"	f	class:MPI	signature:(const int level, ...)
Post	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Post(const MPI::Group& group, int assert) const;$/;"	p	class:Win	access:public	signature:(const MPI::Group& group, int assert) const
Post	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Post(const MPI::Group& group, int assert) const $/;"	f	class:MPI::Win	signature:(const MPI::Group& group, int assert) const
Preallocate	openmpi/ompi/mpi/cxx/file.h	/^  void Preallocate(MPI::Offset size);$/;"	p	class:File	access:public	signature:(MPI::Offset size)
Preallocate	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Preallocate(MPI::Offset size)$/;"	f	class:MPI::File	signature:(MPI::Offset size)
Prequest	openmpi/ompi/mpi/cxx/request.h	/^  Prequest() { }$/;"	f	class:Prequest	access:public	signature:()
Prequest	openmpi/ompi/mpi/cxx/request.h	/^  Prequest(const MPI_Request &i) : Request(i) { }$/;"	f	class:Prequest	access:public	signature:(const MPI_Request &i)
Prequest	openmpi/ompi/mpi/cxx/request.h	/^  Prequest(const Request& p) : Request(p) { }$/;"	f	class:Prequest	access:public	signature:(const Request& p)
Prequest	openmpi/ompi/mpi/cxx/request.h	/^class Prequest : public Request {$/;"	c	inherits:Request
Prequest::Prequest	openmpi/ompi/mpi/cxx/request.h	/^  Prequest() { }$/;"	f	class:Prequest	access:public	signature:()
Prequest::Prequest	openmpi/ompi/mpi/cxx/request.h	/^  Prequest(const MPI_Request &i) : Request(i) { }$/;"	f	class:Prequest	access:public	signature:(const MPI_Request &i)
Prequest::Prequest	openmpi/ompi/mpi/cxx/request.h	/^  Prequest(const Request& p) : Request(p) { }$/;"	f	class:Prequest	access:public	signature:(const Request& p)
Prequest::Start	openmpi/ompi/mpi/cxx/request.h	/^  virtual void Start();$/;"	p	class:Prequest	access:public	signature:()
Prequest::Startall	openmpi/ompi/mpi/cxx/request.h	/^  static void Startall(int count, Prequest array_of_requests[]);$/;"	p	class:Prequest	access:public	signature:(int count, Prequest array_of_requests[])
Prequest::operator =	openmpi/ompi/mpi/cxx/request.h	/^  Prequest& operator=(const Prequest& r) {$/;"	f	class:Prequest	access:public	signature:(const Prequest& r)
Prequest::operator =	openmpi/ompi/mpi/cxx/request.h	/^  Prequest& operator=(const Request& r) {$/;"	f	class:Prequest	access:public	signature:(const Request& r)
Prequest::~Prequest	openmpi/ompi/mpi/cxx/request.h	/^  virtual ~Prequest() { }$/;"	f	class:Prequest	access:public	signature:()
Probe	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Probe(int source, int tag) const;$/;"	p	class:Comm	access:public	signature:(int source, int tag) const
Probe	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Probe(int source, int tag, Status & status) const;$/;"	p	class:Comm	access:public	signature:(int source, int tag, Status & status) const
Probe	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Probe(int source, int tag) const$/;"	f	class:MPI::Comm	signature:(int source, int tag) const
Probe	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Probe(int source, int tag, MPI::Status & status) const$/;"	f	class:MPI::Comm	signature:(int source, int tag, MPI::Status & status) const
Publish_name	openmpi/ompi/mpi/cxx/functions.h	/^Publish_name(const char* service_name, const Info& info, $/;"	p	signature:(const char* service_name, const Info& info, const char* port_name)
Publish_name	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Publish_name(const char* service_name, $/;"	f	class:MPI	signature:(const char* service_name, const MPI::Info& info, const char* port_name)
Put	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Put(const void* origin_addr, int origin_count, $/;"	p	class:Win	access:public	signature:(const void* origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype) const
Put	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Put(const void* origin_addr, int origin_count, $/;"	f	class:MPI::Win	signature:(const void* origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype) const
Query_function	openmpi/ompi/mpi/cxx/request.h	/^    typedef int Query_function(void *, Status&);$/;"	t	class:Grequest	access:public
Query_thread	openmpi/ompi/mpi/cxx/functions.h	/^Query_thread();$/;"	p	signature:()
Query_thread	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Query_thread()$/;"	f	class:MPI	signature:()
REAL	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype REAL;$/;"	x
REAL2	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype REAL2;$/;"	x
REAL4	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype REAL4;$/;"	x
REAL8	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype REAL8;$/;"	x
REPLACE	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Op REPLACE;$/;"	x
REQUEST_NULL	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern Request            REQUEST_NULL;$/;"	x
ROOT	openmpi/ompi/mpi/cxx/constants.h	/^static const int ROOT = MPI_ROOT;$/;"	v
Range_excl	openmpi/ompi/mpi/cxx/group.h	/^  virtual Group Range_excl(int n, const int ranges[][3]) const;$/;"	p	class:Group	access:public	signature:(int n, const int ranges[][3]) const
Range_excl	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Range_excl(int n, const int ranges[][3]) const$/;"	f	class:MPI::Group	signature:(int n, const int ranges[][3]) const
Range_incl	openmpi/ompi/mpi/cxx/group.h	/^  virtual Group Range_incl(int n, const int ranges[][3]) const;$/;"	p	class:Group	access:public	signature:(int n, const int ranges[][3]) const
Range_incl	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Range_incl(int n, const int ranges[][3]) const$/;"	f	class:MPI::Group	signature:(int n, const int ranges[][3]) const
Read	openmpi/ompi/mpi/cxx/file.h	/^  void Read(void* buf, int count, const MPI::Datatype& datatype);$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read	openmpi/ompi/mpi/cxx/file.h	/^  void Read(void* buf, int count, const MPI::Datatype& datatype,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_all	openmpi/ompi/mpi/cxx/file.h	/^  void Read_all(void* buf, int count, const MPI::Datatype& datatype);$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_all	openmpi/ompi/mpi/cxx/file.h	/^  void Read_all(void* buf, int count, const MPI::Datatype& datatype,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_all	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_all	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_all_begin	openmpi/ompi/mpi/cxx/file.h	/^  void Read_all_begin(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_all_begin	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all_begin(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_all_end	openmpi/ompi/mpi/cxx/file.h	/^  void Read_all_end(void* buf);$/;"	p	class:File	access:public	signature:(void* buf)
Read_all_end	openmpi/ompi/mpi/cxx/file.h	/^  void Read_all_end(void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(void* buf, MPI::Status& status)
Read_all_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all_end(void* buf)$/;"	f	class:MPI::File	signature:(void* buf)
Read_all_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_all_end(void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(void* buf, MPI::Status& status)
Read_at	openmpi/ompi/mpi/cxx/file.h	/^  void Read_at(MPI::Offset offset, $/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
Read_at	openmpi/ompi/mpi/cxx/file.h	/^  void Read_at(MPI::Offset offset, void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_at	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at(MPI::Offset offset, $/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
Read_at	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at(MPI::Offset offset, void* buf, int count,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_at_all	openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all(MPI::Offset offset, void* buf, int count, $/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
Read_at_all	openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all(MPI::Offset offset, void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_at_all	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all(MPI::Offset offset, void* buf, int count, $/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
Read_at_all	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all(MPI::Offset offset, void* buf, int count,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_at_all_begin	openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all_begin(MPI::Offset offset, void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
Read_at_all_begin	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all_begin(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, void* buf, int count, const MPI::Datatype& datatype)
Read_at_all_end	openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all_end(void* buf);$/;"	p	class:File	access:public	signature:(void* buf)
Read_at_all_end	openmpi/ompi/mpi/cxx/file.h	/^  void Read_at_all_end(void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(void* buf, MPI::Status& status)
Read_at_all_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all_end(void* buf)$/;"	f	class:MPI::File	signature:(void* buf)
Read_at_all_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_at_all_end(void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(void* buf, MPI::Status& status)
Read_ordered	openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_ordered	openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_ordered	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_ordered	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_ordered_begin	openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered_begin(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_ordered_begin	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered_begin(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_ordered_end	openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered_end(void* buf);$/;"	p	class:File	access:public	signature:(void* buf)
Read_ordered_end	openmpi/ompi/mpi/cxx/file.h	/^  void Read_ordered_end(void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(void* buf, MPI::Status& status)
Read_ordered_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered_end(void* buf)$/;"	f	class:MPI::File	signature:(void* buf)
Read_ordered_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_ordered_end(void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(void* buf, MPI::Status& status)
Read_shared	openmpi/ompi/mpi/cxx/file.h	/^  void Read_shared(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_shared	openmpi/ompi/mpi/cxx/file.h	/^  void Read_shared(void* buf, int count,$/;"	p	class:File	access:public	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Read_shared	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_shared(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype)
Read_shared	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Read_shared(void* buf, int count,$/;"	f	class:MPI::File	signature:(void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Real_init	openmpi/ompi/mpi/cxx/functions.h	/^Real_init();$/;"	p	signature:()
Real_init	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Real_init()$/;"	f	class:MPI	signature:()
Recv	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Recv(void *buf, int count, const Datatype & datatype,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int source, int tag) const
Recv	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Recv(void *buf, int count, const Datatype & datatype,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int source, int tag, Status & status) const
Recv	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Recv(void *buf, int count, const MPI::Datatype & datatype,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int source, int tag) const
Recv	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Recv(void *buf, int count, const MPI::Datatype & datatype,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int source, int tag, MPI::Status & status) const
Recv_init	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Recv_init(void *buf, int count,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int source, int tag) const
Recv_init	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Recv_init(void *buf, int count,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int source, int tag) const
Reduce	openmpi/ompi/mpi/cxx/comm.h	/^  Reduce(const void *sendbuf, void *recvbuf, int count, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, void *recvbuf, int count, const Datatype & datatype, const Op & op, int root) const
Reduce	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Reduce(const void *sendbuf, void *recvbuf, int count, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, void *recvbuf, int count, const MPI::Datatype & datatype, const MPI::Op& op, int root) const
Reduce_local	openmpi/ompi/mpi/cxx/op.h	/^  virtual void Reduce_local(const void *inbuf, void *inoutbuf, int count, $/;"	p	class:Op	access:public	signature:(const void *inbuf, void *inoutbuf, int count, const MPI::Datatype& datatype) const
Reduce_local	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::Reduce_local(const void *inbuf, void *inoutbuf, int count, $/;"	f	class:MPI::Op	signature:(const void *inbuf, void *inoutbuf, int count, const MPI::Datatype& datatype) const
Reduce_scatter	openmpi/ompi/mpi/cxx/comm.h	/^  Reduce_scatter(const void *sendbuf, void *recvbuf, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, void *recvbuf, int recvcounts[], const Datatype & datatype, const Op & op) const
Reduce_scatter	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Reduce_scatter(const void *sendbuf, void *recvbuf, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, void *recvbuf, int recvcounts[], const MPI::Datatype & datatype, const MPI::Op& op) const
Register_datarep	openmpi/ompi/mpi/cxx/file.h	/^void Register_datarep(const char* datarep, $/;"	p	signature:(const char* datarep, Datarep_conversion_function* read_conversion_fn, Datarep_conversion_function* write_conversion_fn, Datarep_extent_function* dtype_file_extent_fn, void* extra_state)
Register_datarep	openmpi/ompi/mpi/cxx/file.h	/^void Register_datarep(const char* datarep, $/;"	p	signature:(const char* datarep, Datarep_conversion_function* read_conversion_fn, MPI_Datarep_conversion_function* write_conversion_fn, Datarep_extent_function* dtype_file_extent_fn, void* extra_state)
Register_datarep	openmpi/ompi/mpi/cxx/file.h	/^void Register_datarep(const char* datarep, $/;"	p	signature:(const char* datarep, MPI_Datarep_conversion_function* read_conversion_fn, Datarep_conversion_function* write_conversion_fn, Datarep_extent_function* dtype_file_extent_fn, void* extra_state)
Register_datarep	openmpi/ompi/mpi/cxx/file.h	/^void Register_datarep(const char* datarep, $/;"	p	signature:(const char* datarep, MPI_Datarep_conversion_function* read_conversion_fn, MPI_Datarep_conversion_function* write_conversion_fn, Datarep_extent_function* dtype_file_extent_fn, void* extra_state)
Request	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Request;$/;"	x
Request	openmpi/ompi/mpi/cxx/request.h	/^  Request() : mpi_request(MPI_REQUEST_NULL) { }$/;"	f	class:Request	access:public	signature:()
Request	openmpi/ompi/mpi/cxx/request.h	/^  Request(MPI_Request i) : mpi_request(i) { }$/;"	f	class:Request	access:public	signature:(MPI_Request i)
Request	openmpi/ompi/mpi/cxx/request.h	/^  Request(const Request& r) : mpi_request(r.mpi_request) { }$/;"	f	class:Request	access:public	signature:(const Request& r)
Request	openmpi/ompi/mpi/cxx/request.h	/^class Request {$/;"	c
Request::Cancel	openmpi/ompi/mpi/cxx/request.h	/^  virtual void Cancel(void) const;$/;"	p	class:Request	access:public	signature:(void) const
Request::Free	openmpi/ompi/mpi/cxx/request.h	/^  virtual void Free(void);$/;"	p	class:Request	access:public	signature:(void)
Request::Get_status	openmpi/ompi/mpi/cxx/request.h	/^  virtual bool Get_status() const;$/;"	p	class:Request	access:public	signature:() const
Request::Get_status	openmpi/ompi/mpi/cxx/request.h	/^  virtual bool Get_status(Status& status) const;$/;"	p	class:Request	access:public	signature:(Status& status) const
Request::Request	openmpi/ompi/mpi/cxx/request.h	/^  Request() : mpi_request(MPI_REQUEST_NULL) { }$/;"	f	class:Request	access:public	signature:()
Request::Request	openmpi/ompi/mpi/cxx/request.h	/^  Request(MPI_Request i) : mpi_request(i) { }$/;"	f	class:Request	access:public	signature:(MPI_Request i)
Request::Request	openmpi/ompi/mpi/cxx/request.h	/^  Request(const Request& r) : mpi_request(r.mpi_request) { }$/;"	f	class:Request	access:public	signature:(const Request& r)
Request::Test	openmpi/ompi/mpi/cxx/request.h	/^  virtual bool Test();$/;"	p	class:Request	access:public	signature:()
Request::Test	openmpi/ompi/mpi/cxx/request.h	/^  virtual bool Test(Status &status);$/;"	p	class:Request	access:public	signature:(Status &status)
Request::Testall	openmpi/ompi/mpi/cxx/request.h	/^  static bool Testall(int count, Request req_array[]);$/;"	p	class:Request	access:public	signature:(int count, Request req_array[])
Request::Testall	openmpi/ompi/mpi/cxx/request.h	/^  static bool Testall(int count, Request req_array[], Status stat_array[]);$/;"	p	class:Request	access:public	signature:(int count, Request req_array[], Status stat_array[])
Request::Testany	openmpi/ompi/mpi/cxx/request.h	/^  static bool Testany(int count, Request array[], int& index);$/;"	p	class:Request	access:public	signature:(int count, Request array[], int& index)
Request::Testany	openmpi/ompi/mpi/cxx/request.h	/^  static bool Testany(int count, Request array[], int& index, Status& status);$/;"	p	class:Request	access:public	signature:(int count, Request array[], int& index, Status& status)
Request::Testsome	openmpi/ompi/mpi/cxx/request.h	/^  static int Testsome(int incount, Request req_array[],$/;"	p	class:Request	access:public	signature:(int incount, Request req_array[], int array_of_indices[])
Request::Testsome	openmpi/ompi/mpi/cxx/request.h	/^  static int Testsome(int incount, Request req_array[],$/;"	p	class:Request	access:public	signature:(int incount, Request req_array[], int array_of_indices[], Status stat_array[])
Request::Wait	openmpi/ompi/mpi/cxx/request.h	/^  virtual void Wait();$/;"	p	class:Request	access:public	signature:()
Request::Wait	openmpi/ompi/mpi/cxx/request.h	/^  virtual void Wait(Status &status);$/;"	p	class:Request	access:public	signature:(Status &status)
Request::Waitall	openmpi/ompi/mpi/cxx/request.h	/^  static void Waitall(int count, Request req_array[]);$/;"	p	class:Request	access:public	signature:(int count, Request req_array[])
Request::Waitall	openmpi/ompi/mpi/cxx/request.h	/^  static void Waitall(int count, Request req_array[], Status stat_array[]);$/;"	p	class:Request	access:public	signature:(int count, Request req_array[], Status stat_array[])
Request::Waitany	openmpi/ompi/mpi/cxx/request.h	/^  static int Waitany(int count, Request array[]);$/;"	p	class:Request	access:public	signature:(int count, Request array[])
Request::Waitany	openmpi/ompi/mpi/cxx/request.h	/^  static int Waitany(int count, Request array[], Status& status);$/;"	p	class:Request	access:public	signature:(int count, Request array[], Status& status)
Request::Waitsome	openmpi/ompi/mpi/cxx/request.h	/^  static int Waitsome(int incount, Request req_array[],$/;"	p	class:Request	access:public	signature:(int incount, Request req_array[], int array_of_indices[])
Request::Waitsome	openmpi/ompi/mpi/cxx/request.h	/^  static int Waitsome(int incount, Request req_array[],$/;"	p	class:Request	access:public	signature:(int incount, Request req_array[], int array_of_indices[], Status stat_array[])
Request::mpi_request	openmpi/ompi/mpi/cxx/request.h	/^  MPI_Request mpi_request;$/;"	m	class:Request	access:protected
Request::operator !=	openmpi/ompi/mpi/cxx/request.h	/^  bool operator!= (const Request &a) $/;"	f	class:Request	access:public	signature:(const Request &a)
Request::operator =	openmpi/ompi/mpi/cxx/request.h	/^  Request& operator= (const MPI_Request &i) {$/;"	f	class:Request	access:public	signature:(const MPI_Request &i)
Request::operator =	openmpi/ompi/mpi/cxx/request.h	/^  Request& operator=(const Request& r) {$/;"	f	class:Request	access:public	signature:(const Request& r)
Request::operator ==	openmpi/ompi/mpi/cxx/request.h	/^  bool operator== (const Request &a) $/;"	f	class:Request	access:public	signature:(const Request &a)
Request::operator MPI_Request	openmpi/ompi/mpi/cxx/request.h	/^  operator MPI_Request () const { return mpi_request; }$/;"	f	class:Request	access:public	signature:() const
Request::~Request	openmpi/ompi/mpi/cxx/request.h	/^  virtual ~Request() {}$/;"	f	class:Request	access:public	signature:()
Rsend	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Rsend(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Rsend	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Rsend(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Rsend_init	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Rsend_init(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Rsend_init	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Rsend_init(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
SEEK_CUR	openmpi/ompi/mpi/cxx/constants.h	/^static const int SEEK_CUR = ::SEEK_CUR;$/;"	v
SEEK_CUR	openmpi/ompi/mpi/cxx/mpicxx.h	/^static const int SEEK_CUR = ompi_stdio_seek_cur;$/;"	v
SEEK_CUR	openmpi/ompi/mpi/cxx/mpicxx.h	62;"	d
SEEK_END	openmpi/ompi/mpi/cxx/constants.h	/^static const int SEEK_END = ::SEEK_END;$/;"	v
SEEK_END	openmpi/ompi/mpi/cxx/mpicxx.h	/^static const int SEEK_END = ompi_stdio_seek_end;$/;"	v
SEEK_END	openmpi/ompi/mpi/cxx/mpicxx.h	63;"	d
SEEK_SET	openmpi/ompi/mpi/cxx/constants.h	/^static const int SEEK_SET = ::SEEK_SET;$/;"	v
SEEK_SET	openmpi/ompi/mpi/cxx/mpicxx.h	/^static const int SEEK_SET = ompi_stdio_seek_set;$/;"	v
SEEK_SET	openmpi/ompi/mpi/cxx/mpicxx.h	61;"	d
SHMEM_BARRIER_SYNC_SIZE	shmem.h	99;"	d
SHMEM_BCAST_SYNC_SIZE	shmem.h	100;"	d
SHMEM_CMP_EQ	shmem.h	/^    SHMEM_CMP_EQ,$/;"	e	enum:shmem_wait_ops
SHMEM_CMP_GE	shmem.h	/^    SHMEM_CMP_GE$/;"	e	enum:shmem_wait_ops
SHMEM_CMP_GT	shmem.h	/^    SHMEM_CMP_GT,$/;"	e	enum:shmem_wait_ops
SHMEM_CMP_LE	shmem.h	/^    SHMEM_CMP_LE,$/;"	e	enum:shmem_wait_ops
SHMEM_CMP_LT	shmem.h	/^    SHMEM_CMP_LT,$/;"	e	enum:shmem_wait_ops
SHMEM_CMP_NE	shmem.h	/^    SHMEM_CMP_NE,$/;"	e	enum:shmem_wait_ops
SHMEM_COLLECT_SYNC_SIZE	shmem.h	101;"	d
SHMEM_HEAP_SIZE	shmem.h	73;"	d
SHMEM_HEAP_TYPE	shmem.h	78;"	d
SHMEM_REDUCE_MIN_WRKDATA_SIZE	shmem.h	103;"	d
SHMEM_REDUCE_SYNC_SIZE	shmem.h	102;"	d
SHMEM_SYNC_VALUE	shmem.h	104;"	d
SHORT	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype SHORT;          $/;"	x
SHORT_INT	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype SHORT_INT;$/;"	x
SIGNED_CHAR	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype SIGNED_CHAR;$/;"	x
SIMILAR	openmpi/ompi/mpi/cxx/constants.h	/^static const int SIMILAR = MPI_SIMILAR;$/;"	v
SIZEOF_LONG	vampirtrace/vt_inttypes.h	21;"	d
SUCCESS	openmpi/ompi/mpi/cxx/constants.h	/^static const int SUCCESS = MPI_SUCCESS;$/;"	v
SUM	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Op SUM;$/;"	x
Scan	openmpi/ompi/mpi/cxx/intracomm.h	/^  Scan(const void *sendbuf, void *recvbuf, int count, $/;"	p	class:Intracomm	access:public	signature:(const void *sendbuf, void *recvbuf, int count, const Datatype & datatype, const Op & op) const
Scan	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Scan(const void *sendbuf, void *recvbuf, int count, $/;"	f	class:MPI::Intracomm	signature:(const void *sendbuf, void *recvbuf, int count, const MPI::Datatype & datatype, const MPI::Op& op) const
Scatter	openmpi/ompi/mpi/cxx/comm.h	/^  Scatter(const void *sendbuf, int sendcount, $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype, int root) const
Scatter	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Scatter(const void *sendbuf, int sendcount, $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int root) const
Scatterv	openmpi/ompi/mpi/cxx/comm.h	/^  Scatterv(const void *sendbuf, const int sendcounts[], $/;"	p	class:Comm	access:public	signature:(const void *sendbuf, const int sendcounts[], const int displs[], const Datatype & sendtype, void *recvbuf, int recvcount, const Datatype & recvtype, int root) const
Scatterv	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Scatterv(const void *sendbuf, const int sendcounts[], $/;"	f	class:MPI::Comm	signature:(const void *sendbuf, const int sendcounts[], const int displs[], const MPI::Datatype & sendtype, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int root) const
Seek	openmpi/ompi/mpi/cxx/file.h	/^  void Seek(MPI::Offset offset, int whence);$/;"	p	class:File	access:public	signature:(MPI::Offset offset, int whence)
Seek	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Seek(MPI::Offset offset, int whence)$/;"	f	class:MPI::File	signature:(MPI::Offset offset, int whence)
Seek_shared	openmpi/ompi/mpi/cxx/file.h	/^  void Seek_shared(MPI::Offset offset, int whence);$/;"	p	class:File	access:public	signature:(MPI::Offset offset, int whence)
Seek_shared	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Seek_shared(MPI::Offset offset, int whence)$/;"	f	class:MPI::File	signature:(MPI::Offset offset, int whence)
Send	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Send(const void *buf, int count, $/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Send	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Send(const void *buf, int count, $/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Send_init	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Send_init(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Send_init	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Send_init(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Sendrecv	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Sendrecv(const void *sendbuf, int sendcount,$/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, int dest, int sendtag, void *recvbuf, int recvcount, const Datatype & recvtype, int source, int recvtag) const
Sendrecv	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Sendrecv(const void *sendbuf, int sendcount,$/;"	p	class:Comm	access:public	signature:(const void *sendbuf, int sendcount, const Datatype & sendtype, int dest, int sendtag, void *recvbuf, int recvcount, const Datatype & recvtype, int source, int recvtag, Status & status) const
Sendrecv	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Sendrecv(const void *sendbuf, int sendcount,$/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, int dest, int sendtag, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int source, int recvtag) const
Sendrecv	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Sendrecv(const void *sendbuf, int sendcount,$/;"	f	class:MPI::Comm	signature:(const void *sendbuf, int sendcount, const MPI::Datatype & sendtype, int dest, int sendtag, void *recvbuf, int recvcount, const MPI::Datatype & recvtype, int source, int recvtag, MPI::Status & status) const
Sendrecv_replace	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Sendrecv_replace(void *buf, int count,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int dest, int sendtag, int source, int recvtag) const
Sendrecv_replace	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Sendrecv_replace(void *buf, int count,$/;"	p	class:Comm	access:public	signature:(void *buf, int count, const Datatype & datatype, int dest, int sendtag, int source, int recvtag, Status & status) const
Sendrecv_replace	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Sendrecv_replace(void *buf, int count,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int dest, int sendtag, int source, int recvtag) const
Sendrecv_replace	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Sendrecv_replace(void *buf, int count,$/;"	f	class:MPI::Comm	signature:(void *buf, int count, const MPI::Datatype & datatype, int dest, int sendtag, int source, int recvtag, MPI::Status & status) const
Set	openmpi/ompi/mpi/cxx/info.h	/^  virtual void Set(const char* key, const char* value);$/;"	p	class:Info	access:public	signature:(const char* key, const char* value)
Set	openmpi/ompi/mpi/cxx/info_inln.h	/^MPI::Info::Set(const char* key, const char* value)$/;"	f	class:MPI::Info	signature:(const char* key, const char* value)
Set_atomicity	openmpi/ompi/mpi/cxx/file.h	/^  void Set_atomicity(bool flag);$/;"	p	class:File	access:public	signature:(bool flag)
Set_atomicity	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_atomicity(bool flag)$/;"	f	class:MPI::File	signature:(bool flag)
Set_attr	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Set_attr(int comm_keyval, const void* attribute_val) const;$/;"	p	class:Comm	access:public	signature:(int comm_keyval, const void* attribute_val) const
Set_attr	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Set_attr(int comm_keyval, const void* attribute_val) const$/;"	f	class:MPI::Comm	signature:(int comm_keyval, const void* attribute_val) const
Set_attr	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Set_attr(int type_keyval, const void* attribute_val);$/;"	p	class:Datatype	access:public	signature:(int type_keyval, const void* attribute_val)
Set_attr	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Set_attr(int type_keyval, const void* attribute_val)$/;"	f	class:MPI::Datatype	signature:(int type_keyval, const void* attribute_val)
Set_attr	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Set_attr(int win_keyval, const void* attribute_val);$/;"	p	class:Win	access:public	signature:(int win_keyval, const void* attribute_val)
Set_attr	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Set_attr(int win_keyval, const void* attribute_val) $/;"	f	class:MPI::Win	signature:(int win_keyval, const void* attribute_val)
Set_cancelled	openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_cancelled(bool flag);$/;"	p	class:Status	access:public	signature:(bool flag)
Set_cancelled	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_cancelled(bool flag)$/;"	f	class:MPI::Status	signature:(bool flag)
Set_elements	openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_elements(const MPI::Datatype& datatype, int count);$/;"	p	class:Status	access:public	signature:(const MPI::Datatype& datatype, int count)
Set_elements	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_elements(const MPI::Datatype& datatype, int count)$/;"	f	class:MPI::Status	signature:(const MPI::Datatype& datatype, int count)
Set_errhandler	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Set_errhandler(const Errhandler& errhandler);$/;"	p	class:Comm	access:public	signature:(const Errhandler& errhandler)
Set_errhandler	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Set_errhandler(const MPI::Errhandler& errhandler)$/;"	f	class:MPI::Comm	signature:(const MPI::Errhandler& errhandler)
Set_errhandler	openmpi/ompi/mpi/cxx/file.h	/^  void Set_errhandler(const MPI::Errhandler& errhandler) const;$/;"	p	class:File	access:public	signature:(const MPI::Errhandler& errhandler) const
Set_errhandler	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_errhandler(const MPI::Errhandler& errhandler) const$/;"	f	class:MPI::File	signature:(const MPI::Errhandler& errhandler) const
Set_errhandler	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Set_errhandler(const MPI::Errhandler& errhandler) const;$/;"	p	class:Win	access:public	signature:(const MPI::Errhandler& errhandler) const
Set_errhandler	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Set_errhandler(const MPI::Errhandler& errhandler) const$/;"	f	class:MPI::Win	signature:(const MPI::Errhandler& errhandler) const
Set_error	openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_error(int error);$/;"	p	class:Status	access:public	signature:(int error)
Set_error	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_error(int error)$/;"	f	class:MPI::Status	signature:(int error)
Set_info	openmpi/ompi/mpi/cxx/file.h	/^  void Set_info(const MPI::Info& info);$/;"	p	class:File	access:public	signature:(const MPI::Info& info)
Set_info	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_info(const MPI::Info& info)$/;"	f	class:MPI::File	signature:(const MPI::Info& info)
Set_name	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Set_name(const char* comm_name);$/;"	p	class:Comm	access:public	signature:(const char* comm_name)
Set_name	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Set_name(const char* comm_name) $/;"	f	class:MPI::Comm	signature:(const char* comm_name)
Set_name	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Set_name(const char* type_name);$/;"	p	class:Datatype	access:public	signature:(const char* type_name)
Set_name	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Set_name(const char* type_name)$/;"	f	class:MPI::Datatype	signature:(const char* type_name)
Set_name	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Set_name(const char* win_name);$/;"	p	class:Win	access:public	signature:(const char* win_name)
Set_name	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Set_name(const char* win_name) $/;"	f	class:MPI::Win	signature:(const char* win_name)
Set_size	openmpi/ompi/mpi/cxx/file.h	/^  void Set_size(MPI::Offset size);$/;"	p	class:File	access:public	signature:(MPI::Offset size)
Set_size	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_size(MPI::Offset size)$/;"	f	class:MPI::File	signature:(MPI::Offset size)
Set_source	openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_source(int source);$/;"	p	class:Status	access:public	signature:(int source)
Set_source	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_source(int source)$/;"	f	class:MPI::Status	signature:(int source)
Set_tag	openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_tag(int tag);$/;"	p	class:Status	access:public	signature:(int tag)
Set_tag	openmpi/ompi/mpi/cxx/status_inln.h	/^MPI::Status::Set_tag(int tag)$/;"	f	class:MPI::Status	signature:(int tag)
Set_view	openmpi/ompi/mpi/cxx/file.h	/^  void Set_view(MPI::Offset disp,  const MPI::Datatype& etype,$/;"	p	class:File	access:public	signature:(MPI::Offset disp, const MPI::Datatype& etype, const MPI::Datatype& filetype, const char* datarep, const MPI::Info& info)
Set_view	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Set_view(MPI::Offset disp,$/;"	f	class:MPI::File	signature:(MPI::Offset disp, const MPI::Datatype& etype, const MPI::Datatype& filetype, const char* datarep, const MPI::Info& info)
Shift	openmpi/ompi/mpi/cxx/topology.h	/^  virtual void Shift(int direction, int disp,$/;"	p	class:Cartcomm	access:public	signature:(int direction, int disp, int &rank_source, int &rank_dest) const
Shift	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Shift(int direction, int disp,$/;"	f	class:MPI::Cartcomm	signature:(int direction, int disp, int &rank_source, int &rank_dest) const
Spawn	openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Spawn(const char* command, const char* argv[],$/;"	p	class:Intracomm	access:public	signature:(const char* command, const char* argv[], int maxprocs, const Info& info, int root) const
Spawn	openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Spawn(const char* command, const char* argv[],$/;"	p	class:Intracomm	access:public	signature:(const char* command, const char* argv[], int maxprocs, const Info& info, int root, int array_of_errcodes[]) const
Spawn	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Spawn(const char* command, const char* argv[],$/;"	f	class:MPI::Intracomm	signature:(const char* command, const char* argv[], int maxprocs, const MPI::Info& info, int root) const
Spawn	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Spawn(const char* command, const char* argv[],$/;"	f	class:MPI::Intracomm	signature:(const char* command, const char* argv[], int maxprocs, const MPI::Info& info, int root, int array_of_errcodes[]) const
Spawn_multiple	openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Spawn_multiple(int count, const char* array_of_commands[],$/;"	p	class:Intracomm	access:public	signature:(int count, const char* array_of_commands[], const char** array_of_argv[], const int array_of_maxprocs[], const Info array_of_info[], int root)
Spawn_multiple	openmpi/ompi/mpi/cxx/intracomm.h	/^  virtual Intercomm Spawn_multiple(int count, const char* array_of_commands[],$/;"	p	class:Intracomm	access:public	signature:(int count, const char* array_of_commands[], const char** array_of_argv[], const int array_of_maxprocs[], const Info array_of_info[], int root, int array_of_errcodes[])
Spawn_multiple	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Spawn_multiple(int count, $/;"	f	class:MPI::Intracomm	signature:(int count, const char* array_of_commands[], const char** array_of_argv[], const int array_of_maxprocs[], const Info array_of_info[], int root)
Spawn_multiple	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Spawn_multiple(int count,$/;"	f	class:MPI::Intracomm	signature:(int count, const char* array_of_commands[], const char** array_of_argv[], const int array_of_maxprocs[], const Info array_of_info[], int root, int array_of_errcodes[])
Split	openmpi/ompi/mpi/cxx/intercomm.h	/^  virtual Intercomm Split(int color, int key) const;$/;"	p	class:Intercomm	access:public	signature:(int color, int key) const
Split	openmpi/ompi/mpi/cxx/intercomm_inln.h	/^MPI::Intercomm::Split(int color, int key) const$/;"	f	class:MPI::Intercomm	signature:(int color, int key) const
Split	openmpi/ompi/mpi/cxx/intracomm.h	/^  Split(int color, int key) const;$/;"	p	class:Intracomm	access:public	signature:(int color, int key) const
Split	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::Split(int color, int key) const$/;"	f	class:MPI::Intracomm	signature:(int color, int key) const
Ssend	openmpi/ompi/mpi/cxx/comm.h	/^  virtual void Ssend(const void *buf, int count, $/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Ssend	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Ssend(const void *buf, int count, $/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Ssend_init	openmpi/ompi/mpi/cxx/comm.h	/^  virtual Prequest Ssend_init(const void *buf, int count,$/;"	p	class:Comm	access:public	signature:(const void *buf, int count, const Datatype & datatype, int dest, int tag) const
Ssend_init	openmpi/ompi/mpi/cxx/comm_inln.h	/^MPI::Comm::Ssend_init(const void *buf, int count,$/;"	f	class:MPI::Comm	signature:(const void *buf, int count, const MPI::Datatype & datatype, int dest, int tag) const
Start	openmpi/ompi/mpi/cxx/request.h	/^    static Grequest Start(Query_function *, Free_function *,$/;"	p	class:Grequest	access:public	signature:(Query_function *, Free_function *, Cancel_function *, void *)
Start	openmpi/ompi/mpi/cxx/request.h	/^  virtual void Start();$/;"	p	class:Prequest	access:public	signature:()
Start	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Grequest::Start(Query_function *query_fn, Free_function *free_fn,$/;"	f	class:MPI::Grequest	signature:(Query_function *query_fn, Free_function *free_fn, Cancel_function *cancel_fn, void *extra)
Start	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Prequest::Start()$/;"	f	class:MPI::Prequest	signature:()
Start	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Start(const MPI::Group& group, int assert) const; $/;"	p	class:Win	access:public	signature:(const MPI::Group& group, int assert) const
Start	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Start(const MPI::Group& group, int assert) const$/;"	f	class:MPI::Win	signature:(const MPI::Group& group, int assert) const
Startall	openmpi/ompi/mpi/cxx/request.h	/^  static void Startall(int count, Prequest array_of_requests[]);$/;"	p	class:Prequest	access:public	signature:(int count, Prequest array_of_requests[])
Startall	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Prequest::Startall(int count, MPI:: Prequest array_of_requests[])$/;"	f	class:MPI::Prequest	signature:(int count, MPI:: Prequest array_of_requests[])
Status	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Status;$/;"	x
Status	openmpi/ompi/mpi/cxx/status.h	/^  Status() : mpi_status() { }$/;"	f	class:Status	access:public	signature:()
Status	openmpi/ompi/mpi/cxx/status.h	/^  Status(const MPI_Status &i) : mpi_status(i) { }$/;"	f	class:Status	access:public	signature:(const MPI_Status &i)
Status	openmpi/ompi/mpi/cxx/status.h	/^  Status(const Status& data) : mpi_status(data.mpi_status) { }$/;"	f	class:Status	access:public	signature:(const Status& data)
Status	openmpi/ompi/mpi/cxx/status.h	/^class Status {$/;"	c
Status::Get_count	openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_count(const Datatype& datatype) const;$/;"	p	class:Status	access:public	signature:(const Datatype& datatype) const
Status::Get_elements	openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_elements(const Datatype& datatype) const;$/;"	p	class:Status	access:public	signature:(const Datatype& datatype) const
Status::Get_error	openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_error() const;$/;"	p	class:Status	access:public	signature:() const
Status::Get_source	openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_source() const;$/;"	p	class:Status	access:public	signature:() const
Status::Get_tag	openmpi/ompi/mpi/cxx/status.h	/^  virtual int Get_tag() const;$/;"	p	class:Status	access:public	signature:() const
Status::Is_cancelled	openmpi/ompi/mpi/cxx/status.h	/^  virtual bool Is_cancelled() const;$/;"	p	class:Status	access:public	signature:() const
Status::Set_cancelled	openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_cancelled(bool flag);$/;"	p	class:Status	access:public	signature:(bool flag)
Status::Set_elements	openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_elements(const MPI::Datatype& datatype, int count);$/;"	p	class:Status	access:public	signature:(const MPI::Datatype& datatype, int count)
Status::Set_error	openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_error(int error);$/;"	p	class:Status	access:public	signature:(int error)
Status::Set_source	openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_source(int source);$/;"	p	class:Status	access:public	signature:(int source)
Status::Set_tag	openmpi/ompi/mpi/cxx/status.h	/^  virtual void Set_tag(int tag);$/;"	p	class:Status	access:public	signature:(int tag)
Status::Status	openmpi/ompi/mpi/cxx/status.h	/^  Status() : mpi_status() { }$/;"	f	class:Status	access:public	signature:()
Status::Status	openmpi/ompi/mpi/cxx/status.h	/^  Status(const MPI_Status &i) : mpi_status(i) { }$/;"	f	class:Status	access:public	signature:(const MPI_Status &i)
Status::Status	openmpi/ompi/mpi/cxx/status.h	/^  Status(const Status& data) : mpi_status(data.mpi_status) { }$/;"	f	class:Status	access:public	signature:(const Status& data)
Status::mpi_status	openmpi/ompi/mpi/cxx/status.h	/^  MPI_Status mpi_status;$/;"	m	class:Status	access:protected
Status::operator =	openmpi/ompi/mpi/cxx/status.h	/^  Status& operator= (const MPI_Status &i) {$/;"	f	class:Status	access:public	signature:(const MPI_Status &i)
Status::operator =	openmpi/ompi/mpi/cxx/status.h	/^  Status& operator=(const Status& data) {$/;"	f	class:Status	access:public	signature:(const Status& data)
Status::operator MPI_Status	openmpi/ompi/mpi/cxx/status.h	/^  operator MPI_Status () const { return mpi_status; }$/;"	f	class:Status	access:public	signature:() const
Status::~Status	openmpi/ompi/mpi/cxx/status.h	/^  virtual ~Status() {}$/;"	f	class:Status	access:public	signature:()
Stuttgart	mpif.h	/^! Copyright (c) 2004-2005 High Performance Computing Center Stuttgart,$/;"	v
Sub	openmpi/ompi/mpi/cxx/topology.h	/^  virtual Cartcomm Sub(const bool remain_dims[]) const;$/;"	p	class:Cartcomm	access:public	signature:(const bool remain_dims[]) const
Sub	openmpi/ompi/mpi/cxx/topology_inln.h	/^MPI::Cartcomm::Sub(const bool remain_dims[]) const$/;"	f	class:MPI::Cartcomm	signature:(const bool remain_dims[]) const
Sync	openmpi/ompi/mpi/cxx/file.h	/^  void Sync();$/;"	p	class:File	access:public	signature:()
Sync	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Sync()$/;"	f	class:MPI::File	signature:()
Systems	mpif-sizeof.h	/^! Copyright (c) 2014 Cisco Systems, Inc.  All rights reserved.$/;"	v
Systems	mpif.h	/^! Copyright (c) 2006-2014 Cisco Systems, Inc.  All rights reserved.$/;"	v
TAG_UB	openmpi/ompi/mpi/cxx/constants.h	/^static const int TAG_UB = MPI_TAG_UB;$/;"	v
THREAD_FUNNELED	openmpi/ompi/mpi/cxx/constants.h	/^static const int THREAD_FUNNELED = MPI_THREAD_FUNNELED;$/;"	v
THREAD_MULTIPLE	openmpi/ompi/mpi/cxx/constants.h	/^static const int THREAD_MULTIPLE = MPI_THREAD_MULTIPLE;$/;"	v
THREAD_SERIALIZED	openmpi/ompi/mpi/cxx/constants.h	/^static const int THREAD_SERIALIZED = MPI_THREAD_SERIALIZED;$/;"	v
THREAD_SINGLE	openmpi/ompi/mpi/cxx/constants.h	/^static const int THREAD_SINGLE = MPI_THREAD_SINGLE;$/;"	v
TWODOUBLE_PRECISION	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype TWODOUBLE_PRECISION;$/;"	x
TWOINT	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype TWOINT;$/;"	x
TWOINTEGER	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype TWOINTEGER;$/;"	x
TWOREAL	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype TWOREAL;$/;"	x
TYPECLASS_COMPLEX	openmpi/ompi/mpi/cxx/constants.h	/^static const int TYPECLASS_COMPLEX = MPI_TYPECLASS_COMPLEX;$/;"	v
TYPECLASS_INTEGER	openmpi/ompi/mpi/cxx/constants.h	/^static const int TYPECLASS_INTEGER = MPI_TYPECLASS_INTEGER;$/;"	v
TYPECLASS_REAL	openmpi/ompi/mpi/cxx/constants.h	/^static const int TYPECLASS_REAL = MPI_TYPECLASS_REAL;$/;"	v
Test	openmpi/ompi/mpi/cxx/request.h	/^  virtual bool Test();$/;"	p	class:Request	access:public	signature:()
Test	openmpi/ompi/mpi/cxx/request.h	/^  virtual bool Test(Status &status);$/;"	p	class:Request	access:public	signature:(Status &status)
Test	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Test() $/;"	f	class:MPI::Request	signature:()
Test	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Test(MPI::Status &status) $/;"	f	class:MPI::Request	signature:(MPI::Status &status)
Test	openmpi/ompi/mpi/cxx/win.h	/^  virtual bool Test() const;$/;"	p	class:Win	access:public	signature:() const
Test	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Test() const$/;"	f	class:MPI::Win	signature:() const
Testall	openmpi/ompi/mpi/cxx/request.h	/^  static bool Testall(int count, Request req_array[]);$/;"	p	class:Request	access:public	signature:(int count, Request req_array[])
Testall	openmpi/ompi/mpi/cxx/request.h	/^  static bool Testall(int count, Request req_array[], Status stat_array[]);$/;"	p	class:Request	access:public	signature:(int count, Request req_array[], Status stat_array[])
Testall	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testall(int count, MPI::Request req_array[])$/;"	f	class:MPI::Request	signature:(int count, MPI::Request req_array[])
Testall	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testall(int count, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int count, MPI::Request req_array[], MPI::Status stat_array[])
Testany	openmpi/ompi/mpi/cxx/request.h	/^  static bool Testany(int count, Request array[], int& index);$/;"	p	class:Request	access:public	signature:(int count, Request array[], int& index)
Testany	openmpi/ompi/mpi/cxx/request.h	/^  static bool Testany(int count, Request array[], int& index, Status& status);$/;"	p	class:Request	access:public	signature:(int count, Request array[], int& index, Status& status)
Testany	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testany(int count, MPI::Request array[], int& index)$/;"	f	class:MPI::Request	signature:(int count, MPI::Request array[], int& index)
Testany	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testany(int count, MPI::Request array[],$/;"	f	class:MPI::Request	signature:(int count, MPI::Request array[], int& index, MPI::Status& status)
Testsome	openmpi/ompi/mpi/cxx/request.h	/^  static int Testsome(int incount, Request req_array[],$/;"	p	class:Request	access:public	signature:(int incount, Request req_array[], int array_of_indices[])
Testsome	openmpi/ompi/mpi/cxx/request.h	/^  static int Testsome(int incount, Request req_array[],$/;"	p	class:Request	access:public	signature:(int incount, Request req_array[], int array_of_indices[], Status stat_array[])
Testsome	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testsome(int incount, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int incount, MPI::Request req_array[], int array_of_indices[])
Testsome	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Testsome(int incount, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int incount, MPI::Request req_array[], int array_of_indices[], MPI::Status stat_array[])
Translate_ranks	openmpi/ompi/mpi/cxx/group.h	/^  static void Translate_ranks (const Group& group1, int n, const int ranks1[], $/;"	p	class:Group	access:public	signature:(const Group& group1, int n, const int ranks1[], const Group& group2, int ranks2[])
Translate_ranks	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Translate_ranks (const MPI::Group& group1, int n,$/;"	f	class:MPI::Group	signature:(const MPI::Group& group1, int n, const int ranks1[], const MPI::Group& group2, int ranks2[])
UB	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype UB;$/;"	x
UNDEFINED	openmpi/ompi/mpi/cxx/constants.h	/^static const int UNDEFINED = MPI_UNDEFINED;$/;"	v
UNEQUAL	openmpi/ompi/mpi/cxx/constants.h	/^static const int UNEQUAL = MPI_UNEQUAL;$/;"	v
UNIVERSE_SIZE	openmpi/ompi/mpi/cxx/constants.h	/^static const int UNIVERSE_SIZE = MPI_UNIVERSE_SIZE;$/;"	v
UNSIGNED	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype UNSIGNED;       $/;"	x
UNSIGNED_CHAR	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype UNSIGNED_CHAR;$/;"	x
UNSIGNED_LONG	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype UNSIGNED_LONG;  $/;"	x
UNSIGNED_LONG_LONG	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype UNSIGNED_LONG_LONG;$/;"	x
UNSIGNED_SHORT	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype UNSIGNED_SHORT; $/;"	x
Union	openmpi/ompi/mpi/cxx/group.h	/^  static Group Union(const Group &group1, const Group &group2);$/;"	p	class:Group	access:public	signature:(const Group &group1, const Group &group2)
Union	openmpi/ompi/mpi/cxx/group_inln.h	/^MPI::Group::Union(const MPI::Group &group1, const MPI::Group &group2)$/;"	f	class:MPI::Group	signature:(const MPI::Group &group1, const MPI::Group &group2)
Unlock	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Unlock(int rank) const;$/;"	p	class:Win	access:public	signature:(int rank) const
Unlock	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Unlock(int rank) const$/;"	f	class:MPI::Win	signature:(int rank) const
Unpack	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Unpack(const void* inbuf, int insize, void *outbuf, int outcount,$/;"	p	class:Datatype	access:public	signature:(const void* inbuf, int insize, void *outbuf, int outcount, int& position, const Comm& comm) const
Unpack	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Unpack(const void* inbuf, int insize,$/;"	f	class:MPI::Datatype	signature:(const void* inbuf, int insize, void *outbuf, int outcount, int& position, const MPI::Comm& comm) const
Unpack_external	openmpi/ompi/mpi/cxx/datatype.h	/^  virtual void Unpack_external(const char* datarep, const void* inbuf,$/;"	p	class:Datatype	access:public	signature:(const char* datarep, const void* inbuf, Aint insize, Aint& position, void* outbuf, int outcount) const
Unpack_external	openmpi/ompi/mpi/cxx/datatype_inln.h	/^MPI::Datatype::Unpack_external(const char* datarep, const void* inbuf,$/;"	f	class:MPI::Datatype	signature:(const char* datarep, const void* inbuf, MPI::Aint insize, MPI::Aint& position, void* outbuf, int outcount) const
Unpublish_name	openmpi/ompi/mpi/cxx/functions.h	/^Unpublish_name(const char* service_name, const Info& info, $/;"	p	signature:(const char* service_name, const Info& info, const char* port_name)
Unpublish_name	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Unpublish_name(const char* service_name, $/;"	f	class:MPI	signature:(const char* service_name, const MPI::Info& info, const char* port_name)
User_function	openmpi/ompi/mpi/cxx/mpicxx.h	/^  typedef void User_function(const void* invec, void* inoutvec, int len,$/;"	t	namespace:MPI
VTLibwrap	vampirtrace/vt_libwrap.h	/^typedef struct VTLibwrap_struct VTLibwrap;$/;"	t	typeref:struct:VTLibwrap_struct
VTLibwrapAttr	vampirtrace/vt_libwrap.h	/^typedef struct VTLibwrapAttr_struct VTLibwrapAttr;$/;"	t	typeref:struct:VTLibwrapAttr_struct
VTLibwrapAttrInitFunc	vampirtrace/vt_libwrap.h	/^typedef void(*VTLibwrapAttrInitFunc)(VTLibwrapAttr*);$/;"	t
VTLibwrapAttr_struct	vampirtrace/vt_libwrap.h	/^struct VTLibwrapAttr_struct$/;"	s
VTLibwrapAttr_struct::func_group	vampirtrace/vt_libwrap.h	/^  char* func_group;$/;"	m	struct:VTLibwrapAttr_struct	access:public
VTLibwrapAttr_struct::init_func	vampirtrace/vt_libwrap.h	/^  VTLibwrapAttrInitFunc init_func;$/;"	m	struct:VTLibwrapAttr_struct	access:public
VTLibwrapAttr_struct::libc	vampirtrace/vt_libwrap.h	/^  char  libc;$/;"	m	struct:VTLibwrapAttr_struct	access:public
VTLibwrapAttr_struct::shlibs	vampirtrace/vt_libwrap.h	/^  char* shlibs[VT_LIBWRAP_MAX_SHLIBS];$/;"	m	struct:VTLibwrapAttr_struct	access:public
VTLibwrapAttr_struct::shlibs_num	vampirtrace/vt_libwrap.h	/^  int   shlibs_num;$/;"	m	struct:VTLibwrapAttr_struct	access:public
VTLibwrapAttr_struct::wait_for_init	vampirtrace/vt_libwrap.h	/^  char  wait_for_init;$/;"	m	struct:VTLibwrapAttr_struct	access:public
VTLibwrap_create	vampirtrace/vt_libwrap.h	/^void VTLibwrap_create(VTLibwrap** lw, VTLibwrapAttr* lwattr);$/;"	p	signature:(VTLibwrap** lw, VTLibwrapAttr* lwattr)
VTLibwrap_delete	vampirtrace/vt_libwrap.h	/^void VTLibwrap_delete(VTLibwrap* lw);$/;"	p	signature:(VTLibwrap* lw)
VTLibwrap_delete_all	vampirtrace/vt_libwrap.h	/^void VTLibwrap_delete_all(void);$/;"	p	signature:(void)
VTLibwrap_func_end	vampirtrace/vt_libwrap.h	/^void VTLibwrap_func_end(const VTLibwrap* lw, const int funcid);$/;"	p	signature:(const VTLibwrap* lw, const int funcid)
VTLibwrap_func_init	vampirtrace/vt_libwrap.h	/^void VTLibwrap_func_init(const VTLibwrap* lw, const char* func,$/;"	p	signature:(const VTLibwrap* lw, const char* func, const char* file, int line, void** funcptr, int* funcid)
VTLibwrap_func_start	vampirtrace/vt_libwrap.h	/^void VTLibwrap_func_start(const VTLibwrap* lw, const int funcid);$/;"	p	signature:(const VTLibwrap* lw, const int funcid)
VT_BUFFER_FLUSH	vampirtrace/vt_user_control.h	34;"	d
VT_BUFFER_FLUSH	vampirtrace/vt_user_control.h	45;"	d
VT_COMMENT	vampirtrace/vt_user_comment.h	26;"	d
VT_COMMENT	vampirtrace/vt_user_comment.h	31;"	d
VT_COMMENT_DEF	vampirtrace/vt_user_comment.h	25;"	d
VT_COMMENT_DEF	vampirtrace/vt_user_comment.h	30;"	d
VT_COMM_DEF	vampirtrace/vt_user_message.h	44;"	d
VT_COMM_WORLD	vampirtrace/vt_user_message.h	43;"	d
VT_COUNT_DEF	vampirtrace/vt_user_count.h	48;"	d
VT_COUNT_DEF	vampirtrace/vt_user_count.h	57;"	d
VT_COUNT_DEFGROUP	vampirtrace/vt_user_count.h	20;"	d
VT_COUNT_DOUBLE_VAL	vampirtrace/vt_user_count.h	52;"	d
VT_COUNT_DOUBLE_VAL	vampirtrace/vt_user_count.h	61;"	d
VT_COUNT_FLOAT_VAL	vampirtrace/vt_user_count.h	51;"	d
VT_COUNT_FLOAT_VAL	vampirtrace/vt_user_count.h	60;"	d
VT_COUNT_GROUP_DEF	vampirtrace/vt_user_count.h	47;"	d
VT_COUNT_GROUP_DEF	vampirtrace/vt_user_count.h	56;"	d
VT_COUNT_SIGNED_VAL	vampirtrace/vt_user_count.h	49;"	d
VT_COUNT_SIGNED_VAL	vampirtrace/vt_user_count.h	58;"	d
VT_COUNT_TYPE_DOUBLE	vampirtrace/vt_user_count.h	26;"	d
VT_COUNT_TYPE_FLOAT	vampirtrace/vt_user_count.h	25;"	d
VT_COUNT_TYPE_INTEGER	vampirtrace/vt_user_count.h	28;"	d
VT_COUNT_TYPE_INTEGER8	vampirtrace/vt_user_count.h	29;"	d
VT_COUNT_TYPE_REAL	vampirtrace/vt_user_count.h	30;"	d
VT_COUNT_TYPE_SIGNED	vampirtrace/vt_user_count.h	23;"	d
VT_COUNT_TYPE_UNSIGNED	vampirtrace/vt_user_count.h	24;"	d
VT_COUNT_UNSIGNED_VAL	vampirtrace/vt_user_count.h	50;"	d
VT_COUNT_UNSIGNED_VAL	vampirtrace/vt_user_count.h	59;"	d
VT_IS_ON	vampirtrace/vt_user_control.h	31;"	d
VT_IS_ON	vampirtrace/vt_user_control.h	42;"	d
VT_LIBWRAP_ATTR_DEFAULT	vampirtrace/vt_libwrap.h	23;"	d
VT_LIBWRAP_ATTR_INITIALIZER	vampirtrace/vt_libwrap.h	33;"	d
VT_LIBWRAP_FUNC_CALL	vampirtrace/vt_libwrap.h	101;"	d
VT_LIBWRAP_FUNC_END	vampirtrace/vt_libwrap.h	95;"	d
VT_LIBWRAP_FUNC_ID	vampirtrace/vt_libwrap.h	88;"	d
VT_LIBWRAP_FUNC_INIT	vampirtrace/vt_libwrap.h	60;"	d
VT_LIBWRAP_FUNC_NAME	vampirtrace/vt_libwrap.h	84;"	d
VT_LIBWRAP_FUNC_PTR	vampirtrace/vt_libwrap.h	86;"	d
VT_LIBWRAP_FUNC_START	vampirtrace/vt_libwrap.h	94;"	d
VT_LIBWRAP_MAX_SHLIBS	vampirtrace/vt_libwrap.h	20;"	d
VT_LIBWRAP_NOID	vampirtrace/vt_libwrap.h	44;"	d
VT_LIBWRAP_NULL	vampirtrace/vt_libwrap.h	43;"	d
VT_MARKER	vampirtrace/vt_user_marker.h	31;"	d
VT_MARKER	vampirtrace/vt_user_marker.h	36;"	d
VT_MARKER_DEF	vampirtrace/vt_user_marker.h	30;"	d
VT_MARKER_DEF	vampirtrace/vt_user_marker.h	35;"	d
VT_MARKER_TYPE_ERROR	vampirtrace/vt_user_marker.h	20;"	d
VT_MARKER_TYPE_HINT	vampirtrace/vt_user_marker.h	22;"	d
VT_MARKER_TYPE_WARNING	vampirtrace/vt_user_marker.h	21;"	d
VT_MSG_COMM_DEF	vampirtrace/vt_user_message.h	30;"	d
VT_MSG_COMM_DEF	vampirtrace/vt_user_message.h	36;"	d
VT_MSG_DEFCOMM	vampirtrace/vt_user_message.h	20;"	d
VT_MSG_RECV	vampirtrace/vt_user_message.h	32;"	d
VT_MSG_RECV	vampirtrace/vt_user_message.h	38;"	d
VT_MSG_SEND	vampirtrace/vt_user_message.h	31;"	d
VT_MSG_SEND	vampirtrace/vt_user_message.h	37;"	d
VT_OFF	vampirtrace/vt_user_control.h	33;"	d
VT_OFF	vampirtrace/vt_user_control.h	44;"	d
VT_ON	vampirtrace/vt_user_control.h	32;"	d
VT_ON	vampirtrace/vt_user_control.h	43;"	d
VT_PLUGIN_CNTR_ABS	vampirtrace/vt_plugin_cntr.h	52;"	d
VT_PLUGIN_CNTR_ACC	vampirtrace/vt_plugin_cntr.h	50;"	d
VT_PLUGIN_CNTR_ASYNCH_CALLBACK	vampirtrace/vt_plugin_cntr.h	/^  VT_PLUGIN_CNTR_ASYNCH_CALLBACK,$/;"	e	enum:vt_plugin_cntr_synch
VT_PLUGIN_CNTR_ASYNCH_EVENT	vampirtrace/vt_plugin_cntr.h	/^  VT_PLUGIN_CNTR_ASYNCH_EVENT,$/;"	e	enum:vt_plugin_cntr_synch
VT_PLUGIN_CNTR_ASYNCH_POST_MORTEM	vampirtrace/vt_plugin_cntr.h	/^  VT_PLUGIN_CNTR_ASYNCH_POST_MORTEM,$/;"	e	enum:vt_plugin_cntr_synch
VT_PLUGIN_CNTR_CALLBACK_BUFFER_FULL	vampirtrace/vt_plugin_cntr.h	/^  VT_PLUGIN_CNTR_CALLBACK_BUFFER_FULL = 1,$/;"	e	enum:vt_plugin_callback_return
VT_PLUGIN_CNTR_CALLBACK_OK	vampirtrace/vt_plugin_cntr.h	/^  VT_PLUGIN_CNTR_CALLBACK_OK = 0,$/;"	e	enum:vt_plugin_callback_return
VT_PLUGIN_CNTR_CALLBACK_TRACE_OFF_PERMANENT	vampirtrace/vt_plugin_cntr.h	/^  VT_PLUGIN_CNTR_CALLBACK_TRACE_OFF_PERMANENT = 2$/;"	e	enum:vt_plugin_callback_return
VT_PLUGIN_CNTR_DOUBLE	vampirtrace/vt_plugin_cntr.h	71;"	d
VT_PLUGIN_CNTR_FLOAT	vampirtrace/vt_plugin_cntr.h	70;"	d
VT_PLUGIN_CNTR_LAST	vampirtrace/vt_plugin_cntr.h	61;"	d
VT_PLUGIN_CNTR_NEXT	vampirtrace/vt_plugin_cntr.h	64;"	d
VT_PLUGIN_CNTR_ONCE	vampirtrace/vt_plugin_cntr.h	/^  VT_PLUGIN_CNTR_ONCE,$/;"	e	enum:vt_plugin_cntr_per
VT_PLUGIN_CNTR_PER_HOST	vampirtrace/vt_plugin_cntr.h	/^  VT_PLUGIN_CNTR_PER_HOST,$/;"	e	enum:vt_plugin_cntr_per
VT_PLUGIN_CNTR_PER_PROCESS	vampirtrace/vt_plugin_cntr.h	/^  VT_PLUGIN_CNTR_PER_PROCESS,$/;"	e	enum:vt_plugin_cntr_per
VT_PLUGIN_CNTR_PER_THREAD	vampirtrace/vt_plugin_cntr.h	/^  VT_PLUGIN_CNTR_PER_THREAD = 0,$/;"	e	enum:vt_plugin_cntr_per
VT_PLUGIN_CNTR_POINT	vampirtrace/vt_plugin_cntr.h	58;"	d
VT_PLUGIN_CNTR_RUN_PER_MAX	vampirtrace/vt_plugin_cntr.h	/^  VT_PLUGIN_CNTR_RUN_PER_MAX \/* NON-ABI, don't use it!*\/$/;"	e	enum:vt_plugin_cntr_per
VT_PLUGIN_CNTR_SIGNED	vampirtrace/vt_plugin_cntr.h	67;"	d
VT_PLUGIN_CNTR_START	vampirtrace/vt_plugin_cntr.h	55;"	d
VT_PLUGIN_CNTR_SYNCH	vampirtrace/vt_plugin_cntr.h	/^  VT_PLUGIN_CNTR_SYNCH = 0,$/;"	e	enum:vt_plugin_cntr_synch
VT_PLUGIN_CNTR_SYNCH_TYPE_MAX	vampirtrace/vt_plugin_cntr.h	/^  VT_PLUGIN_CNTR_SYNCH_TYPE_MAX \/* NON-ABI, don't use it!*\/$/;"	e	enum:vt_plugin_cntr_synch
VT_PLUGIN_CNTR_UNSIGNED	vampirtrace/vt_plugin_cntr.h	68;"	d
VT_PLUGIN_CNTR_VERSION	vampirtrace/vt_plugin_cntr.h	73;"	d
VT_RECV	vampirtrace/vt_user_message.h	46;"	d
VT_REWIND	vampirtrace/vt_user_control.h	38;"	d
VT_REWIND	vampirtrace/vt_user_control.h	49;"	d
VT_SEND	vampirtrace/vt_user_message.h	45;"	d
VT_SET_REWIND_MARK	vampirtrace/vt_user_control.h	37;"	d
VT_SET_REWIND_MARK	vampirtrace/vt_user_control.h	48;"	d
VT_TIMESYNC	vampirtrace/vt_user_control.h	35;"	d
VT_TIMESYNC	vampirtrace/vt_user_control.h	46;"	d
VT_TRACER	vampirtrace/vt_user_region.h	59;"	d
VT_TRACER	vampirtrace/vt_user_region.h	70;"	d
VT_Tracer	vampirtrace/vt_user_region.h	/^  inline VT_Tracer<1>::VT_Tracer(unsigned int r, const char*, int)$/;"	f	class:VT_Tracer	signature:(unsigned int r, const char*, int)
VT_Tracer	vampirtrace/vt_user_region.h	/^  template<> inline VT_Tracer<sizeof(int)>::VT_Tracer(const char* r,$/;"	f	class:VT_Tracer	signature:(const char* r, const char* f, int l)
VT_Tracer	vampirtrace/vt_user_region.h	/^  template<> struct VT_Tracer<1> {$/;"	s
VT_Tracer	vampirtrace/vt_user_region.h	/^  template<int> struct VT_Tracer {$/;"	s
VT_Tracer::VT_Tracer	vampirtrace/vt_user_region.h	/^  inline VT_Tracer<1>::VT_Tracer(unsigned int r, const char*, int)$/;"	f	class:VT_Tracer	signature:(unsigned int r, const char*, int)
VT_Tracer::VT_Tracer	vampirtrace/vt_user_region.h	/^  template<> inline VT_Tracer<sizeof(int)>::VT_Tracer(const char* r,$/;"	f	class:VT_Tracer	signature:(const char* r, const char* f, int l)
VT_Tracer::__VT_NOINST_ATTR	vampirtrace/vt_user_region.h	/^    VT_Tracer(const char* r, const char* f, int l) __VT_NOINST_ATTR;$/;"	m	struct:VT_Tracer	access:public
VT_Tracer::__VT_NOINST_ATTR	vampirtrace/vt_user_region.h	/^    VT_Tracer(unsigned int r, const char*, int) __VT_NOINST_ATTR;$/;"	m	struct:VT_Tracer	access:public
VT_Tracer::__VT_NOINST_ATTR	vampirtrace/vt_user_region.h	/^    ~VT_Tracer() __VT_NOINST_ATTR;$/;"	m	struct:VT_Tracer	access:public
VT_Tracer::i	vampirtrace/vt_user_region.h	/^    unsigned int i;$/;"	m	struct:VT_Tracer	access:public
VT_Tracer::n	vampirtrace/vt_user_region.h	/^    const char* n;$/;"	m	struct:VT_Tracer	access:public
VT_Tracer::~VT_Tracer	vampirtrace/vt_user_region.h	/^  inline VT_Tracer<1>::~VT_Tracer() { VT_User_end2__(i); }$/;"	f	class:VT_Tracer	signature:()
VT_Tracer::~VT_Tracer	vampirtrace/vt_user_region.h	/^  template<> inline VT_Tracer<sizeof(int)>::~VT_Tracer() { VT_User_end__(n); }$/;"	f	class:VT_Tracer	signature:()
VT_UPDATE_COUNTER	vampirtrace/vt_user_control.h	36;"	d
VT_UPDATE_COUNTER	vampirtrace/vt_user_control.h	47;"	d
VT_USER_DEF	vampirtrace/vt_user_region.h	57;"	d
VT_USER_DEF	vampirtrace/vt_user_region.h	69;"	d
VT_USER_END	vampirtrace/vt_user_region.h	54;"	d
VT_USER_END	vampirtrace/vt_user_region.h	66;"	d
VT_USER_END2	vampirtrace/vt_user_region.h	56;"	d
VT_USER_END2	vampirtrace/vt_user_region.h	68;"	d
VT_USER_MESSAGE_H_	vampirtrace/vt_user_message.h	18;"	d
VT_USER_START	vampirtrace/vt_user_region.h	53;"	d
VT_USER_START	vampirtrace/vt_user_region.h	65;"	d
VT_USER_START2	vampirtrace/vt_user_region.h	55;"	d
VT_USER_START2	vampirtrace/vt_user_region.h	67;"	d
VT_User_buffer_flush__	vampirtrace/vt_user_control.h	/^  __VT_EXTERN_DECL void VT_User_buffer_flush__(void);$/;"	p	signature:(void)
VT_User_comment__	vampirtrace/vt_user_comment.h	/^  __VT_EXTERN_DECL void VT_User_comment__(const char* comment);$/;"	p	signature:(const char* comment)
VT_User_comment_def__	vampirtrace/vt_user_comment.h	/^  __VT_EXTERN_DECL void VT_User_comment_def__(const char* comment);$/;"	p	signature:(const char* comment)
VT_User_count_def__	vampirtrace/vt_user_count.h	/^  __VT_EXTERN_DECL unsigned int VT_User_count_def__(const char* cname,$/;"	p	signature:(const char* cname, const char* cunit, int ctype, unsigned int gid)
VT_User_count_double_val__	vampirtrace/vt_user_count.h	/^  __VT_EXTERN_DECL void VT_User_count_double_val__(unsigned int cid,$/;"	p	signature:(unsigned int cid, double val)
VT_User_count_float_val__	vampirtrace/vt_user_count.h	/^  __VT_EXTERN_DECL void VT_User_count_float_val__(unsigned int cid, float val);$/;"	p	signature:(unsigned int cid, float val)
VT_User_count_group_def__	vampirtrace/vt_user_count.h	/^  __VT_EXTERN_DECL unsigned int VT_User_count_group_def__(const char* gname);$/;"	p	signature:(const char* gname)
VT_User_count_signed_val__	vampirtrace/vt_user_count.h	/^  __VT_EXTERN_DECL void VT_User_count_signed_val__(unsigned int cid,$/;"	p	signature:(unsigned int cid, long long val)
VT_User_count_unsigned_val__	vampirtrace/vt_user_count.h	/^  __VT_EXTERN_DECL void VT_User_count_unsigned_val__(unsigned int cid,$/;"	p	signature:(unsigned int cid, unsigned long long val)
VT_User_def__	vampirtrace/vt_user_region.h	/^__VT_EXTERN_DECL unsigned int VT_User_def__(const char* name, const char* group,$/;"	p	signature:(const char* name, const char* group, const char* file, int lno)
VT_User_end2__	vampirtrace/vt_user_region.h	/^__VT_EXTERN_DECL void VT_User_end2__(unsigned int rid);$/;"	p	signature:(unsigned int rid)
VT_User_end__	vampirtrace/vt_user_region.h	/^__VT_EXTERN_DECL void VT_User_end__(const char* name);$/;"	p	signature:(const char* name)
VT_User_is_trace_on__	vampirtrace/vt_user_control.h	/^  __VT_EXTERN_DECL int  VT_User_is_trace_on__(void);$/;"	p	signature:(void)
VT_User_marker__	vampirtrace/vt_user_marker.h	/^  __VT_EXTERN_DECL void VT_User_marker__(unsigned int mid, const char* mtext);$/;"	p	signature:(unsigned int mid, const char* mtext)
VT_User_marker_def__	vampirtrace/vt_user_marker.h	/^  __VT_EXTERN_DECL unsigned int VT_User_marker_def__(const char* mname,$/;"	p	signature:(const char* mname, int mtype)
VT_User_msg_comm_def__	vampirtrace/vt_user_message.h	/^  __VT_EXTERN_DECL unsigned int VT_User_msg_comm_def__(const char* cname);$/;"	p	signature:(const char* cname)
VT_User_msg_recv__	vampirtrace/vt_user_message.h	/^  __VT_EXTERN_DECL void VT_User_msg_recv__(unsigned int cid, unsigned int tag,$/;"	p	signature:(unsigned int cid, unsigned int tag, unsigned int recvd)
VT_User_msg_send__	vampirtrace/vt_user_message.h	/^  __VT_EXTERN_DECL void VT_User_msg_send__(unsigned int cid, unsigned int tag,$/;"	p	signature:(unsigned int cid, unsigned int tag, unsigned int sent)
VT_User_rewind__	vampirtrace/vt_user_control.h	/^  __VT_EXTERN_DECL void VT_User_rewind__(void);$/;"	p	signature:(void)
VT_User_set_rewind_mark__	vampirtrace/vt_user_control.h	/^  __VT_EXTERN_DECL void VT_User_set_rewind_mark__(void);$/;"	p	signature:(void)
VT_User_start2__	vampirtrace/vt_user_region.h	/^__VT_EXTERN_DECL void VT_User_start2__(unsigned int rid);$/;"	p	signature:(unsigned int rid)
VT_User_start__	vampirtrace/vt_user_region.h	/^__VT_EXTERN_DECL void VT_User_start__(const char* name, const char* file,$/;"	p	signature:(const char* name, const char* file, int lno)
VT_User_timesync__	vampirtrace/vt_user_control.h	/^  __VT_EXTERN_DECL void VT_User_timesync__(void);$/;"	p	signature:(void)
VT_User_trace_off__	vampirtrace/vt_user_control.h	/^  __VT_EXTERN_DECL void VT_User_trace_off__(void);$/;"	p	signature:(void)
VT_User_trace_on__	vampirtrace/vt_user_control.h	/^  __VT_EXTERN_DECL void VT_User_trace_on__(void);$/;"	p	signature:(void)
VT_User_update_counter__	vampirtrace/vt_user_control.h	/^  __VT_EXTERN_DECL void VT_User_update_counter__(void);$/;"	p	signature:(void)
VT_pthread_attr_destroy__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_attr_destroy__(pthread_attr_t* attr);$/;"	p	signature:(pthread_attr_t* attr)
VT_pthread_attr_getdetachstate__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_attr_getdetachstate__(const pthread_attr_t* attr,$/;"	p	signature:(const pthread_attr_t* attr, int* detachstate)
VT_pthread_attr_getinheritsched__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_attr_getinheritsched__(const pthread_attr_t* attr,$/;"	p	signature:(const pthread_attr_t* attr, int* inheritsched)
VT_pthread_attr_getschedparam__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_attr_getschedparam__(const pthread_attr_t* attr,$/;"	p	signature:(const pthread_attr_t* attr, struct sched_param* param)
VT_pthread_attr_getschedpolicy__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_attr_getschedpolicy__(const pthread_attr_t* attr,$/;"	p	signature:(const pthread_attr_t* attr, int* policy)
VT_pthread_attr_getscope__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_attr_getscope__(const pthread_attr_t* attr,$/;"	p	signature:(const pthread_attr_t* attr, int* contentionscope)
VT_pthread_attr_getstacksize__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_attr_getstacksize__(const pthread_attr_t* attr,$/;"	p	signature:(const pthread_attr_t* attr, size_t* stacksize)
VT_pthread_attr_init__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_attr_init__(pthread_attr_t* attr);$/;"	p	signature:(pthread_attr_t* attr)
VT_pthread_attr_setdetachstate__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_attr_setdetachstate__(pthread_attr_t* attr,$/;"	p	signature:(pthread_attr_t* attr, int detachstate)
VT_pthread_attr_setinheritsched__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_attr_setinheritsched__(pthread_attr_t* attr,$/;"	p	signature:(pthread_attr_t* attr, int inheritsched)
VT_pthread_attr_setschedparam__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_attr_setschedparam__(pthread_attr_t* attr,$/;"	p	signature:(pthread_attr_t* attr, const struct sched_param* param)
VT_pthread_attr_setschedpolicy__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_attr_setschedpolicy__(pthread_attr_t* attr, int policy);$/;"	p	signature:(pthread_attr_t* attr, int policy)
VT_pthread_attr_setscope__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_attr_setscope__(pthread_attr_t* attr,$/;"	p	signature:(pthread_attr_t* attr, int contentionscope)
VT_pthread_attr_setstacksize__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_attr_setstacksize__(pthread_attr_t* attr,$/;"	p	signature:(pthread_attr_t* attr, size_t stacksize)
VT_pthread_cancel__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_cancel__(pthread_t thread);$/;"	p	signature:(pthread_t thread)
VT_pthread_cond_broadcast__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_cond_broadcast__(pthread_cond_t* cond);$/;"	p	signature:(pthread_cond_t* cond)
VT_pthread_cond_destroy__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_cond_destroy__(pthread_cond_t* cond);$/;"	p	signature:(pthread_cond_t* cond)
VT_pthread_cond_init__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_cond_init__(pthread_cond_t* cond,$/;"	p	signature:(pthread_cond_t* cond, const pthread_condattr_t* attr)
VT_pthread_cond_signal__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_cond_signal__(pthread_cond_t* cond);$/;"	p	signature:(pthread_cond_t* cond)
VT_pthread_cond_timedwait__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_cond_timedwait__(pthread_cond_t* cond,$/;"	p	signature:(pthread_cond_t* cond, pthread_mutex_t* mutex, const struct timespec* abstime)
VT_pthread_cond_wait__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_cond_wait__(pthread_cond_t* cond,$/;"	p	signature:(pthread_cond_t* cond, pthread_mutex_t* mutex)
VT_pthread_condattr_destroy__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_condattr_destroy__(pthread_condattr_t* attr);$/;"	p	signature:(pthread_condattr_t* attr)
VT_pthread_condattr_getpshared__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_condattr_getpshared__(const pthread_condattr_t* attr,$/;"	p	signature:(const pthread_condattr_t* attr, int* pshared)
VT_pthread_condattr_init__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_condattr_init__(pthread_condattr_t* attr);$/;"	p	signature:(pthread_condattr_t* attr)
VT_pthread_condattr_setpshared__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_condattr_setpshared__(pthread_condattr_t* attr,$/;"	p	signature:(pthread_condattr_t* attr, int pshared)
VT_pthread_create__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_create__(pthread_t* thread, const pthread_attr_t* attr,$/;"	p	signature:(pthread_t* thread, const pthread_attr_t* attr, void *(*start_routine)(void*), void* arg)
VT_pthread_detach__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_detach__(pthread_t thread);$/;"	p	signature:(pthread_t thread)
VT_pthread_equal__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_equal__(pthread_t t1, pthread_t t2);$/;"	p	signature:(pthread_t t1, pthread_t t2)
VT_pthread_exit__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_exit__(void* value_ptr);$/;"	p	signature:(void* value_ptr)
VT_pthread_getschedparam__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_getschedparam__(pthread_t thread, int* policy,$/;"	p	signature:(pthread_t thread, int* policy, struct sched_param* param)
VT_pthread_getspecific__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL void* VT_pthread_getspecific__(pthread_key_t key);$/;"	p	signature:(pthread_key_t key)
VT_pthread_join__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_join__(pthread_t thread, void** value_ptr);$/;"	p	signature:(pthread_t thread, void** value_ptr)
VT_pthread_key_create__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_key_create__(pthread_key_t* key,$/;"	p	signature:(pthread_key_t* key, void (*destructor)(void*))
VT_pthread_key_delete__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_key_delete__(pthread_key_t key);$/;"	p	signature:(pthread_key_t key)
VT_pthread_mutex_destroy__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_mutex_destroy__(pthread_mutex_t* mutex);$/;"	p	signature:(pthread_mutex_t* mutex)
VT_pthread_mutex_init__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_mutex_init__(pthread_mutex_t* mutex,$/;"	p	signature:(pthread_mutex_t* mutex, const pthread_mutexattr_t* attr)
VT_pthread_mutex_lock__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_mutex_lock__(pthread_mutex_t* mutex);$/;"	p	signature:(pthread_mutex_t* mutex)
VT_pthread_mutex_trylock__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_mutex_trylock__(pthread_mutex_t* mutex);$/;"	p	signature:(pthread_mutex_t* mutex)
VT_pthread_mutex_unlock__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_mutex_unlock__(pthread_mutex_t* mutex);$/;"	p	signature:(pthread_mutex_t* mutex)
VT_pthread_mutexattr_destroy__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_mutexattr_destroy__(pthread_mutexattr_t* attr);$/;"	p	signature:(pthread_mutexattr_t* attr)
VT_pthread_mutexattr_getpshared__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_mutexattr_getpshared__(const pthread_mutexattr_t* attr,$/;"	p	signature:(const pthread_mutexattr_t* attr, int* pshared)
VT_pthread_mutexattr_init__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_mutexattr_init__(pthread_mutexattr_t* attr);$/;"	p	signature:(pthread_mutexattr_t* attr)
VT_pthread_mutexattr_setpshared__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_mutexattr_setpshared__(pthread_mutexattr_t* attr,$/;"	p	signature:(pthread_mutexattr_t* attr, int pshared)
VT_pthread_once__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_once__(pthread_once_t* once_control,$/;"	p	signature:(pthread_once_t* once_control, void (*init_routine)(void))
VT_pthread_self__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL pthread_t VT_pthread_self__(void);$/;"	p	signature:(void)
VT_pthread_setcancelstate__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_setcancelstate__(int state, int* oldstate);$/;"	p	signature:(int state, int* oldstate)
VT_pthread_setschedparam__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_setschedparam__(pthread_t thread, int policy,$/;"	p	signature:(pthread_t thread, int policy, const struct sched_param* param)
VT_pthread_setspecific__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL int VT_pthread_setspecific__(pthread_key_t key, const void* value);$/;"	p	signature:(pthread_key_t key, const void* value)
VT_pthread_testcancel__	vampirtrace/vt_wrap_pthread.h	/^__VT_EXTERN_DECL void VT_pthread_testcancel__(void);$/;"	p	signature:(void)
WCHAR	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Datatype WCHAR;$/;"	x
WIN_BASE	openmpi/ompi/mpi/cxx/constants.h	/^static const int WIN_BASE = MPI_WIN_BASE;$/;"	v
WIN_DISP_UNIT	openmpi/ompi/mpi/cxx/constants.h	/^static const int WIN_DISP_UNIT = MPI_WIN_DISP_UNIT;$/;"	v
WIN_NULL	openmpi/ompi/mpi/cxx/constants.h	/^OMPI_DECLSPEC extern const Win          WIN_NULL;$/;"	x
WIN_SIZE	openmpi/ompi/mpi/cxx/constants.h	/^static const int WIN_SIZE = MPI_WIN_SIZE;$/;"	v
WTIME_IS_GLOBAL	openmpi/ompi/mpi/cxx/constants.h	/^static const int WTIME_IS_GLOBAL = MPI_WTIME_IS_GLOBAL;$/;"	v
Wait	openmpi/ompi/mpi/cxx/request.h	/^  virtual void Wait();$/;"	p	class:Request	access:public	signature:()
Wait	openmpi/ompi/mpi/cxx/request.h	/^  virtual void Wait(Status &status);$/;"	p	class:Request	access:public	signature:(Status &status)
Wait	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Wait() $/;"	f	class:MPI::Request	signature:()
Wait	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Wait(MPI::Status &status) $/;"	f	class:MPI::Request	signature:(MPI::Status &status)
Wait	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Wait() const;$/;"	p	class:Win	access:public	signature:() const
Wait	openmpi/ompi/mpi/cxx/win_inln.h	/^MPI::Win::Wait() const$/;"	f	class:MPI::Win	signature:() const
Waitall	openmpi/ompi/mpi/cxx/request.h	/^  static void Waitall(int count, Request req_array[]);$/;"	p	class:Request	access:public	signature:(int count, Request req_array[])
Waitall	openmpi/ompi/mpi/cxx/request.h	/^  static void Waitall(int count, Request req_array[], Status stat_array[]);$/;"	p	class:Request	access:public	signature:(int count, Request req_array[], Status stat_array[])
Waitall	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitall(int count, MPI::Request req_array[])$/;"	f	class:MPI::Request	signature:(int count, MPI::Request req_array[])
Waitall	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitall(int count, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int count, MPI::Request req_array[], MPI::Status stat_array[])
Waitany	openmpi/ompi/mpi/cxx/request.h	/^  static int Waitany(int count, Request array[]);$/;"	p	class:Request	access:public	signature:(int count, Request array[])
Waitany	openmpi/ompi/mpi/cxx/request.h	/^  static int Waitany(int count, Request array[], Status& status);$/;"	p	class:Request	access:public	signature:(int count, Request array[], Status& status)
Waitany	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitany(int count, MPI::Request array[])$/;"	f	class:MPI::Request	signature:(int count, MPI::Request array[])
Waitany	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitany(int count, MPI::Request array[],$/;"	f	class:MPI::Request	signature:(int count, MPI::Request array[], MPI::Status& status)
Waitsome	openmpi/ompi/mpi/cxx/request.h	/^  static int Waitsome(int incount, Request req_array[],$/;"	p	class:Request	access:public	signature:(int incount, Request req_array[], int array_of_indices[])
Waitsome	openmpi/ompi/mpi/cxx/request.h	/^  static int Waitsome(int incount, Request req_array[],$/;"	p	class:Request	access:public	signature:(int incount, Request req_array[], int array_of_indices[], Status stat_array[])
Waitsome	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitsome(int incount, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int incount, MPI::Request req_array[], int array_of_indices[])
Waitsome	openmpi/ompi/mpi/cxx/request_inln.h	/^MPI::Request::Waitsome(int incount, MPI::Request req_array[],$/;"	f	class:MPI::Request	signature:(int incount, MPI::Request req_array[], int array_of_indices[], MPI::Status stat_array[])
Win	openmpi/ompi/mpi/cxx/mpicxx.h	/^  class Win;$/;"	x
Win	openmpi/ompi/mpi/cxx/win.h	/^  Win() : mpi_win(MPI_WIN_NULL) { }$/;"	f	class:Win	access:public	signature:()
Win	openmpi/ompi/mpi/cxx/win.h	/^  Win(MPI_Win i) : mpi_win(i) { }$/;"	f	class:Win	access:public	signature:(MPI_Win i)
Win	openmpi/ompi/mpi/cxx/win.h	/^  Win(const Win& data) : mpi_win(data.mpi_win) { }$/;"	f	class:Win	access:public	signature:(const Win& data)
Win	openmpi/ompi/mpi/cxx/win.h	/^class Win {$/;"	c
Win::Accumulate	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Accumulate(const void* origin_addr, int origin_count, $/;"	p	class:Win	access:public	signature:(const void* origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype, const MPI::Op& op) const
Win::Call_errhandler	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Call_errhandler(int errorcode) const;$/;"	p	class:Win	access:public	signature:(int errorcode) const
Win::Complete	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Complete() const;$/;"	p	class:Win	access:public	signature:() const
Win::Copy_attr_function	openmpi/ompi/mpi/cxx/win.h	/^  typedef int Copy_attr_function(const Win& oldwin, int win_keyval, $/;"	t	class:Win	access:public
Win::Create	openmpi/ompi/mpi/cxx/win.h	/^  static  Win Create(const void* base, MPI::Aint size, int disp_unit, $/;"	p	class:Win	access:public	signature:(const void* base, MPI::Aint size, int disp_unit, const MPI::Info& info, const MPI::Intracomm& comm)
Win::Create_errhandler	openmpi/ompi/mpi/cxx/win.h	/^  static MPI::Errhandler Create_errhandler(Errhandler_function* function);$/;"	p	class:Win	access:public	signature:(Errhandler_function* function)
Win::Create_keyval	openmpi/ompi/mpi/cxx/win.h	/^  static int Create_keyval(Copy_attr_function* win_copy_attr_fn, $/;"	p	class:Win	access:public	signature:(Copy_attr_function* win_copy_attr_fn, Delete_attr_function* win_delete_attr_fn, void* extra_state)
Win::Create_keyval	openmpi/ompi/mpi/cxx/win.h	/^  static int Create_keyval(Copy_attr_function* win_copy_attr_fn, $/;"	p	class:Win	access:public	signature:(Copy_attr_function* win_copy_attr_fn, MPI_Win_delete_attr_function* win_delete_attr_fn, void* extra_state)
Win::Create_keyval	openmpi/ompi/mpi/cxx/win.h	/^  static int Create_keyval(MPI_Win_copy_attr_function* win_copy_attr_fn, $/;"	p	class:Win	access:public	signature:(MPI_Win_copy_attr_function* win_copy_attr_fn, Delete_attr_function* win_delete_attr_fn, void* extra_state)
Win::Create_keyval	openmpi/ompi/mpi/cxx/win.h	/^  static int Create_keyval(MPI_Win_copy_attr_function* win_copy_attr_fn, $/;"	p	class:Win	access:public	signature:(MPI_Win_copy_attr_function* win_copy_attr_fn, MPI_Win_delete_attr_function* win_delete_attr_fn, void* extra_state)
Win::Delete_attr	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Delete_attr(int win_keyval);$/;"	p	class:Win	access:public	signature:(int win_keyval)
Win::Delete_attr_function	openmpi/ompi/mpi/cxx/win.h	/^  typedef int Delete_attr_function(Win& win, int win_keyval, $/;"	t	class:Win	access:public
Win::Errhandler_function	openmpi/ompi/mpi/cxx/win.h	/^  typedef void Errhandler_function(Win &, int *, ... );$/;"	t	class:Win	access:public
Win::Fence	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Fence(int assert) const;$/;"	p	class:Win	access:public	signature:(int assert) const
Win::Free	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Free(); $/;"	p	class:Win	access:public	signature:()
Win::Free_keyval	openmpi/ompi/mpi/cxx/win.h	/^  static void Free_keyval(int& win_keyval); $/;"	p	class:Win	access:public	signature:(int& win_keyval)
Win::Get	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Get(const void *origin_addr, int origin_count, $/;"	p	class:Win	access:public	signature:(const void *origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype) const
Win::Get_attr	openmpi/ompi/mpi/cxx/win.h	/^  bool Get_attr(const Win& win, int win_keyval,$/;"	p	class:Win	access:public	signature:(const Win& win, int win_keyval, void* attribute_val) const
Win::Get_attr	openmpi/ompi/mpi/cxx/win.h	/^  bool Get_attr(int win_keyval, void* attribute_val) const;$/;"	p	class:Win	access:public	signature:(int win_keyval, void* attribute_val) const
Win::Get_errhandler	openmpi/ompi/mpi/cxx/win.h	/^  virtual MPI::Errhandler Get_errhandler() const; $/;"	p	class:Win	access:public	signature:() const
Win::Get_group	openmpi/ompi/mpi/cxx/win.h	/^  virtual MPI::Group Get_group() const;  $/;"	p	class:Win	access:public	signature:() const
Win::Get_name	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Get_name(char* win_name, int& resultlen) const;$/;"	p	class:Win	access:public	signature:(char* win_name, int& resultlen) const
Win::Lock	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Lock(int lock_type, int rank, int assert) const;$/;"	p	class:Win	access:public	signature:(int lock_type, int rank, int assert) const
Win::Post	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Post(const MPI::Group& group, int assert) const;$/;"	p	class:Win	access:public	signature:(const MPI::Group& group, int assert) const
Win::Put	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Put(const void* origin_addr, int origin_count, $/;"	p	class:Win	access:public	signature:(const void* origin_addr, int origin_count, const MPI::Datatype& origin_datatype, int target_rank, MPI::Aint target_disp, int target_count, const MPI::Datatype& target_datatype) const
Win::Set_attr	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Set_attr(int win_keyval, const void* attribute_val);$/;"	p	class:Win	access:public	signature:(int win_keyval, const void* attribute_val)
Win::Set_errhandler	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Set_errhandler(const MPI::Errhandler& errhandler) const;$/;"	p	class:Win	access:public	signature:(const MPI::Errhandler& errhandler) const
Win::Set_name	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Set_name(const char* win_name);$/;"	p	class:Win	access:public	signature:(const char* win_name)
Win::Start	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Start(const MPI::Group& group, int assert) const; $/;"	p	class:Win	access:public	signature:(const MPI::Group& group, int assert) const
Win::Test	openmpi/ompi/mpi/cxx/win.h	/^  virtual bool Test() const;$/;"	p	class:Win	access:public	signature:() const
Win::Unlock	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Unlock(int rank) const;$/;"	p	class:Win	access:public	signature:(int rank) const
Win::Wait	openmpi/ompi/mpi/cxx/win.h	/^  virtual void Wait() const;$/;"	p	class:Win	access:public	signature:() const
Win::Win	openmpi/ompi/mpi/cxx/win.h	/^  Win() : mpi_win(MPI_WIN_NULL) { }$/;"	f	class:Win	access:public	signature:()
Win::Win	openmpi/ompi/mpi/cxx/win.h	/^  Win(MPI_Win i) : mpi_win(i) { }$/;"	f	class:Win	access:public	signature:(MPI_Win i)
Win::Win	openmpi/ompi/mpi/cxx/win.h	/^  Win(const Win& data) : mpi_win(data.mpi_win) { }$/;"	f	class:Win	access:public	signature:(const Win& data)
Win::cxx_extra_states_lock	openmpi/ompi/mpi/cxx/win.h	/^  static opal_mutex_t cxx_extra_states_lock;$/;"	m	class:Win	access:public
Win::do_create_keyval	openmpi/ompi/mpi/cxx/win.h	/^  static int do_create_keyval(MPI_Win_copy_attr_function* c_copy_fn,$/;"	p	class:Win	access:protected	signature:(MPI_Win_copy_attr_function* c_copy_fn, MPI_Win_delete_attr_function* c_delete_fn, Copy_attr_function* cxx_copy_fn, Delete_attr_function* cxx_delete_fn, void* extra_state, int &keyval)
Win::keyval_intercept_data_t	openmpi/ompi/mpi/cxx/win.h	/^  struct keyval_intercept_data_t {$/;"	s	class:Win	access:public
Win::keyval_intercept_data_t::c_copy_fn	openmpi/ompi/mpi/cxx/win.h	/^      MPI_Win_copy_attr_function *c_copy_fn;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
Win::keyval_intercept_data_t::c_delete_fn	openmpi/ompi/mpi/cxx/win.h	/^      MPI_Win_delete_attr_function *c_delete_fn;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
Win::keyval_intercept_data_t::cxx_copy_fn	openmpi/ompi/mpi/cxx/win.h	/^      Copy_attr_function* cxx_copy_fn;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
Win::keyval_intercept_data_t::cxx_delete_fn	openmpi/ompi/mpi/cxx/win.h	/^      Delete_attr_function* cxx_delete_fn;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
Win::keyval_intercept_data_t::extra_state	openmpi/ompi/mpi/cxx/win.h	/^      void *extra_state;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
Win::mpi_win	openmpi/ompi/mpi/cxx/win.h	/^  MPI_Win mpi_win;$/;"	m	class:Win	access:protected
Win::operator =	openmpi/ompi/mpi/cxx/win.h	/^  Win& operator= (const MPI_Win &i) {$/;"	f	class:Win	access:public	signature:(const MPI_Win &i)
Win::operator =	openmpi/ompi/mpi/cxx/win.h	/^  Win& operator=(const Win& data) {$/;"	f	class:Win	access:public	signature:(const Win& data)
Win::operator MPI_Win	openmpi/ompi/mpi/cxx/win.h	/^  operator MPI_Win () const { return mpi_win; }$/;"	f	class:Win	access:public	signature:() const
Win::~Win	openmpi/ompi/mpi/cxx/win.h	/^  virtual ~Win() { }$/;"	f	class:Win	access:public	signature:()
Write	openmpi/ompi/mpi/cxx/file.h	/^  void Write(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write	openmpi/ompi/mpi/cxx/file.h	/^  void Write(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_all	openmpi/ompi/mpi/cxx/file.h	/^  void Write_all(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_all	openmpi/ompi/mpi/cxx/file.h	/^  void Write_all(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_all	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_all	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_all_begin	openmpi/ompi/mpi/cxx/file.h	/^  void Write_all_begin(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_all_begin	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all_begin(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_all_end	openmpi/ompi/mpi/cxx/file.h	/^  void Write_all_end(const void* buf);$/;"	p	class:File	access:public	signature:(const void* buf)
Write_all_end	openmpi/ompi/mpi/cxx/file.h	/^  void Write_all_end(const void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(const void* buf, MPI::Status& status)
Write_all_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all_end(const void* buf)$/;"	f	class:MPI::File	signature:(const void* buf)
Write_all_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_all_end(const void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(const void* buf, MPI::Status& status)
Write_at	openmpi/ompi/mpi/cxx/file.h	/^  void Write_at(MPI::Offset offset,  const void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
Write_at	openmpi/ompi/mpi/cxx/file.h	/^  void Write_at(MPI::Offset offset,  const void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_at	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
Write_at	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_at_all	openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all(MPI::Offset offset,  const void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
Write_at_all	openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all(MPI::Offset offset,  const void* buf, int count,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_at_all	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
Write_at_all	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_at_all_begin	openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all_begin(MPI::Offset offset, const void* buf,$/;"	p	class:File	access:public	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
Write_at_all_begin	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all_begin(MPI::Offset offset,$/;"	f	class:MPI::File	signature:(MPI::Offset offset, const void* buf, int count, const MPI::Datatype& datatype)
Write_at_all_end	openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all_end(const void* buf);$/;"	p	class:File	access:public	signature:(const void* buf)
Write_at_all_end	openmpi/ompi/mpi/cxx/file.h	/^  void Write_at_all_end(const void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(const void* buf, MPI::Status& status)
Write_at_all_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all_end(const void* buf)$/;"	f	class:MPI::File	signature:(const void* buf)
Write_at_all_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_at_all_end(const void* buf, MPI::Status& status)$/;"	f	class:MPI::File	signature:(const void* buf, MPI::Status& status)
Write_ordered	openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_ordered	openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_ordered	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_ordered	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_ordered_begin	openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered_begin(const void* buf, int count, $/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_ordered_begin	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered_begin(const void* buf, int count, $/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_ordered_end	openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered_end(const void* buf);$/;"	p	class:File	access:public	signature:(const void* buf)
Write_ordered_end	openmpi/ompi/mpi/cxx/file.h	/^  void Write_ordered_end(const void* buf, MPI::Status& status);$/;"	p	class:File	access:public	signature:(const void* buf, MPI::Status& status)
Write_ordered_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered_end(const void* buf)$/;"	f	class:MPI::File	signature:(const void* buf)
Write_ordered_end	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_ordered_end(const void* buf,$/;"	f	class:MPI::File	signature:(const void* buf, MPI::Status& status)
Write_shared	openmpi/ompi/mpi/cxx/file.h	/^  void Write_shared(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_shared	openmpi/ompi/mpi/cxx/file.h	/^  void Write_shared(const void* buf, int count,$/;"	p	class:File	access:public	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Write_shared	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_shared(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype)
Write_shared	openmpi/ompi/mpi/cxx/file_inln.h	/^MPI::File::Write_shared(const void* buf, int count,$/;"	f	class:MPI::File	signature:(const void* buf, int count, const MPI::Datatype& datatype, MPI::Status& status)
Wtick	openmpi/ompi/mpi/cxx/functions.h	/^Wtick();$/;"	p	signature:()
Wtick	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Wtick()$/;"	f	class:MPI	signature:()
Wtime	openmpi/ompi/mpi/cxx/functions.h	/^Wtime();$/;"	p	signature:()
Wtime	openmpi/ompi/mpi/cxx/functions_inln.h	/^MPI::Wtime()$/;"	f	class:MPI	signature:()
_MPI2CPP_COPYATTRFN_	openmpi/ompi/mpi/cxx/comm.h	112;"	d
_MPI2CPP_DELETEATTRFN_	openmpi/ompi/mpi/cxx/comm.h	113;"	d
_MPI2CPP_ERRHANDLERFN_	openmpi/ompi/mpi/cxx/comm.h	111;"	d
_PLATFORM_COMPILER_GNU_VERSION_STR	mpi_portable_platform.h	368;"	d
_PLATFORM_COMPILER_INTEL_MIN_BUILDDATE	mpi_portable_platform.h	87;"	d
_PLATFORM_INTEL_COMPILER_BUILD_DATE	mpi_portable_platform.h	89;"	d
_PLATFORM_INTEL_COMPILER_BUILD_DATE	mpi_portable_platform.h	91;"	d
_SHMEM_BARRIER_SYNC_SIZE	shmem.h	92;"	d
_SHMEM_BCAST_SYNC_SIZE	shmem.h	93;"	d
_SHMEM_COLLECT_SYNC_SIZE	shmem.h	94;"	d
_SHMEM_REDUCE_MIN_WRKDATA_SIZE	shmem.h	96;"	d
_SHMEM_REDUCE_SYNC_SIZE	shmem.h	95;"	d
_SHMEM_SYNC_VALUE	shmem.h	97;"	d
_STRINGIFY	mpi_portable_platform.h	76;"	d
_STRINGIFY_HELPER	mpi_portable_platform.h	75;"	d
_VT_INTTYPES_H	vampirtrace/vt_inttypes.h	14;"	d
_VT_LIBWRAP_FUNC_INIT_DECL_VARS	vampirtrace/vt_libwrap.h	75;"	d
_VT_LIBWRAP_H	vampirtrace/vt_libwrap.h	14;"	d
_VT_PLUGIN_CNTR_H	vampirtrace/vt_plugin_cntr.h	14;"	d
_VT_USER_COMMENT_H	vampirtrace/vt_user_comment.h	18;"	d
_VT_USER_CONTROL_H	vampirtrace/vt_user_control.h	18;"	d
_VT_USER_COUNT_H	vampirtrace/vt_user_count.h	18;"	d
_VT_USER_H	vampirtrace/vt_user.h	14;"	d
_VT_USER_MARKER_H	vampirtrace/vt_user_marker.h	18;"	d
_VT_USER_REGION_H	vampirtrace/vt_user_region.h	18;"	d
_VT_WRAP_PTHREAD_H	vampirtrace/vt_wrap_pthread.h	14;"	d
__MPP_SHMEM_H__	mpp/shmem.h	12;"	d
__PLATFORM_COMPILER_GNU_VERSION_STR	mpi_portable_platform.h	372;"	d
__PLATFORM_COMPILER_GNU_VERSION_STR	mpi_portable_platform.h	375;"	d
__PLATFORM_COMPILER_GNU_VERSION_STR	mpi_portable_platform.h	378;"	d
__VT_EXTERN_DECL	vampirtrace/vt_user.h	21;"	d
__VT_EXTERN_DECL	vampirtrace/vt_user.h	23;"	d
__VT_NOINST_ATTR	vampirtrace/vt_user.h	31;"	d
__VT_NOINST_ATTR	vampirtrace/vt_user.h	33;"	d
__VT_NOINST_ATTR	vampirtrace/vt_user_region.h	/^    VT_Tracer(const char* r, const char* f, int l) __VT_NOINST_ATTR;$/;"	m	struct:VT_Tracer	access:public
__VT_NOINST_ATTR	vampirtrace/vt_user_region.h	/^    VT_Tracer(unsigned int r, const char*, int) __VT_NOINST_ATTR;$/;"	m	struct:VT_Tracer	access:public
__VT_NOINST_ATTR	vampirtrace/vt_user_region.h	/^    ~VT_Tracer() __VT_NOINST_ATTR;$/;"	m	struct:VT_Tracer	access:public
__mpi_interface_deprecated__	mpi.h	269;"	d
__mpi_interface_deprecated__	mpi.h	271;"	d
__mpi_interface_deprecated__	mpi.h	284;"	d
_cancelled	mpi.h	/^    int _cancelled;$/;"	m	struct:ompi_status_public_t	access:public
_my_pe	shmem.h	/^OSHMEM_DECLSPEC  int _my_pe(void);$/;"	p	signature:(void)
_num_pes	shmem.h	/^OSHMEM_DECLSPEC  int _num_pes(void);$/;"	p	signature:(void)
_ucount	mpi.h	/^    size_t _ucount;$/;"	m	struct:ompi_status_public_t	access:public
add_counter	vampirtrace/vt_plugin_cntr.h	/^  int32_t (*add_counter)(char * event_name);$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
argument	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t argument;$/;"	m	struct:struct_OTF_MapEntry	access:public
argument	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t argument;$/;"	m	struct:struct_OTF_Pair	access:public
array	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint8_t array[OTF_KEYVALUE_MAX_ARRAY_LEN];$/;"	m	struct:byte_array_struct	access:public
array	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint32_t* array;$/;"	m	struct:struct_OTF_RBuffer	access:public
arraysize	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint32_t arraysize;$/;"	m	struct:struct_OTF_RBuffer	access:public
begin_first_line	vampirtrace/pomp_lib.h	/^  int   begin_first_line;      \/* line number first line opening pragma *\/$/;"	m	struct:ompregdescr	access:public
begin_last_line	vampirtrace/pomp_lib.h	/^  int   begin_last_line;       \/* line number last  line opening pragma *\/$/;"	m	struct:ompregdescr	access:public
buffer	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	char* buffer;$/;"	m	struct:struct_OTF_RBuffer	access:public
buffer	vampirtrace/open-trace-format/OTF_WBuffer.h	/^	char* buffer;$/;"	m	struct:struct_OTF_WBuffer	access:public
buffersizes	vampirtrace/open-trace-format/OTF_RStream.h	/^	uint32_t buffersizes;$/;"	m	struct:struct_OTF_RStream	access:public
buffersizes	vampirtrace/open-trace-format/OTF_WStream.h	/^	uint32_t buffersizes;$/;"	m	struct:struct_OTF_WStream	access:public
byte_array	vampirtrace/open-trace-format/OTF_KeyValue.h	/^} byte_array;$/;"	t	typeref:struct:byte_array_struct
byte_array_struct	vampirtrace/open-trace-format/OTF_KeyValue.h	/^typedef struct byte_array_struct {$/;"	s
byte_array_struct::array	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint8_t array[OTF_KEYVALUE_MAX_ARRAY_LEN];$/;"	m	struct:byte_array_struct	access:public
byte_array_struct::len	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint32_t len;$/;"	m	struct:byte_array_struct	access:public
c_copy_fn	openmpi/ompi/mpi/cxx/comm.h	/^        MPI_Comm_copy_attr_function *c_copy_fn;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
c_copy_fn	openmpi/ompi/mpi/cxx/datatype.h	/^        MPI_Type_copy_attr_function *c_copy_fn;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
c_copy_fn	openmpi/ompi/mpi/cxx/win.h	/^      MPI_Win_copy_attr_function *c_copy_fn;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
c_delete_fn	openmpi/ompi/mpi/cxx/comm.h	/^        MPI_Comm_delete_attr_function *c_delete_fn;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
c_delete_fn	openmpi/ompi/mpi/cxx/datatype.h	/^        MPI_Type_delete_attr_function *c_delete_fn;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
c_delete_fn	openmpi/ompi/mpi/cxx/win.h	/^      MPI_Win_delete_attr_function *c_delete_fn;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
cntr_property	vampirtrace/vt_plugin_cntr.h	/^  uint32_t cntr_property;$/;"	m	struct:vt_plugin_cntr_metric_info_struct	access:public
comm.h	openmpi/ompi/mpi/cxx/comm.h	1;"	F
comm_inln.h	openmpi/ompi/mpi/cxx/comm_inln.h	1;"	F
compression	vampirtrace/open-trace-format/OTF_WStream.h	/^	OTF_FileCompression compression;$/;"	m	struct:struct_OTF_WStream	access:public
constants.h	openmpi/ompi/mpi/cxx/constants.h	1;"	F
convert_info_to_mpi_info	openmpi/ompi/mpi/cxx/intracomm.h	/^  static inline MPI_Info *convert_info_to_mpi_info(int p_nbr, $/;"	p	class:Intracomm	access:protected	signature:(int p_nbr, const Info p_info_tbl[])
convert_info_to_mpi_info	openmpi/ompi/mpi/cxx/intracomm_inln.h	/^MPI::Intracomm::convert_info_to_mpi_info(int p_nbr, const Info p_info_tbl[])$/;"	f	class:MPI::Intracomm	signature:(int p_nbr, const Info p_info_tbl[])
count	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint32_t count;                 \/* total number of entries in list (treat byte arrays particular) --> internal use only *\/$/;"	m	struct:OTF_KeyValueList_struct	access:public
cxx_copy_fn	openmpi/ompi/mpi/cxx/comm.h	/^        Copy_attr_function* cxx_copy_fn;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
cxx_copy_fn	openmpi/ompi/mpi/cxx/datatype.h	/^        Copy_attr_function* cxx_copy_fn;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
cxx_copy_fn	openmpi/ompi/mpi/cxx/win.h	/^      Copy_attr_function* cxx_copy_fn;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
cxx_delete_fn	openmpi/ompi/mpi/cxx/comm.h	/^        Delete_attr_function* cxx_delete_fn;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
cxx_delete_fn	openmpi/ompi/mpi/cxx/datatype.h	/^        Delete_attr_function* cxx_delete_fn;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
cxx_delete_fn	openmpi/ompi/mpi/cxx/win.h	/^      Delete_attr_function* cxx_delete_fn;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
cxx_extra_states_lock	openmpi/ompi/mpi/cxx/comm.h	/^    static opal_mutex_t cxx_extra_states_lock;$/;"	m	class:Comm	access:public
cxx_extra_states_lock	openmpi/ompi/mpi/cxx/datatype.h	/^    static opal_mutex_t cxx_extra_states_lock;$/;"	m	class:Datatype	access:public
cxx_extra_states_lock	openmpi/ompi/mpi/cxx/win.h	/^  static opal_mutex_t cxx_extra_states_lock;$/;"	m	class:Win	access:public
data	vampirtrace/pomp_lib.h	/^  void* data;                  \/* space for performance data            *\/$/;"	m	struct:ompregdescr	access:public
datatype.h	openmpi/ompi/mpi/cxx/datatype.h	1;"	F
datatype_inln.h	openmpi/ompi/mpi/cxx/datatype_inln.h	1;"	F
defBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^	OTF_RBuffer* defBuffer;$/;"	m	struct:struct_OTF_RStream	access:public
defBuffer	vampirtrace/open-trace-format/OTF_WStream.h	/^	OTF_WBuffer* defBuffer;$/;"	m	struct:struct_OTF_WStream	access:public
disable_counter	vampirtrace/vt_plugin_cntr.h	/^  int32_t (*disable_counter)(int32_t ID);$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
do_create_keyval	openmpi/ompi/mpi/cxx/comm.h	/^  static int do_create_keyval(MPI_Comm_copy_attr_function* c_copy_fn,$/;"	p	class:Comm	access:protected	signature:(MPI_Comm_copy_attr_function* c_copy_fn, MPI_Comm_delete_attr_function* c_delete_fn, Copy_attr_function* cxx_copy_fn, Delete_attr_function* cxx_delete_fn, void* extra_state, int &keyval)
do_create_keyval	openmpi/ompi/mpi/cxx/datatype.h	/^  static int do_create_keyval(MPI_Type_copy_attr_function* c_copy_fn,$/;"	p	class:Datatype	access:protected	signature:(MPI_Type_copy_attr_function* c_copy_fn, MPI_Type_delete_attr_function* c_delete_fn, Copy_attr_function* cxx_copy_fn, Delete_attr_function* cxx_delete_fn, void* extra_state, int &keyval)
do_create_keyval	openmpi/ompi/mpi/cxx/win.h	/^  static int do_create_keyval(MPI_Win_copy_attr_function* c_copy_fn,$/;"	p	class:Win	access:protected	signature:(MPI_Win_copy_attr_function* c_copy_fn, MPI_Win_delete_attr_function* c_delete_fn, Copy_attr_function* cxx_copy_fn, Delete_attr_function* cxx_delete_fn, void* extra_state, int &keyval)
eCartcomm	openmpi/ompi/mpi/cxx/mpicxx.h	/^enum CommType { eIntracomm, eIntercomm, eCartcomm, eGraphcomm};$/;"	e	enum:CommType
eGraphcomm	openmpi/ompi/mpi/cxx/mpicxx.h	/^enum CommType { eIntracomm, eIntercomm, eCartcomm, eGraphcomm};$/;"	e	enum:CommType
eIntercomm	openmpi/ompi/mpi/cxx/mpicxx.h	/^enum CommType { eIntracomm, eIntercomm, eCartcomm, eGraphcomm};$/;"	e	enum:CommType
eIntracomm	openmpi/ompi/mpi/cxx/mpicxx.h	/^enum CommType { eIntracomm, eIntercomm, eCartcomm, eGraphcomm};$/;"	e	enum:CommType
enable_counter	vampirtrace/vt_plugin_cntr.h	/^  int32_t (*enable_counter)(int32_t ID);$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
end	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint32_t end;$/;"	m	struct:struct_OTF_RBuffer	access:public
end_first_line	vampirtrace/pomp_lib.h	/^  int   end_first_line;        \/* line number first line closing pragma *\/$/;"	m	struct:ompregdescr	access:public
end_last_line	vampirtrace/pomp_lib.h	/^  int   end_last_line;         \/* line number last  line closing pragma *\/$/;"	m	struct:ompregdescr	access:public
enum_OTF_FileMode	vampirtrace/open-trace-format/OTF_File.h	/^enum enum_OTF_FileMode {$/;"	g
enum_OTF_FileStatus	vampirtrace/open-trace-format/OTF_File.h	/^enum enum_OTF_FileStatus {$/;"	g
enum_OTF_IofslMode	vampirtrace/open-trace-format/OTF_Definitions.h	/^enum enum_OTF_IofslMode {$/;"	g
errhandler.h	openmpi/ompi/mpi/cxx/errhandler.h	1;"	F
errhandler_inln.h	openmpi/ompi/mpi/cxx/errhandler_inln.h	1;"	F
error_class	openmpi/ompi/mpi/cxx/exception.h	/^  int error_class;$/;"	m	class:Exception	access:protected
error_code	openmpi/ompi/mpi/cxx/exception.h	/^  int error_code;$/;"	m	class:Exception	access:protected
error_string	openmpi/ompi/mpi/cxx/exception.h	/^  char* error_string;$/;"	m	class:Exception	access:protected
eventBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^	OTF_RBuffer* eventBuffer;$/;"	m	struct:struct_OTF_RStream	access:public
eventBuffer	vampirtrace/open-trace-format/OTF_WStream.h	/^	OTF_WBuffer* eventBuffer;$/;"	m	struct:struct_OTF_WStream	access:public
exception.h	openmpi/ompi/mpi/cxx/exception.h	1;"	F
externalbuffer	vampirtrace/open-trace-format/OTF_File.h	/^	const char* externalbuffer;$/;"	m	struct:struct_OTF_File	access:public
externallen	vampirtrace/open-trace-format/OTF_File.h	/^	uint64_t externallen;$/;"	m	struct:struct_OTF_File	access:public
externalpos	vampirtrace/open-trace-format/OTF_File.h	/^	uint64_t externalpos;$/;"	m	struct:struct_OTF_File	access:public
extra_state	openmpi/ompi/mpi/cxx/comm.h	/^        void *extra_state;$/;"	m	struct:Comm::keyval_intercept_data_t	access:public
extra_state	openmpi/ompi/mpi/cxx/datatype.h	/^        void *extra_state;$/;"	m	struct:Datatype::keyval_intercept_data_t	access:public
extra_state	openmpi/ompi/mpi/cxx/win.h	/^      void *extra_state;$/;"	m	struct:Win::keyval_intercept_data_t	access:public
file	vampirtrace/open-trace-format/OTF_File.h	/^	FILE* file;$/;"	m	struct:struct_OTF_File	access:public
file	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	OTF_File* file;$/;"	m	struct:struct_OTF_RBuffer	access:public
file	vampirtrace/open-trace-format/OTF_WBuffer.h	/^	OTF_File* file;$/;"	m	struct:struct_OTF_WBuffer	access:public
file.h	openmpi/ompi/mpi/cxx/file.h	1;"	F
file_inln.h	openmpi/ompi/mpi/cxx/file_inln.h	1;"	F
file_name	vampirtrace/pomp_lib.h	/^  const char* file_name;       \/* source code location                  *\/$/;"	m	struct:ompregdescr	access:public
filename	vampirtrace/open-trace-format/OTF_File.h	/^	char* filename;$/;"	m	struct:struct_OTF_File	access:public
filesize	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint64_t filesize;$/;"	m	struct:struct_OTF_RBuffer	access:public
finalize	vampirtrace/vt_plugin_cntr.h	/^  void (*finalize)(void);$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
firstTime	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint64_t firstTime;$/;"	m	struct:struct_OTF_RBuffer	access:public
firsthandlerarg	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^        void** firsthandlerarg;$/;"	m	struct:struct_OTF_HandlerArray	access:public
format	vampirtrace/open-trace-format/OTF_WStream.h	/^	uint32_t format;$/;"	m	struct:struct_OTF_WStream	access:public
func_group	vampirtrace/vt_libwrap.h	/^  char* func_group;$/;"	m	struct:VTLibwrapAttr_struct	access:public
functions.h	openmpi/ompi/mpi/cxx/functions.h	1;"	F
functions_inln.h	openmpi/ompi/mpi/cxx/functions_inln.h	1;"	F
get_all_values	vampirtrace/vt_plugin_cntr.h	/^  uint64_t (*get_all_values)(int32_t, vt_plugin_cntr_timevalue **);$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
get_current_value	vampirtrace/vt_plugin_cntr.h	/^  uint64_t (*get_current_value)(int32_t ID);$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
get_event_info	vampirtrace/vt_plugin_cntr.h	/^  vt_plugin_cntr_metric_info * (*get_event_info)(char *);$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
get_info	vampirtrace/vt_plugin_cntr.h	/^vt_plugin_cntr_info get_info(void);$/;"	p	signature:(void)
globalexit	shmem-compat.h	/^OSHMEM_DECLSPEC  void globalexit(int status);$/;"	p	signature:(int status)
group.h	openmpi/ompi/mpi/cxx/group.h	1;"	F
group_inln.h	openmpi/ompi/mpi/cxx/group_inln.h	1;"	F
i	vampirtrace/vt_user_region.h	/^    unsigned int i;$/;"	m	struct:VT_Tracer	access:public
id	vampirtrace/open-trace-format/OTF_RStream.h	/^	uint32_t id;$/;"	m	struct:struct_OTF_RStream	access:public
id	vampirtrace/open-trace-format/OTF_WStream.h	/^	uint32_t id;$/;"	m	struct:struct_OTF_WStream	access:public
id_cxx_cancel_fn	openmpi/ompi/mpi/cxx/request.h	/^        Grequest::Cancel_function *id_cxx_cancel_fn;$/;"	m	struct:Grequest::Intercept_data_t	access:public
id_cxx_free_fn	openmpi/ompi/mpi/cxx/request.h	/^        Grequest::Free_function *id_cxx_free_fn;$/;"	m	struct:Grequest::Intercept_data_t	access:public
id_cxx_query_fn	openmpi/ompi/mpi/cxx/request.h	/^        Grequest::Query_function *id_cxx_query_fn;$/;"	m	struct:Grequest::Intercept_data_t	access:public
id_extra	openmpi/ompi/mpi/cxx/request.h	/^        void *id_extra;$/;"	m	struct:Grequest::Intercept_data_t	access:public
info.h	openmpi/ompi/mpi/cxx/info.h	1;"	F
info_inln.h	openmpi/ompi/mpi/cxx/info_inln.h	1;"	F
init	vampirtrace/vt_plugin_cntr.h	/^  int32_t(*init)(void);$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
init_func	vampirtrace/vt_libwrap.h	/^  VTLibwrapAttrInitFunc init_func;$/;"	m	struct:VTLibwrapAttr_struct	access:public
int16_t	vampirtrace/open-trace-format/OTF_inttypes_unix.h	/^	typedef signed short int                int16_t;$/;"	t
int16_t	vampirtrace/vt_inttypes.h	/^  typedef signed short int          int16_t;$/;"	t
int32_t	vampirtrace/open-trace-format/OTF_inttypes_unix.h	/^	typedef signed int                      int32_t;$/;"	t
int32_t	vampirtrace/vt_inttypes.h	/^  typedef signed int                int32_t;$/;"	t
int64_t	vampirtrace/open-trace-format/OTF_inttypes_unix.h	/^		typedef signed long int         int64_t;$/;"	t
int64_t	vampirtrace/open-trace-format/OTF_inttypes_unix.h	/^		typedef signed long long int    int64_t;$/;"	t
int64_t	vampirtrace/vt_inttypes.h	/^    typedef signed long int         int64_t;$/;"	t
int64_t	vampirtrace/vt_inttypes.h	/^    typedef signed long long int    int64_t;$/;"	t
int8_t	vampirtrace/open-trace-format/OTF_inttypes_unix.h	/^	typedef signed char                     int8_t;$/;"	t
int8_t	vampirtrace/vt_inttypes.h	/^  typedef signed char               int8_t;$/;"	t
intercomm.h	openmpi/ompi/mpi/cxx/intercomm.h	1;"	F
intercomm_inln.h	openmpi/ompi/mpi/cxx/intercomm_inln.h	1;"	F
intracomm.h	openmpi/ompi/mpi/cxx/intracomm.h	1;"	F
intracomm_inln.h	openmpi/ompi/mpi/cxx/intracomm_inln.h	1;"	F
iofsl	vampirtrace/open-trace-format/OTF_File.h	/^	OTF_File_iofsl *iofsl;$/;"	m	struct:struct_OTF_File	access:public
is_thread_registered	vampirtrace/vt_plugin_cntr.h	/^  int32_t (*is_thread_registered)(void);$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
jumpsize	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint32_t jumpsize;$/;"	m	struct:struct_OTF_RBuffer	access:public
key	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint32_t key;$/;"	m	struct:OTF_KeyValuePair_struct	access:public
key_count	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint32_t key_count;             \/* number of different keys in list --> user-relevant *\/$/;"	m	struct:OTF_KeyValueList_struct	access:public
keyval_intercept_data_t	openmpi/ompi/mpi/cxx/comm.h	/^    struct keyval_intercept_data_t {$/;"	s	class:Comm	access:public
keyval_intercept_data_t	openmpi/ompi/mpi/cxx/datatype.h	/^    struct keyval_intercept_data_t {$/;"	s	class:Datatype	access:public
keyval_intercept_data_t	openmpi/ompi/mpi/cxx/win.h	/^  struct keyval_intercept_data_t {$/;"	s	class:Win	access:public
kvBegin	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_KeyValuePairList *kvBegin;   \/* first element of the list *\/$/;"	m	struct:OTF_KeyValueList_struct	access:public
kvCurrent	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_KeyValuePairList *kvCurrent; \/* first unused element in the list, insert new ones here *\/$/;"	m	struct:OTF_KeyValueList_struct	access:public
kvEnd	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_KeyValuePairList *kvEnd;     \/* last allocated element of the list, may be used or not *\/$/;"	m	struct:OTF_KeyValueList_struct	access:public
kvNext	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	struct OTF_KeyValuePairList_struct *kvNext;$/;"	m	struct:OTF_KeyValuePairList_struct	typeref:struct:OTF_KeyValuePairList_struct::OTF_KeyValuePairList_struct	access:public
kvPair	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	struct OTF_KeyValuePair_struct kvPair;$/;"	m	struct:OTF_KeyValuePairList_struct	typeref:struct:OTF_KeyValuePairList_struct::OTF_KeyValuePair_struct	access:public
kvPrev	vampirtrace/open-trace-format/OTF_KeyValue.h	/^    struct OTF_KeyValuePairList_struct *kvPrev;$/;"	m	struct:OTF_KeyValuePairList_struct	typeref:struct:OTF_KeyValuePairList_struct::OTF_KeyValuePairList_struct	access:public
lastTime	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint64_t lastTime;$/;"	m	struct:struct_OTF_RBuffer	access:public
lastnewline	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint32_t lastnewline;$/;"	m	struct:struct_OTF_RBuffer	access:public
len	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint32_t len;$/;"	m	struct:byte_array_struct	access:public
libc	vampirtrace/vt_libwrap.h	/^  char  libc;$/;"	m	struct:VTLibwrapAttr_struct	access:public
list	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	OTF_KeyValueList* list;$/;"	m	struct:struct_OTF_RBuffer	access:public
logPE_stride	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexd_prod_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
logPE_stride	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexd_sum_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
logPE_stride	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexf_prod_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
logPE_stride	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexf_sum_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
logPE_stride	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexd_prod_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
logPE_stride	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexd_sum_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
logPE_stride	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexf_prod_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
logPE_stride	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexf_sum_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
manager	vampirtrace/open-trace-format/OTF_File.h	/^	OTF_FileManager* manager;$/;"	m	struct:struct_OTF_File	access:public
manager	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	OTF_FileManager* manager;$/;"	m	struct:struct_OTF_MasterControl	access:public
manager	vampirtrace/open-trace-format/OTF_RStream.h	/^	OTF_FileManager* manager;$/;"	m	struct:struct_OTF_RStream	access:public
manager	vampirtrace/open-trace-format/OTF_WStream.h	/^	OTF_FileManager* manager;$/;"	m	struct:struct_OTF_WStream	access:public
map	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	OTF_MapEntry* map;$/;"	m	struct:struct_OTF_MasterControl	access:public
markerBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^	OTF_RBuffer* markerBuffer;$/;"	m	struct:struct_OTF_RStream	access:public
markerBuffer	vampirtrace/open-trace-format/OTF_WStream.h	/^	OTF_WBuffer* markerBuffer;$/;"	m	struct:struct_OTF_WStream	access:public
mode	vampirtrace/open-trace-format/OTF_File.h	/^	OTF_FileMode mode;$/;"	m	struct:struct_OTF_File	access:public
mpi	openmpi/ompi/mpi/cxx/group.h	/^  inline MPI_Group mpi() const { return mpi_group; }$/;"	f	class:Group	access:public	signature:() const
mpi-ext.h	mpi-ext.h	1;"	F
mpi.h	mpi.h	1;"	F
mpi_comm	openmpi/ompi/mpi/cxx/comm.h	/^  MPI_Comm mpi_comm;$/;"	m	class:Comm_Null	access:protected
mpi_datatype	openmpi/ompi/mpi/cxx/datatype.h	/^  MPI_Datatype mpi_datatype;$/;"	m	class:Datatype	access:protected
mpi_errhandler	openmpi/ompi/mpi/cxx/errhandler.h	/^  MPI_Errhandler mpi_errhandler;$/;"	m	class:Errhandler	access:private
mpi_file	openmpi/ompi/mpi/cxx/file.h	/^  MPI_File mpi_file;$/;"	m	class:File	access:protected
mpi_group	openmpi/ompi/mpi/cxx/group.h	/^  MPI_Group mpi_group;$/;"	m	class:Group	access:protected
mpi_info	openmpi/ompi/mpi/cxx/info.h	/^  MPI_Info mpi_info;$/;"	m	class:Info	access:protected
mpi_op	openmpi/ompi/mpi/cxx/op.h	/^  MPI_Op mpi_op;$/;"	m	class:Op	access:protected
mpi_portable_platform.h	mpi_portable_platform.h	1;"	F
mpi_request	openmpi/ompi/mpi/cxx/request.h	/^  MPI_Request mpi_request;$/;"	m	class:Request	access:protected
mpi_status	openmpi/ompi/mpi/cxx/status.h	/^  MPI_Status mpi_status;$/;"	m	class:Status	access:protected
mpi_win	openmpi/ompi/mpi/cxx/win.h	/^  MPI_Win mpi_win;$/;"	m	class:Win	access:protected
mpicxx.h	openmpi/ompi/mpi/cxx/mpicxx.h	1;"	F
mpif-ext.h	mpif-ext.h	1;"	F
mpif-sizeof.h	mpif-sizeof.h	1;"	F
mpif.h	mpif.h	1;"	F
my_pe	shmem-compat.h	/^OSHMEM_DECLSPEC  int my_pe(void);$/;"	p	signature:(void)
n	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t n;$/;"	m	struct:struct_OTF_MapEntry	access:public
n	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t n;$/;"	m	struct:struct_OTF_MasterControl	access:public
n	vampirtrace/vt_user_region.h	/^    const char* n;$/;"	m	struct:VT_Tracer	access:public
name	vampirtrace/pomp_lib.h	/^  const char* name;            \/* name of construct                     *\/$/;"	m	struct:ompregdescr	access:public
name	vampirtrace/vt_plugin_cntr.h	/^  char * name;$/;"	m	struct:vt_plugin_cntr_metric_info_struct	access:public
namestub	vampirtrace/open-trace-format/OTF_RStream.h	/^	char* namestub;$/;"	m	struct:struct_OTF_RStream	access:public
namestub	vampirtrace/open-trace-format/OTF_WStream.h	/^	char* namestub;$/;"	m	struct:struct_OTF_WStream	access:public
next	vampirtrace/pomp_lib.h	/^  struct ompregdescr* next;    \/* for linking                           *\/$/;"	m	struct:ompregdescr	typeref:struct:ompregdescr::ompregdescr	access:public
nreduce	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexd_prod_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
nreduce	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexd_sum_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
nreduce	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexf_prod_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
nreduce	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexf_sum_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
nreduce	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexd_prod_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
nreduce	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexd_sum_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
nreduce	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexf_prod_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
nreduce	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexf_sum_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
num_pes	shmem-compat.h	/^OSHMEM_DECLSPEC  int num_pes(void);$/;"	p	signature:(void)
num_sections	vampirtrace/pomp_lib.h	/^  int   num_sections;          \/* sections only: number of sections     *\/$/;"	m	struct:ompregdescr	access:public
ompi_file_errhandler_fn	mpi.h	/^typedef void (ompi_file_errhandler_fn)(MPI_File *, int *, ...);$/;"	t
ompi_file_errhandler_fn	mpi.h	/^typedef void (ompi_file_errhandler_fn)(struct ompi_file_t**, int *, ...);$/;"	t
ompi_file_t	mpi.h	/^struct ompi_file_t;$/;"	x
ompi_fortran_bogus_type_t	mpi.h	185;"	d
ompi_fortran_integer_t	mpi.h	188;"	d
ompi_message_no_proc	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_message_t ompi_message_no_proc;$/;"	x
ompi_message_null	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_message_t ompi_message_null;$/;"	x
ompi_mpi_2cplex	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_2cplex;$/;"	x
ompi_mpi_2dblcplex	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_2dblcplex;$/;"	x
ompi_mpi_2dblprec	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_2dblprec;$/;"	x
ompi_mpi_2int	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_2int;$/;"	x
ompi_mpi_2integer	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_2integer;$/;"	x
ompi_mpi_2real	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_2real;$/;"	x
ompi_mpi_aint	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_aint;$/;"	x
ompi_mpi_byte	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_byte;$/;"	x
ompi_mpi_c_bool	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_c_bool;$/;"	x
ompi_mpi_c_complex	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_c_complex;$/;"	x
ompi_mpi_c_double_complex	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_c_double_complex;$/;"	x
ompi_mpi_c_float_complex	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_c_float_complex;$/;"	x
ompi_mpi_c_long_double_complex	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_c_long_double_complex;$/;"	x
ompi_mpi_char	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_char;$/;"	x
ompi_mpi_character	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_character;$/;"	x
ompi_mpi_comm_null	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_communicator_t ompi_mpi_comm_null;$/;"	x
ompi_mpi_comm_self	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_communicator_t ompi_mpi_comm_self;$/;"	x
ompi_mpi_comm_world	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_communicator_t ompi_mpi_comm_world;$/;"	x
ompi_mpi_complex16	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_complex16;$/;"	x
ompi_mpi_complex32	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_complex32;$/;"	x
ompi_mpi_complex8	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_complex8;$/;"	x
ompi_mpi_count	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_count;$/;"	x
ompi_mpi_cplex	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_cplex;$/;"	x
ompi_mpi_cxx_bool	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_cxx_bool;$/;"	x
ompi_mpi_cxx_comm_copy_attr_intercept	openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_comm_copy_attr_intercept(MPI_Comm oldcomm, int keyval, $/;"	p	signature:(MPI_Comm oldcomm, int keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag, MPI_Comm newcomm)
ompi_mpi_cxx_comm_delete_attr_intercept	openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_comm_delete_attr_intercept(MPI_Comm comm, int keyval, $/;"	p	signature:(MPI_Comm comm, int keyval, void *attribute_val, void *extra_state)
ompi_mpi_cxx_comm_errhandler_invoke	openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_comm_errhandler_invoke(ompi_errhandler_t *c_errhandler,$/;"	p	signature:(ompi_errhandler_t *c_errhandler, MPI_Comm *mpi_comm, int *err, const char *message)
ompi_mpi_cxx_cplex	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_cxx_cplex;$/;"	x
ompi_mpi_cxx_dblcplex	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_cxx_dblcplex;$/;"	x
ompi_mpi_cxx_file_errhandler_invoke	openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_file_errhandler_invoke(ompi_errhandler_t *c_errhandler,$/;"	p	signature:(ompi_errhandler_t *c_errhandler, MPI_File *mpi_comm, int *err, const char *message)
ompi_mpi_cxx_grequest_cancel_fn_intercept	openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_grequest_cancel_fn_intercept(void *state, int canceled);$/;"	p	signature:(void *state, int canceled)
ompi_mpi_cxx_grequest_free_fn_intercept	openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_grequest_free_fn_intercept(void *state);$/;"	p	signature:(void *state)
ompi_mpi_cxx_grequest_query_fn_intercept	openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_grequest_query_fn_intercept(void *state, MPI_Status *status);$/;"	p	signature:(void *state, MPI_Status *status)
ompi_mpi_cxx_ldblcplex	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_cxx_ldblcplex;$/;"	x
ompi_mpi_cxx_op_intercept	openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_op_intercept(void *invec, void *outvec, int *len, $/;"	p	signature:(void *invec, void *outvec, int *len, MPI_Datatype *datatype, MPI_User_function *fn)
ompi_mpi_cxx_type_copy_attr_intercept	openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_type_copy_attr_intercept(MPI_Datatype oldtype, int keyval, $/;"	p	signature:(MPI_Datatype oldtype, int keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag)
ompi_mpi_cxx_type_delete_attr_intercept	openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_type_delete_attr_intercept(MPI_Datatype type, int keyval, $/;"	p	signature:(MPI_Datatype type, int keyval, void *attribute_val, void *extra_state)
ompi_mpi_cxx_win_copy_attr_intercept	openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_win_copy_attr_intercept(MPI_Win oldwin, int keyval, $/;"	p	signature:(MPI_Win oldwin, int keyval, void *extra_state, void *attribute_val_in, void *attribute_val_out, int *flag)
ompi_mpi_cxx_win_delete_attr_intercept	openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_win_delete_attr_intercept(MPI_Win win, int keyval, $/;"	p	signature:(MPI_Win win, int keyval, void *attribute_val, void *extra_state)
ompi_mpi_cxx_win_errhandler_invoke	openmpi/ompi/mpi/cxx/mpicxx.h	/^ompi_mpi_cxx_win_errhandler_invoke(ompi_errhandler_t *c_errhandler,$/;"	p	signature:(ompi_errhandler_t *c_errhandler, MPI_Win *mpi_comm, int *err, const char *message)
ompi_mpi_datatype_null	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_datatype_null;$/;"	x
ompi_mpi_dblcplex	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_dblcplex;$/;"	x
ompi_mpi_dblprec	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_dblprec;$/;"	x
ompi_mpi_double	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_double;$/;"	x
ompi_mpi_double_int	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_double_int;$/;"	x
ompi_mpi_errhandler_null	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_errhandler_t ompi_mpi_errhandler_null;$/;"	x
ompi_mpi_errors_are_fatal	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_errhandler_t ompi_mpi_errors_are_fatal;$/;"	x
ompi_mpi_errors_return	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_errhandler_t ompi_mpi_errors_return;$/;"	x
ompi_mpi_file_null	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_file_t ompi_mpi_file_null;$/;"	x
ompi_mpi_float	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_float;$/;"	x
ompi_mpi_float_int	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_float_int;$/;"	x
ompi_mpi_group_empty	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_group_t ompi_mpi_group_empty;$/;"	x
ompi_mpi_group_null	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_group_t ompi_mpi_group_null;$/;"	x
ompi_mpi_info_env	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_info_t ompi_mpi_info_env;$/;"	x
ompi_mpi_info_null	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_info_t ompi_mpi_info_null;$/;"	x
ompi_mpi_int	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_int;$/;"	x
ompi_mpi_int16_t	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_int16_t;$/;"	x
ompi_mpi_int32_t	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_int32_t;$/;"	x
ompi_mpi_int64_t	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_int64_t;$/;"	x
ompi_mpi_int8_t	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_int8_t;$/;"	x
ompi_mpi_integer	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_integer;$/;"	x
ompi_mpi_integer1	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_integer1;$/;"	x
ompi_mpi_integer16	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_integer16;$/;"	x
ompi_mpi_integer2	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_integer2;$/;"	x
ompi_mpi_integer4	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_integer4;$/;"	x
ompi_mpi_integer8	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_integer8;$/;"	x
ompi_mpi_ldblcplex	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_ldblcplex;$/;"	x
ompi_mpi_logical	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_logical;$/;"	x
ompi_mpi_logical1	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_logical1;$/;"	x
ompi_mpi_logical2	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_logical2;$/;"	x
ompi_mpi_logical4	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_logical4;$/;"	x
ompi_mpi_logical8	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_logical8;$/;"	x
ompi_mpi_long	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_long;$/;"	x
ompi_mpi_long_double	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_long_double;$/;"	x
ompi_mpi_long_int	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_long_int;$/;"	x
ompi_mpi_long_long_int	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_long_long_int;$/;"	x
ompi_mpi_longdbl_int	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_longdbl_int;$/;"	x
ompi_mpi_offset	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_offset;$/;"	x
ompi_mpi_op_band	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_op_t ompi_mpi_op_band;$/;"	x
ompi_mpi_op_bor	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_op_t ompi_mpi_op_bor;$/;"	x
ompi_mpi_op_bxor	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_op_t ompi_mpi_op_bxor;$/;"	x
ompi_mpi_op_land	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_op_t ompi_mpi_op_land;$/;"	x
ompi_mpi_op_lor	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_op_t ompi_mpi_op_lor;$/;"	x
ompi_mpi_op_lxor	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_op_t ompi_mpi_op_lxor;$/;"	x
ompi_mpi_op_max	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_op_t ompi_mpi_op_max;$/;"	x
ompi_mpi_op_maxloc	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_op_t ompi_mpi_op_maxloc;$/;"	x
ompi_mpi_op_min	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_op_t ompi_mpi_op_min;$/;"	x
ompi_mpi_op_minloc	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_op_t ompi_mpi_op_minloc;$/;"	x
ompi_mpi_op_no_op	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_op_t ompi_mpi_op_no_op;$/;"	x
ompi_mpi_op_null	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_op_t ompi_mpi_op_null;$/;"	x
ompi_mpi_op_prod	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_op_t ompi_mpi_op_prod;$/;"	x
ompi_mpi_op_replace	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_op_t ompi_mpi_op_replace;$/;"	x
ompi_mpi_op_sum	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_op_t ompi_mpi_op_sum;$/;"	x
ompi_mpi_packed	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_packed;$/;"	x
ompi_mpi_real	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_real;$/;"	x
ompi_mpi_real16	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_real16;$/;"	x
ompi_mpi_real2	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_real2;$/;"	x
ompi_mpi_real4	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_real4;$/;"	x
ompi_mpi_real8	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_real8;$/;"	x
ompi_mpi_short	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_short;$/;"	x
ompi_mpi_short_int	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_short_int;$/;"	x
ompi_mpi_signed_char	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_signed_char;$/;"	x
ompi_mpi_uint16_t	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_uint16_t;$/;"	x
ompi_mpi_uint32_t	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_uint32_t;$/;"	x
ompi_mpi_uint64_t	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_uint64_t;$/;"	x
ompi_mpi_uint8_t	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_uint8_t;$/;"	x
ompi_mpi_unsigned	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_unsigned;$/;"	x
ompi_mpi_unsigned_char	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_unsigned_char;$/;"	x
ompi_mpi_unsigned_long	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_unsigned_long;$/;"	x
ompi_mpi_unsigned_long_long	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_unsigned_long_long;$/;"	x
ompi_mpi_unsigned_short	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_unsigned_short;$/;"	x
ompi_mpi_wchar	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_datatype_t ompi_mpi_wchar;$/;"	x
ompi_mpi_win_null	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_win_t ompi_mpi_win_null;$/;"	x
ompi_op_set_cxx_callback	openmpi/ompi/mpi/cxx/op_inln.h	/^extern "C" void ompi_op_set_cxx_callback(MPI_Op op, MPI_User_function*);$/;"	p	signature:(MPI_Op op, MPI_User_function*)
ompi_request_null	mpi.h	/^OMPI_DECLSPEC extern struct ompi_predefined_request_t ompi_request_null;$/;"	x
ompi_status_public_t	mpi.h	/^struct ompi_status_public_t {$/;"	s
ompi_status_public_t	mpi.h	/^typedef struct ompi_status_public_t ompi_status_public_t;$/;"	t	typeref:struct:ompi_status_public_t
ompi_status_public_t::MPI_ERROR	mpi.h	/^    int MPI_ERROR;$/;"	m	struct:ompi_status_public_t	access:public
ompi_status_public_t::MPI_SOURCE	mpi.h	/^    int MPI_SOURCE;$/;"	m	struct:ompi_status_public_t	access:public
ompi_status_public_t::MPI_TAG	mpi.h	/^    int MPI_TAG;$/;"	m	struct:ompi_status_public_t	access:public
ompi_status_public_t::_cancelled	mpi.h	/^    int _cancelled;$/;"	m	struct:ompi_status_public_t	access:public
ompi_status_public_t::_ucount	mpi.h	/^    size_t _ucount;$/;"	m	struct:ompi_status_public_t	access:public
ompi_stdio_seek_cur	openmpi/ompi/mpi/cxx/mpicxx.h	/^static const int ompi_stdio_seek_cur = SEEK_CUR;$/;"	v
ompi_stdio_seek_end	openmpi/ompi/mpi/cxx/mpicxx.h	/^static const int ompi_stdio_seek_end = SEEK_END;$/;"	v
ompi_stdio_seek_set	openmpi/ompi/mpi/cxx/mpicxx.h	/^static const int ompi_stdio_seek_set = SEEK_SET;$/;"	v
ompi_synch_lock_shared	openmpi/ompi/mpi/cxx/mpicxx.h	/^static const int ompi_synch_lock_shared = LOCK_SHARED;$/;"	v
ompregdescr	vampirtrace/pomp_lib.h	/^struct ompregdescr {$/;"	s
ompregdescr::begin_first_line	vampirtrace/pomp_lib.h	/^  int   begin_first_line;      \/* line number first line opening pragma *\/$/;"	m	struct:ompregdescr	access:public
ompregdescr::begin_last_line	vampirtrace/pomp_lib.h	/^  int   begin_last_line;       \/* line number last  line opening pragma *\/$/;"	m	struct:ompregdescr	access:public
ompregdescr::data	vampirtrace/pomp_lib.h	/^  void* data;                  \/* space for performance data            *\/$/;"	m	struct:ompregdescr	access:public
ompregdescr::end_first_line	vampirtrace/pomp_lib.h	/^  int   end_first_line;        \/* line number first line closing pragma *\/$/;"	m	struct:ompregdescr	access:public
ompregdescr::end_last_line	vampirtrace/pomp_lib.h	/^  int   end_last_line;         \/* line number last  line closing pragma *\/$/;"	m	struct:ompregdescr	access:public
ompregdescr::file_name	vampirtrace/pomp_lib.h	/^  const char* file_name;       \/* source code location                  *\/$/;"	m	struct:ompregdescr	access:public
ompregdescr::name	vampirtrace/pomp_lib.h	/^  const char* name;            \/* name of construct                     *\/$/;"	m	struct:ompregdescr	access:public
ompregdescr::next	vampirtrace/pomp_lib.h	/^  struct ompregdescr* next;    \/* for linking                           *\/$/;"	m	struct:ompregdescr	typeref:struct:ompregdescr::ompregdescr	access:public
ompregdescr::num_sections	vampirtrace/pomp_lib.h	/^  int   num_sections;          \/* sections only: number of sections     *\/$/;"	m	struct:ompregdescr	access:public
ompregdescr::sub_name	vampirtrace/pomp_lib.h	/^  const char* sub_name;        \/* optional: region name                 *\/$/;"	m	struct:ompregdescr	access:public
op.h	openmpi/ompi/mpi/cxx/op.h	1;"	F
op_inln.h	openmpi/ompi/mpi/cxx/op_inln.h	1;"	F
opal_mutex_t	openmpi/ompi/mpi/cxx/mpicxx.h	/^struct opal_mutex_t;$/;"	x
opari_omp.h	vampirtrace/opari_omp.h	1;"	F
operator !=	openmpi/ompi/mpi/cxx/comm.h	/^  inline bool operator!=(const Comm_Null& data) const {$/;"	f	class:Comm_Null	access:public	signature:(const Comm_Null& data) const
operator !=	openmpi/ompi/mpi/cxx/datatype.h	/^  inline bool operator!= (const Datatype &a) const$/;"	f	class:Datatype	access:public	signature:(const Datatype &a) const
operator !=	openmpi/ompi/mpi/cxx/errhandler.h	/^  inline bool operator!=(const Errhandler &a) {$/;"	f	class:Errhandler	access:public	signature:(const Errhandler &a)
operator !=	openmpi/ompi/mpi/cxx/group.h	/^  inline bool operator!= (const Group &a) { return (bool)!(*this == a); }$/;"	f	class:Group	access:public	signature:(const Group &a)
operator !=	openmpi/ompi/mpi/cxx/op.h	/^  inline bool operator!= (const Op &a);$/;"	p	class:Op	access:public	signature:(const Op &a)
operator !=	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator!= (const MPI::Op &a) { return (bool)!(*this == a); }$/;"	f	class:MPI::Op	signature:(const MPI::Op &a)
operator !=	openmpi/ompi/mpi/cxx/request.h	/^  bool operator!= (const Request &a) $/;"	f	class:Request	access:public	signature:(const Request &a)
operator =	openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype& operator= (const MPI_Datatype &i) $/;"	f	class:Datatype	access:public	signature:(const MPI_Datatype &i)
operator =	openmpi/ompi/mpi/cxx/datatype.h	/^  inline Datatype& operator=(const Datatype& dt) {$/;"	f	class:Datatype	access:public	signature:(const Datatype& dt)
operator =	openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler& operator= (const MPI_Errhandler &i) {$/;"	f	class:Errhandler	access:public	signature:(const MPI_Errhandler &i)
operator =	openmpi/ompi/mpi/cxx/errhandler.h	/^  inline Errhandler& operator=(const Errhandler& e) {$/;"	f	class:Errhandler	access:public	signature:(const Errhandler& e)
operator =	openmpi/ompi/mpi/cxx/file.h	/^  File& operator= (const MPI_File &i) {$/;"	f	class:File	access:public	signature:(const MPI_File &i)
operator =	openmpi/ompi/mpi/cxx/file.h	/^  File& operator=(const File& data) {$/;"	f	class:File	access:public	signature:(const File& data)
operator =	openmpi/ompi/mpi/cxx/group.h	/^  inline Group& operator= (const MPI_Group &i) { mpi_group = i; return *this; }$/;"	f	class:Group	access:public	signature:(const MPI_Group &i)
operator =	openmpi/ompi/mpi/cxx/group.h	/^  inline Group& operator=(const Group& g) { mpi_group = g.mpi_group; return *this; }$/;"	f	class:Group	access:public	signature:(const Group& g)
operator =	openmpi/ompi/mpi/cxx/info.h	/^  Info& operator= (const MPI_Info &i) {$/;"	f	class:Info	access:public	signature:(const MPI_Info &i)
operator =	openmpi/ompi/mpi/cxx/info.h	/^  Info& operator=(const Info& data) {$/;"	f	class:Info	access:public	signature:(const Info& data)
operator =	openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm& operator=(const Comm_Null& data) {$/;"	f	class:Intercomm	access:public	signature:(const Comm_Null& data)
operator =	openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm& operator=(const Intercomm& data) {$/;"	f	class:Intercomm	access:public	signature:(const Intercomm& data)
operator =	openmpi/ompi/mpi/cxx/intercomm.h	/^  Intercomm& operator=(const MPI_Comm& data) {$/;"	f	class:Intercomm	access:public	signature:(const MPI_Comm& data)
operator =	openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm& operator=(const Comm_Null& data) {$/;"	f	class:Intracomm	access:public	signature:(const Comm_Null& data)
operator =	openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm& operator=(const Intracomm& data) {$/;"	f	class:Intracomm	access:public	signature:(const Intracomm& data)
operator =	openmpi/ompi/mpi/cxx/intracomm.h	/^  Intracomm& operator=(const MPI_Comm& data) {$/;"	f	class:Intracomm	access:public	signature:(const MPI_Comm& data)
operator =	openmpi/ompi/mpi/cxx/op.h	/^  Op& operator= (const MPI_Op &i);$/;"	p	class:Op	access:public	signature:(const MPI_Op &i)
operator =	openmpi/ompi/mpi/cxx/op.h	/^  Op& operator=(const Op& op);$/;"	p	class:Op	access:public	signature:(const Op& op)
operator =	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator= (const MPI_Op &i) { mpi_op = i; return *this; }$/;"	f	class:MPI::Op	signature:(const MPI_Op &i)
operator =	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator=(const MPI::Op& op) {$/;"	f	class:MPI::Op	signature:(const MPI::Op& op)
operator =	openmpi/ompi/mpi/cxx/request.h	/^    Grequest& operator=(const Grequest& req) {$/;"	f	class:Grequest	access:public	signature:(const Grequest& req)
operator =	openmpi/ompi/mpi/cxx/request.h	/^    Grequest& operator=(const Request& req) {$/;"	f	class:Grequest	access:public	signature:(const Request& req)
operator =	openmpi/ompi/mpi/cxx/request.h	/^  Prequest& operator=(const Prequest& r) {$/;"	f	class:Prequest	access:public	signature:(const Prequest& r)
operator =	openmpi/ompi/mpi/cxx/request.h	/^  Prequest& operator=(const Request& r) {$/;"	f	class:Prequest	access:public	signature:(const Request& r)
operator =	openmpi/ompi/mpi/cxx/request.h	/^  Request& operator= (const MPI_Request &i) {$/;"	f	class:Request	access:public	signature:(const MPI_Request &i)
operator =	openmpi/ompi/mpi/cxx/request.h	/^  Request& operator=(const Request& r) {$/;"	f	class:Request	access:public	signature:(const Request& r)
operator =	openmpi/ompi/mpi/cxx/status.h	/^  Status& operator= (const MPI_Status &i) {$/;"	f	class:Status	access:public	signature:(const MPI_Status &i)
operator =	openmpi/ompi/mpi/cxx/status.h	/^  Status& operator=(const Status& data) {$/;"	f	class:Status	access:public	signature:(const Status& data)
operator =	openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm& operator=(const Cartcomm& data) {$/;"	f	class:Cartcomm	access:public	signature:(const Cartcomm& data)
operator =	openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm& operator=(const Comm_Null& data) {$/;"	f	class:Cartcomm	access:public	signature:(const Comm_Null& data)
operator =	openmpi/ompi/mpi/cxx/topology.h	/^  Cartcomm& operator=(const MPI_Comm& data) {$/;"	f	class:Cartcomm	access:public	signature:(const MPI_Comm& data)
operator =	openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm& operator=(const Comm_Null& data) {$/;"	f	class:Graphcomm	access:public	signature:(const Comm_Null& data)
operator =	openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm& operator=(const Graphcomm& data) {$/;"	f	class:Graphcomm	access:public	signature:(const Graphcomm& data)
operator =	openmpi/ompi/mpi/cxx/topology.h	/^  Graphcomm& operator=(const MPI_Comm& data) {$/;"	f	class:Graphcomm	access:public	signature:(const MPI_Comm& data)
operator =	openmpi/ompi/mpi/cxx/win.h	/^  Win& operator= (const MPI_Win &i) {$/;"	f	class:Win	access:public	signature:(const MPI_Win &i)
operator =	openmpi/ompi/mpi/cxx/win.h	/^  Win& operator=(const Win& data) {$/;"	f	class:Win	access:public	signature:(const Win& data)
operator ==	openmpi/ompi/mpi/cxx/comm.h	/^  inline bool operator==(const Comm_Null& data) const {$/;"	f	class:Comm_Null	access:public	signature:(const Comm_Null& data) const
operator ==	openmpi/ompi/mpi/cxx/datatype.h	/^  inline bool operator== (const Datatype &a) const$/;"	f	class:Datatype	access:public	signature:(const Datatype &a) const
operator ==	openmpi/ompi/mpi/cxx/errhandler.h	/^  inline bool operator==(const Errhandler &a) {$/;"	f	class:Errhandler	access:public	signature:(const Errhandler &a)
operator ==	openmpi/ompi/mpi/cxx/group.h	/^  inline bool operator== (const Group &a) { return (bool)(mpi_group == a.mpi_group); }$/;"	f	class:Group	access:public	signature:(const Group &a)
operator ==	openmpi/ompi/mpi/cxx/op.h	/^  inline bool operator== (const Op &a);$/;"	p	class:Op	access:public	signature:(const Op &a)
operator ==	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator== (const MPI::Op &a) { return (bool)(mpi_op == a.mpi_op); }$/;"	f	class:MPI::Op	signature:(const MPI::Op &a)
operator ==	openmpi/ompi/mpi/cxx/request.h	/^  bool operator== (const Request &a) $/;"	f	class:Request	access:public	signature:(const Request &a)
operator MPI_Comm	openmpi/ompi/mpi/cxx/comm.h	/^  inline operator MPI_Comm() const { return mpi_comm; }$/;"	f	class:Comm_Null	access:public	signature:() const
operator MPI_Datatype	openmpi/ompi/mpi/cxx/datatype.h	/^  inline operator MPI_Datatype () const { return mpi_datatype; }$/;"	f	class:Datatype	access:public	signature:() const
operator MPI_Errhandler	openmpi/ompi/mpi/cxx/errhandler.h	/^  inline operator MPI_Errhandler() const { return mpi_errhandler; }$/;"	f	class:Errhandler	access:public	signature:() const
operator MPI_File	openmpi/ompi/mpi/cxx/file.h	/^  operator MPI_File () const { return mpi_file; }$/;"	f	class:File	access:public	signature:() const
operator MPI_Group	openmpi/ompi/mpi/cxx/group.h	/^  inline operator MPI_Group () const { return mpi_group; }$/;"	f	class:Group	access:public	signature:() const
operator MPI_Info	openmpi/ompi/mpi/cxx/info.h	/^  operator MPI_Info () const { return mpi_info; }$/;"	f	class:Info	access:public	signature:() const
operator MPI_Op	openmpi/ompi/mpi/cxx/op.h	/^  inline operator MPI_Op () const;$/;"	p	class:Op	access:public	signature:() const
operator MPI_Op	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::operator MPI_Op () const { return mpi_op; }$/;"	f	class:MPI::Op	signature:() const
operator MPI_Request	openmpi/ompi/mpi/cxx/request.h	/^  operator MPI_Request () const { return mpi_request; }$/;"	f	class:Request	access:public	signature:() const
operator MPI_Status	openmpi/ompi/mpi/cxx/status.h	/^  operator MPI_Status () const { return mpi_status; }$/;"	f	class:Status	access:public	signature:() const
operator MPI_Win	openmpi/ompi/mpi/cxx/win.h	/^  operator MPI_Win () const { return mpi_win; }$/;"	f	class:Win	access:public	signature:() const
otf.h	vampirtrace/open-trace-format/otf.h	1;"	F
otf_byte_array	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	byte_array  otf_byte_array;$/;"	m	union:OTF_Value_union	access:public
otf_char	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	char	    otf_char;$/;"	m	union:OTF_Value_union	access:public
otf_double	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	double 	    otf_double;$/;"	m	union:OTF_Value_union	access:public
otf_errno	vampirtrace/open-trace-format/OTF_Definitions.h	/^extern int otf_errno;$/;"	x
otf_float	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	float       otf_float;$/;"	m	union:OTF_Value_union	access:public
otf_int16	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	int16_t	    otf_int16;$/;"	m	union:OTF_Value_union	access:public
otf_int32	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	int32_t	    otf_int32;$/;"	m	union:OTF_Value_union	access:public
otf_int64	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	int64_t	    otf_int64;$/;"	m	union:OTF_Value_union	access:public
otf_int8	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	int8_t	    otf_int8;$/;"	m	union:OTF_Value_union	access:public
otf_strerr	vampirtrace/open-trace-format/OTF_Definitions.h	/^extern char otf_strerr[OTF_ERR_LEN];$/;"	x
otf_uint16	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint16_t    otf_uint16;$/;"	m	union:OTF_Value_union	access:public
otf_uint32	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint32_t    otf_uint32;$/;"	m	union:OTF_Value_union	access:public
otf_uint64	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint64_t    otf_uint64;$/;"	m	union:OTF_Value_union	access:public
otf_uint8	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint8_t	    otf_uint8;$/;"	m	union:OTF_Value_union	access:public
otfaux.h	vampirtrace/open-trace-format/otfaux.h	1;"	F
pSync	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexd_prod_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
pSync	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexd_sum_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
pSync	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexf_prod_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
pSync	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_complexf_sum_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
pSync	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexd_prod_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
pSync	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexd_sum_to_all(OSHMEM_COMPLEX_TYPE(double) *target, OSHMEM_COMPLEX_TYPE(double) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(double) *pWrk, long *pSync);$/;"	v
pSync	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexf_prod_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
pSync	shmem.h	/^OSHMEM_DECLSPEC void shmem_complexf_sum_to_all(OSHMEM_COMPLEX_TYPE(float) *target, OSHMEM_COMPLEX_TYPE(float) *source, int nreduce, int PE_start, int logPE_stride, int PE_size, OSHMEM_COMPLEX_TYPE(float) *pWrk, long *pSync);$/;"	v
p_my_pe	pshmem.h	/^OSHMEM_DECLSPEC  int p_my_pe(void);$/;"	p	signature:(void)
p_num_pes	pshmem.h	/^OSHMEM_DECLSPEC  int p_num_pes(void);$/;"	p	signature:(void)
pointer	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^        OTF_FunctionPointer** pointer;$/;"	m	struct:struct_OTF_HandlerArray	access:public
pomp_initialized	vampirtrace/pomp_lib.h	/^extern int pomp_initialized;$/;"	x
pomp_lib.h	vampirtrace/pomp_lib.h	1;"	F
pomp_rd_table	vampirtrace/pomp_lib.h	/^extern struct ompregdescr* pomp_rd_table[];$/;"	x
pomp_tracing	vampirtrace/pomp_lib.h	/^extern int pomp_tracing;$/;"	x
pos	vampirtrace/open-trace-format/OTF_File.h	/^	uint64_t pos;$/;"	m	struct:struct_OTF_File	access:public
pos	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint32_t pos;$/;"	m	struct:struct_OTF_RBuffer	access:public
pos	vampirtrace/open-trace-format/OTF_WBuffer.h	/^	uint32_t pos;$/;"	m	struct:struct_OTF_WBuffer	access:public
process	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint32_t process;$/;"	m	struct:struct_OTF_RBuffer	access:public
process	vampirtrace/open-trace-format/OTF_WBuffer.h	/^	uint32_t process;$/;"	m	struct:struct_OTF_WBuffer	access:public
pshfree	pshmem.h	/^OSHMEM_DECLSPEC  void pshfree(void* ptr);$/;"	p	signature:(void* ptr)
pshmalloc	pshmem.h	/^OSHMEM_DECLSPEC  void* pshmalloc(size_t size);$/;"	p	signature:(size_t size)
pshmem.h	pshmem.h	1;"	F
pshmem_addr_accessible	pshmem.h	/^OSHMEM_DECLSPEC int pshmem_addr_accessible(void *addr, int pe);$/;"	p	signature:(void *addr, int pe)
pshmem_barrier	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_barrier(int PE_start, int logPE_stride, int PE_size, long *pSync);$/;"	p	signature:(int PE_start, int logPE_stride, int PE_size, long *pSync)
pshmem_barrier_all	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_barrier_all(void);$/;"	p	signature:(void)
pshmem_broadcast	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_broadcast(void *target, const void *source, size_t nlong, int PE_root, int PE_start, int logPE_stride, int PE_size, long *pSync);$/;"	p	signature:(void *target, const void *source, size_t nlong, int PE_root, int PE_start, int logPE_stride, int PE_size, long *pSync)
pshmem_broadcast32	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_broadcast32(void *target, const void *source, size_t nlong, int PE_root, int PE_start, int logPE_stride, int PE_size, long *pSync);$/;"	p	signature:(void *target, const void *source, size_t nlong, int PE_root, int PE_start, int logPE_stride, int PE_size, long *pSync)
pshmem_broadcast64	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_broadcast64(void *target, const void *source, size_t nlong, int PE_root, int PE_start, int logPE_stride, int PE_size, long *pSync);$/;"	p	signature:(void *target, const void *source, size_t nlong, int PE_root, int PE_start, int logPE_stride, int PE_size, long *pSync)
pshmem_char_g	pshmemx.h	/^OSHMEM_DECLSPEC  char pshmem_char_g(char* addr, int pe);$/;"	p	signature:(char* addr, int pe)
pshmem_char_get	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_char_get(char *target, const char *source, size_t len, int pe);$/;"	p	signature:(char *target, const char *source, size_t len, int pe)
pshmem_char_p	pshmemx.h	/^OSHMEM_DECLSPEC  void pshmem_char_p(char* addr, char value, int pe);$/;"	p	signature:(char* addr, char value, int pe)
pshmem_char_put	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_char_put(char *target, const char *source, size_t len, int pe);$/;"	p	signature:(char *target, const char *source, size_t len, int pe)
pshmem_clear_cache_inv	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_clear_cache_inv(void);$/;"	p	signature:(void)
pshmem_clear_cache_line_inv	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_clear_cache_line_inv(void* target);$/;"	p	signature:(void* target)
pshmem_clear_lock	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_clear_lock(long *lock);$/;"	p	signature:(long *lock)
pshmem_collect32	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_collect32(void *target, const void *source, size_t nlong, int PE_start, int logPE_stride, int PE_size, long *pSync);$/;"	p	signature:(void *target, const void *source, size_t nlong, int PE_start, int logPE_stride, int PE_size, long *pSync)
pshmem_collect64	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_collect64(void *target, const void *source, size_t nlong, int PE_start, int logPE_stride, int PE_size, long *pSync);$/;"	p	signature:(void *target, const void *source, size_t nlong, int PE_start, int logPE_stride, int PE_size, long *pSync)
pshmem_double_g	pshmem.h	/^OSHMEM_DECLSPEC  double pshmem_double_g(double* addr, int pe);$/;"	p	signature:(double* addr, int pe)
pshmem_double_get	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_double_get(double *target, const double *source, size_t len, int pe);$/;"	p	signature:(double *target, const double *source, size_t len, int pe)
pshmem_double_iget	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_double_iget(double* target, const double* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(double* target, const double* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_double_iput	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_double_iput(double* target, const double* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(double* target, const double* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_double_max_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_double_max_to_all(double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync);$/;"	p	signature:(double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync)
pshmem_double_min_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_double_min_to_all(double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync);$/;"	p	signature:(double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync)
pshmem_double_p	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_double_p(double* addr, double value, int pe);$/;"	p	signature:(double* addr, double value, int pe)
pshmem_double_prod_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_double_prod_to_all(double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync);$/;"	p	signature:(double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync)
pshmem_double_put	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_double_put(double *target, const double *source, size_t len, int pe);$/;"	p	signature:(double *target, const double *source, size_t len, int pe)
pshmem_double_sum_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_double_sum_to_all(double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync);$/;"	p	signature:(double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync)
pshmem_double_swap	pshmem.h	/^OSHMEM_DECLSPEC double pshmem_double_swap(double *target, double value, int pe);$/;"	p	signature:(double *target, double value, int pe)
pshmem_fcollect32	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_fcollect32(void *target, const void *source, size_t nlong, int PE_start, int logPE_stride, int PE_size, long *pSync);$/;"	p	signature:(void *target, const void *source, size_t nlong, int PE_start, int logPE_stride, int PE_size, long *pSync)
pshmem_fcollect64	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_fcollect64(void *target, const void *source, size_t nlong, int PE_start, int logPE_stride, int PE_size, long *pSync);$/;"	p	signature:(void *target, const void *source, size_t nlong, int PE_start, int logPE_stride, int PE_size, long *pSync)
pshmem_fence	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_fence(void);$/;"	p	signature:(void)
pshmem_float_g	pshmem.h	/^OSHMEM_DECLSPEC  float pshmem_float_g(float* addr, int pe);$/;"	p	signature:(float* addr, int pe)
pshmem_float_get	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_float_get(float *target, const float *source, size_t len, int pe);$/;"	p	signature:(float *target, const float *source, size_t len, int pe)
pshmem_float_iget	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_float_iget(float* target, const float* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(float* target, const float* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_float_iput	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_float_iput(float* target, const float* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(float* target, const float* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_float_max_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_float_max_to_all(float *target, float *source, int nreduce, int PE_start, int logPE_stride, int PE_size, float *pWrk, long *pSync);$/;"	p	signature:(float *target, float *source, int nreduce, int PE_start, int logPE_stride, int PE_size, float *pWrk, long *pSync)
pshmem_float_min_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_float_min_to_all(float *target, float *source, int nreduce, int PE_start, int logPE_stride, int PE_size, float *pWrk, long *pSync);$/;"	p	signature:(float *target, float *source, int nreduce, int PE_start, int logPE_stride, int PE_size, float *pWrk, long *pSync)
pshmem_float_p	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_float_p(float* addr, float value, int pe);$/;"	p	signature:(float* addr, float value, int pe)
pshmem_float_prod_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_float_prod_to_all(float *target, float *source, int nreduce, int PE_start, int logPE_stride, int PE_size, float *pWrk, long *pSync);$/;"	p	signature:(float *target, float *source, int nreduce, int PE_start, int logPE_stride, int PE_size, float *pWrk, long *pSync)
pshmem_float_put	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_float_put(float *target, const float *source, size_t len, int pe);$/;"	p	signature:(float *target, const float *source, size_t len, int pe)
pshmem_float_sum_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_float_sum_to_all(float *target, float *source, int nreduce, int PE_start, int logPE_stride, int PE_size, float *pWrk, long *pSync);$/;"	p	signature:(float *target, float *source, int nreduce, int PE_start, int logPE_stride, int PE_size, float *pWrk, long *pSync)
pshmem_float_swap	pshmem.h	/^OSHMEM_DECLSPEC float pshmem_float_swap(float *target, float value, int pe);$/;"	p	signature:(float *target, float value, int pe)
pshmem_get128	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_get128(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
pshmem_get16	pshmemx.h	/^OSHMEM_DECLSPEC  void pshmem_get16(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
pshmem_get32	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_get32(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
pshmem_get64	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_get64(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
pshmem_getmem	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_getmem(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
pshmem_iget128	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_iget128(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_iget16	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_iget16(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_iget32	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_iget32(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_iget64	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_iget64(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_int16_and_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int16_and_to_all(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync);$/;"	p	signature:(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync)
pshmem_int16_g	pshmemx.h	/^OSHMEM_DECLSPEC  int16_t pshmem_int16_g(int16_t* addr, int pe);$/;"	p	signature:(int16_t* addr, int pe)
pshmem_int16_max_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int16_max_to_all(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync);$/;"	p	signature:(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync)
pshmem_int16_min_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int16_min_to_all(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync);$/;"	p	signature:(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync)
pshmem_int16_or_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int16_or_to_all(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync);$/;"	p	signature:(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync)
pshmem_int16_p	pshmemx.h	/^OSHMEM_DECLSPEC  void pshmem_int16_p(int16_t* addr, int16_t value, int pe);$/;"	p	signature:(int16_t* addr, int16_t value, int pe)
pshmem_int16_prod_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int16_prod_to_all(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync);$/;"	p	signature:(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync)
pshmem_int16_sum_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int16_sum_to_all(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync);$/;"	p	signature:(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync)
pshmem_int16_wait	pshmemx.h	/^OSHMEM_DECLSPEC  void pshmem_int16_wait(int16_t *addr, int16_t value);$/;"	p	signature:(int16_t *addr, int16_t value)
pshmem_int16_wait_until	pshmemx.h	/^OSHMEM_DECLSPEC  void pshmem_int16_wait_until(int16_t *addr, int cmp, int16_t value);$/;"	p	signature:(int16_t *addr, int cmp, int16_t value)
pshmem_int16_xor_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int16_xor_to_all(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync);$/;"	p	signature:(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync)
pshmem_int32_add	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int32_add(int32_t *target, int32_t value, int pe);$/;"	p	signature:(int32_t *target, int32_t value, int pe)
pshmem_int32_and_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int32_and_to_all(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync);$/;"	p	signature:(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync)
pshmem_int32_cswap	pshmemx.h	/^OSHMEM_DECLSPEC int32_t pshmem_int32_cswap(int32_t *target, int32_t cond, int32_t value, int pe);$/;"	p	signature:(int32_t *target, int32_t cond, int32_t value, int pe)
pshmem_int32_fadd	pshmemx.h	/^OSHMEM_DECLSPEC int32_t pshmem_int32_fadd(int32_t *target, int32_t value, int pe);$/;"	p	signature:(int32_t *target, int32_t value, int pe)
pshmem_int32_finc	pshmemx.h	/^OSHMEM_DECLSPEC int32_t pshmem_int32_finc(int32_t *target, int pe);$/;"	p	signature:(int32_t *target, int pe)
pshmem_int32_g	pshmemx.h	/^OSHMEM_DECLSPEC  int32_t pshmem_int32_g(int32_t* addr, int pe);$/;"	p	signature:(int32_t* addr, int pe)
pshmem_int32_inc	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int32_inc(int32_t *target, int pe);$/;"	p	signature:(int32_t *target, int pe)
pshmem_int32_max_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int32_max_to_all(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync);$/;"	p	signature:(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync)
pshmem_int32_min_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int32_min_to_all(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync);$/;"	p	signature:(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync)
pshmem_int32_or_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int32_or_to_all(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync);$/;"	p	signature:(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync)
pshmem_int32_p	pshmemx.h	/^OSHMEM_DECLSPEC  void pshmem_int32_p(int32_t* addr, int32_t value, int pe);$/;"	p	signature:(int32_t* addr, int32_t value, int pe)
pshmem_int32_prod_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int32_prod_to_all(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync);$/;"	p	signature:(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync)
pshmem_int32_sum_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int32_sum_to_all(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync);$/;"	p	signature:(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync)
pshmem_int32_swap	pshmemx.h	/^OSHMEM_DECLSPEC int32_t pshmem_int32_swap(int32_t *target, int32_t value, int pe);$/;"	p	signature:(int32_t *target, int32_t value, int pe)
pshmem_int32_wait	pshmemx.h	/^OSHMEM_DECLSPEC  void pshmem_int32_wait(int32_t *addr, int32_t value);$/;"	p	signature:(int32_t *addr, int32_t value)
pshmem_int32_wait_until	pshmemx.h	/^OSHMEM_DECLSPEC  void pshmem_int32_wait_until(int32_t *addr, int cmp, int32_t value);$/;"	p	signature:(int32_t *addr, int cmp, int32_t value)
pshmem_int32_xor_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int32_xor_to_all(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync);$/;"	p	signature:(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync)
pshmem_int64_add	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int64_add(int64_t *target, int64_t value, int pe);$/;"	p	signature:(int64_t *target, int64_t value, int pe)
pshmem_int64_and_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int64_and_to_all(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync);$/;"	p	signature:(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync)
pshmem_int64_cswap	pshmemx.h	/^OSHMEM_DECLSPEC int64_t pshmem_int64_cswap(int64_t *target, int64_t cond, int64_t value, int pe);$/;"	p	signature:(int64_t *target, int64_t cond, int64_t value, int pe)
pshmem_int64_fadd	pshmemx.h	/^OSHMEM_DECLSPEC int64_t pshmem_int64_fadd(int64_t *target, int64_t value, int pe);$/;"	p	signature:(int64_t *target, int64_t value, int pe)
pshmem_int64_finc	pshmemx.h	/^OSHMEM_DECLSPEC int64_t pshmem_int64_finc(int64_t *target, int pe);$/;"	p	signature:(int64_t *target, int pe)
pshmem_int64_g	pshmemx.h	/^OSHMEM_DECLSPEC  int64_t pshmem_int64_g(int64_t* addr, int pe);$/;"	p	signature:(int64_t* addr, int pe)
pshmem_int64_inc	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int64_inc(int64_t *target, int pe);$/;"	p	signature:(int64_t *target, int pe)
pshmem_int64_max_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int64_max_to_all(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync);$/;"	p	signature:(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync)
pshmem_int64_min_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int64_min_to_all(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync);$/;"	p	signature:(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync)
pshmem_int64_or_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int64_or_to_all(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync);$/;"	p	signature:(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync)
pshmem_int64_p	pshmemx.h	/^OSHMEM_DECLSPEC  void pshmem_int64_p(int64_t* addr, int64_t value, int pe);$/;"	p	signature:(int64_t* addr, int64_t value, int pe)
pshmem_int64_prod_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int64_prod_to_all(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync);$/;"	p	signature:(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync)
pshmem_int64_sum_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int64_sum_to_all(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync);$/;"	p	signature:(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync)
pshmem_int64_swap	pshmemx.h	/^OSHMEM_DECLSPEC int64_t pshmem_int64_swap(int64_t *target, int64_t value, int pe);$/;"	p	signature:(int64_t *target, int64_t value, int pe)
pshmem_int64_wait	pshmemx.h	/^OSHMEM_DECLSPEC  void pshmem_int64_wait(int64_t *addr, int64_t value);$/;"	p	signature:(int64_t *addr, int64_t value)
pshmem_int64_wait_until	pshmemx.h	/^OSHMEM_DECLSPEC  void pshmem_int64_wait_until(int64_t *addr, int cmp, int64_t value);$/;"	p	signature:(int64_t *addr, int cmp, int64_t value)
pshmem_int64_xor_to_all	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_int64_xor_to_all(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync);$/;"	p	signature:(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync)
pshmem_int_add	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_int_add(int *target, int value, int pe);$/;"	p	signature:(int *target, int value, int pe)
pshmem_int_and_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_int_and_to_all(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync);$/;"	p	signature:(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync)
pshmem_int_cswap	pshmem.h	/^OSHMEM_DECLSPEC int pshmem_int_cswap(int *target, int cond, int value, int pe);$/;"	p	signature:(int *target, int cond, int value, int pe)
pshmem_int_fadd	pshmem.h	/^OSHMEM_DECLSPEC int pshmem_int_fadd(int *target, int value, int pe);$/;"	p	signature:(int *target, int value, int pe)
pshmem_int_finc	pshmem.h	/^OSHMEM_DECLSPEC int pshmem_int_finc(int *target, int pe);$/;"	p	signature:(int *target, int pe)
pshmem_int_g	pshmem.h	/^OSHMEM_DECLSPEC  int pshmem_int_g(int* addr, int pe);$/;"	p	signature:(int* addr, int pe)
pshmem_int_get	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_int_get(int *target, const int *source, size_t len, int pe);$/;"	p	signature:(int *target, const int *source, size_t len, int pe)
pshmem_int_iget	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_int_iget(int* target, const int* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(int* target, const int* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_int_inc	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_int_inc(int *target, int pe);$/;"	p	signature:(int *target, int pe)
pshmem_int_iput	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_int_iput(int* target, const int* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(int* target, const int* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_int_max_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_int_max_to_all(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync);$/;"	p	signature:(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync)
pshmem_int_min_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_int_min_to_all(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync);$/;"	p	signature:(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync)
pshmem_int_or_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_int_or_to_all(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync);$/;"	p	signature:(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync)
pshmem_int_p	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_int_p(int* addr, int value, int pe);$/;"	p	signature:(int* addr, int value, int pe)
pshmem_int_prod_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_int_prod_to_all(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync);$/;"	p	signature:(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync)
pshmem_int_put	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_int_put(int* target, const int* source, size_t len, int pe);$/;"	p	signature:(int* target, const int* source, size_t len, int pe)
pshmem_int_sum_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_int_sum_to_all(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync);$/;"	p	signature:(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync)
pshmem_int_swap	pshmem.h	/^OSHMEM_DECLSPEC int pshmem_int_swap(int *target, int value, int pe);$/;"	p	signature:(int *target, int value, int pe)
pshmem_int_wait	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_int_wait(int *addr, int value);$/;"	p	signature:(int *addr, int value)
pshmem_int_wait_until	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_int_wait_until(int *addr, int cmp, int value);$/;"	p	signature:(int *addr, int cmp, int value)
pshmem_int_xor_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_int_xor_to_all(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync);$/;"	p	signature:(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync)
pshmem_iput128	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_iput128(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_iput16	pshmemx.h	/^OSHMEM_DECLSPEC void pshmem_iput16(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_iput32	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_iput32(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_iput64	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_iput64(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_long_add	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_long_add(long *target, long value, int pe);$/;"	p	signature:(long *target, long value, int pe)
pshmem_long_and_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_long_and_to_all(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync);$/;"	p	signature:(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync)
pshmem_long_cswap	pshmem.h	/^OSHMEM_DECLSPEC long pshmem_long_cswap(long *target, long cond, long value, int pe);$/;"	p	signature:(long *target, long cond, long value, int pe)
pshmem_long_fadd	pshmem.h	/^OSHMEM_DECLSPEC long pshmem_long_fadd(long *target, long value, int pe);$/;"	p	signature:(long *target, long value, int pe)
pshmem_long_finc	pshmem.h	/^OSHMEM_DECLSPEC long pshmem_long_finc(long *target, int pe);$/;"	p	signature:(long *target, int pe)
pshmem_long_g	pshmem.h	/^OSHMEM_DECLSPEC  long pshmem_long_g(long* addr, int pe);$/;"	p	signature:(long* addr, int pe)
pshmem_long_get	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_long_get(long *target, const long *source, size_t len, int pe);$/;"	p	signature:(long *target, const long *source, size_t len, int pe)
pshmem_long_iget	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_long_iget(long* target, const long* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(long* target, const long* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_long_inc	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_long_inc(long *target, int pe);$/;"	p	signature:(long *target, int pe)
pshmem_long_iput	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_long_iput(long* target, const long* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(long* target, const long* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_long_max_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_long_max_to_all(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync);$/;"	p	signature:(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync)
pshmem_long_min_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_long_min_to_all(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync);$/;"	p	signature:(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync)
pshmem_long_or_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_long_or_to_all(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync);$/;"	p	signature:(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync)
pshmem_long_p	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_long_p(long* addr, long value, int pe);$/;"	p	signature:(long* addr, long value, int pe)
pshmem_long_prod_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_long_prod_to_all(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync);$/;"	p	signature:(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync)
pshmem_long_put	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_long_put(long *target, const long *source, size_t len, int pe);$/;"	p	signature:(long *target, const long *source, size_t len, int pe)
pshmem_long_sum_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_long_sum_to_all(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync);$/;"	p	signature:(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync)
pshmem_long_swap	pshmem.h	/^OSHMEM_DECLSPEC long pshmem_long_swap(long *target, long value, int pe);$/;"	p	signature:(long *target, long value, int pe)
pshmem_long_wait	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_long_wait(long *addr, long value);$/;"	p	signature:(long *addr, long value)
pshmem_long_wait_until	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_long_wait_until(long *addr, int cmp, long value);$/;"	p	signature:(long *addr, int cmp, long value)
pshmem_long_xor_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_long_xor_to_all(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync);$/;"	p	signature:(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync)
pshmem_longdouble_g	pshmem.h	/^OSHMEM_DECLSPEC  long double pshmem_longdouble_g(long double* addr, int pe);$/;"	p	signature:(long double* addr, int pe)
pshmem_longdouble_get	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_longdouble_get(long double *target, const long double *source, size_t len, int pe);$/;"	p	signature:(long double *target, const long double *source, size_t len, int pe)
pshmem_longdouble_iget	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_longdouble_iget(long double* target, const long double* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(long double* target, const long double* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_longdouble_iput	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_longdouble_iput(long double* target, const long double* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(long double* target, const long double* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_longdouble_max_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_longdouble_max_to_all(long double *target, long double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long double *pWrk, long *pSync);$/;"	p	signature:(long double *target, long double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long double *pWrk, long *pSync)
pshmem_longdouble_min_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_longdouble_min_to_all(long double *target, long double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long double *pWrk, long *pSync);$/;"	p	signature:(long double *target, long double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long double *pWrk, long *pSync)
pshmem_longdouble_p	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_longdouble_p(long double* addr, long double value, int pe);$/;"	p	signature:(long double* addr, long double value, int pe)
pshmem_longdouble_prod_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_longdouble_prod_to_all(long double *target, long double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long double *pWrk, long *pSync);$/;"	p	signature:(long double *target, long double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long double *pWrk, long *pSync)
pshmem_longdouble_put	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_longdouble_put(long double *target, const long double *source, size_t len, int pe);$/;"	p	signature:(long double *target, const long double *source, size_t len, int pe)
pshmem_longdouble_sum_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_longdouble_sum_to_all(long double *target, long double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long double *pWrk, long *pSync);$/;"	p	signature:(long double *target, long double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long double *pWrk, long *pSync)
pshmem_longlong_add	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_longlong_add(long long *target, long long value, int pe);$/;"	p	signature:(long long *target, long long value, int pe)
pshmem_longlong_and_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_longlong_and_to_all(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync);$/;"	p	signature:(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync)
pshmem_longlong_cswap	pshmem.h	/^OSHMEM_DECLSPEC long long pshmem_longlong_cswap(long long *target, long long cond, long long value, int pe);$/;"	p	signature:(long long *target, long long cond, long long value, int pe)
pshmem_longlong_fadd	pshmem.h	/^OSHMEM_DECLSPEC long long pshmem_longlong_fadd(long long *target, long long value, int pe);$/;"	p	signature:(long long *target, long long value, int pe)
pshmem_longlong_finc	pshmem.h	/^OSHMEM_DECLSPEC long long pshmem_longlong_finc(long long *target, int pe);$/;"	p	signature:(long long *target, int pe)
pshmem_longlong_g	pshmem.h	/^OSHMEM_DECLSPEC  long long pshmem_longlong_g(long long* addr, int pe);$/;"	p	signature:(long long* addr, int pe)
pshmem_longlong_get	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_longlong_get(long long *target, const long long *source, size_t len, int pe);$/;"	p	signature:(long long *target, const long long *source, size_t len, int pe)
pshmem_longlong_iget	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_longlong_iget(long long* target, const long long* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(long long* target, const long long* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_longlong_inc	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_longlong_inc(long long *target, int pe);$/;"	p	signature:(long long *target, int pe)
pshmem_longlong_iput	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_longlong_iput(long long* target, const long long* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(long long* target, const long long* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_longlong_max_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_longlong_max_to_all(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync);$/;"	p	signature:(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync)
pshmem_longlong_min_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_longlong_min_to_all(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync);$/;"	p	signature:(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync)
pshmem_longlong_or_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_longlong_or_to_all(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync);$/;"	p	signature:(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync)
pshmem_longlong_p	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_longlong_p(long long* addr, long long value, int pe);$/;"	p	signature:(long long* addr, long long value, int pe)
pshmem_longlong_prod_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_longlong_prod_to_all(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync);$/;"	p	signature:(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync)
pshmem_longlong_put	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_longlong_put(long long *target, const long long *source, size_t len, int pe);$/;"	p	signature:(long long *target, const long long *source, size_t len, int pe)
pshmem_longlong_sum_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_longlong_sum_to_all(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync);$/;"	p	signature:(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync)
pshmem_longlong_swap	pshmem.h	/^OSHMEM_DECLSPEC long long pshmem_longlong_swap(long long*target, long long value, int pe);$/;"	p	signature:(long long*target, long long value, int pe)
pshmem_longlong_wait	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_longlong_wait(long long *addr, long long value);$/;"	p	signature:(long long *addr, long long value)
pshmem_longlong_wait_until	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_longlong_wait_until(long long *addr, int cmp, long long value);$/;"	p	signature:(long long *addr, int cmp, long long value)
pshmem_longlong_xor_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_longlong_xor_to_all(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync);$/;"	p	signature:(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync)
pshmem_pe_accessible	pshmem.h	/^OSHMEM_DECLSPEC int pshmem_pe_accessible(int pe);$/;"	p	signature:(int pe)
pshmem_ptr	pshmem.h	/^OSHMEM_DECLSPEC  void *pshmem_ptr(void *ptr, int pe);$/;"	p	signature:(void *ptr, int pe)
pshmem_put128	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_put128(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
pshmem_put16	pshmemx.h	/^OSHMEM_DECLSPEC  void pshmem_put16(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
pshmem_put32	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_put32(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
pshmem_put64	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_put64(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
pshmem_putmem	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_putmem(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
pshmem_quiet	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_quiet(void);$/;"	p	signature:(void)
pshmem_set_cache_inv	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_set_cache_inv(void);$/;"	p	signature:(void)
pshmem_set_cache_line_inv	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_set_cache_line_inv(void* target);$/;"	p	signature:(void* target)
pshmem_set_lock	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_set_lock(long *lock);$/;"	p	signature:(long *lock)
pshmem_short_and_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_short_and_to_all(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync);$/;"	p	signature:(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync)
pshmem_short_g	pshmem.h	/^OSHMEM_DECLSPEC  short pshmem_short_g(short* addr, int pe);$/;"	p	signature:(short* addr, int pe)
pshmem_short_get	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_short_get(short *target, const short *source, size_t len, int pe);$/;"	p	signature:(short *target, const short *source, size_t len, int pe)
pshmem_short_iget	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_short_iget(short* target, const short* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(short* target, const short* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_short_iput	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_short_iput(short* target, const short* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(short* target, const short* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
pshmem_short_max_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_short_max_to_all(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync);$/;"	p	signature:(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync)
pshmem_short_min_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_short_min_to_all(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync);$/;"	p	signature:(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync)
pshmem_short_or_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_short_or_to_all(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync);$/;"	p	signature:(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync)
pshmem_short_p	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_short_p(short* addr, short value, int pe);$/;"	p	signature:(short* addr, short value, int pe)
pshmem_short_prod_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_short_prod_to_all(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync);$/;"	p	signature:(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync)
pshmem_short_put	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_short_put(short *target, const short *source, size_t len, int pe);$/;"	p	signature:(short *target, const short *source, size_t len, int pe)
pshmem_short_sum_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_short_sum_to_all(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync);$/;"	p	signature:(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync)
pshmem_short_wait	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_short_wait(short *addr, short value);$/;"	p	signature:(short *addr, short value)
pshmem_short_wait_until	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_short_wait_until(short *addr, int cmp, short value);$/;"	p	signature:(short *addr, int cmp, short value)
pshmem_short_xor_to_all	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_short_xor_to_all(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync);$/;"	p	signature:(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync)
pshmem_swap	pshmem.h	/^OSHMEM_DECLSPEC long pshmem_swap(long *target, long value, int pe);$/;"	p	signature:(long *target, long value, int pe)
pshmem_test_lock	pshmem.h	/^OSHMEM_DECLSPEC int pshmem_test_lock(long *lock);$/;"	p	signature:(long *lock)
pshmem_udcflush	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_udcflush(void);$/;"	p	signature:(void)
pshmem_udcflush_line	pshmem.h	/^OSHMEM_DECLSPEC void pshmem_udcflush_line(void* target);$/;"	p	signature:(void* target)
pshmem_wait	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_wait(long *addr, long value);$/;"	p	signature:(long *addr, long value)
pshmem_wait_until	pshmem.h	/^OSHMEM_DECLSPEC  void pshmem_wait_until(long *addr, int cmp, long value);$/;"	p	signature:(long *addr, int cmp, long value)
pshmemalign	pshmem.h	/^OSHMEM_DECLSPEC  void* pshmemalign(size_t align, size_t size);$/;"	p	signature:(size_t align, size_t size)
pshmemx.h	pshmemx.h	1;"	F
pshrealloc	pshmem.h	/^OSHMEM_DECLSPEC  void* pshrealloc(void *ptr, size_t size);$/;"	p	signature:(void *ptr, size_t size)
pstart_pes	pshmem.h	/^OSHMEM_DECLSPEC  void pstart_pes(int npes);$/;"	p	signature:(int npes)
pthread_attr_destroy	vampirtrace/vt_wrap_pthread.h	110;"	d
pthread_attr_getdetachstate	vampirtrace/vt_wrap_pthread.h	112;"	d
pthread_attr_getinheritsched	vampirtrace/vt_wrap_pthread.h	120;"	d
pthread_attr_getschedparam	vampirtrace/vt_wrap_pthread.h	115;"	d
pthread_attr_getschedpolicy	vampirtrace/vt_wrap_pthread.h	117;"	d
pthread_attr_getscope	vampirtrace/vt_wrap_pthread.h	122;"	d
pthread_attr_getstacksize	vampirtrace/vt_wrap_pthread.h	113;"	d
pthread_attr_init	vampirtrace/vt_wrap_pthread.h	109;"	d
pthread_attr_setdetachstate	vampirtrace/vt_wrap_pthread.h	111;"	d
pthread_attr_setinheritsched	vampirtrace/vt_wrap_pthread.h	119;"	d
pthread_attr_setschedparam	vampirtrace/vt_wrap_pthread.h	116;"	d
pthread_attr_setschedpolicy	vampirtrace/vt_wrap_pthread.h	118;"	d
pthread_attr_setscope	vampirtrace/vt_wrap_pthread.h	121;"	d
pthread_attr_setstacksize	vampirtrace/vt_wrap_pthread.h	114;"	d
pthread_cancel	vampirtrace/vt_wrap_pthread.h	104;"	d
pthread_cond_broadcast	vampirtrace/vt_wrap_pthread.h	135;"	d
pthread_cond_destroy	vampirtrace/vt_wrap_pthread.h	133;"	d
pthread_cond_init	vampirtrace/vt_wrap_pthread.h	132;"	d
pthread_cond_signal	vampirtrace/vt_wrap_pthread.h	134;"	d
pthread_cond_timedwait	vampirtrace/vt_wrap_pthread.h	137;"	d
pthread_cond_wait	vampirtrace/vt_wrap_pthread.h	136;"	d
pthread_condattr_destroy	vampirtrace/vt_wrap_pthread.h	139;"	d
pthread_condattr_getpshared	vampirtrace/vt_wrap_pthread.h	140;"	d
pthread_condattr_init	vampirtrace/vt_wrap_pthread.h	138;"	d
pthread_condattr_setpshared	vampirtrace/vt_wrap_pthread.h	141;"	d
pthread_create	vampirtrace/vt_wrap_pthread.h	93;"	d
pthread_detach	vampirtrace/vt_wrap_pthread.h	99;"	d
pthread_equal	vampirtrace/vt_wrap_pthread.h	98;"	d
pthread_exit	vampirtrace/vt_wrap_pthread.h	95;"	d
pthread_getschedparam	vampirtrace/vt_wrap_pthread.h	107;"	d
pthread_getspecific	vampirtrace/vt_wrap_pthread.h	102;"	d
pthread_join	vampirtrace/vt_wrap_pthread.h	94;"	d
pthread_key_create	vampirtrace/vt_wrap_pthread.h	100;"	d
pthread_key_delete	vampirtrace/vt_wrap_pthread.h	101;"	d
pthread_mutex_destroy	vampirtrace/vt_wrap_pthread.h	124;"	d
pthread_mutex_init	vampirtrace/vt_wrap_pthread.h	123;"	d
pthread_mutex_lock	vampirtrace/vt_wrap_pthread.h	125;"	d
pthread_mutex_trylock	vampirtrace/vt_wrap_pthread.h	127;"	d
pthread_mutex_unlock	vampirtrace/vt_wrap_pthread.h	126;"	d
pthread_mutexattr_destroy	vampirtrace/vt_wrap_pthread.h	129;"	d
pthread_mutexattr_getpshared	vampirtrace/vt_wrap_pthread.h	130;"	d
pthread_mutexattr_init	vampirtrace/vt_wrap_pthread.h	128;"	d
pthread_mutexattr_setpshared	vampirtrace/vt_wrap_pthread.h	131;"	d
pthread_once	vampirtrace/vt_wrap_pthread.h	96;"	d
pthread_self	vampirtrace/vt_wrap_pthread.h	97;"	d
pthread_setcancelstate	vampirtrace/vt_wrap_pthread.h	105;"	d
pthread_setschedparam	vampirtrace/vt_wrap_pthread.h	108;"	d
pthread_setspecific	vampirtrace/vt_wrap_pthread.h	103;"	d
pthread_testcancel	vampirtrace/vt_wrap_pthread.h	106;"	d
recordLimit	vampirtrace/open-trace-format/OTF_RStream.h	/^	uint64_t recordLimit;$/;"	m	struct:struct_OTF_RStream	access:public
request.h	openmpi/ompi/mpi/cxx/request.h	1;"	F
request_inln.h	openmpi/ompi/mpi/cxx/request_inln.h	1;"	F
reserved	vampirtrace/vt_plugin_cntr.h	/^  uint64_t reserved[100];$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
rmap	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	OTF_Pair* rmap;$/;"	m	struct:struct_OTF_MasterControl	access:public
rn	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t rn;$/;"	m	struct:struct_OTF_MasterControl	access:public
rs	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t rs;$/;"	m	struct:struct_OTF_MasterControl	access:public
run_per	vampirtrace/vt_plugin_cntr.h	/^  int32_t run_per;$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
s	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t s;$/;"	m	struct:struct_OTF_MapEntry	access:public
s	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t s;$/;"	m	struct:struct_OTF_MasterControl	access:public
set_callback_function	vampirtrace/vt_plugin_cntr.h	/^  int32_t (*set_callback_function)(void *, int32_t,$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
set_pform_wtime_function	vampirtrace/vt_plugin_cntr.h	/^  void (*set_pform_wtime_function)(uint64_t(*pform_wtime)(void));$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
shfree	shmem.h	/^OSHMEM_DECLSPEC  void shfree(void* ptr);$/;"	p	signature:(void* ptr)
shlibs	vampirtrace/vt_libwrap.h	/^  char* shlibs[VT_LIBWRAP_MAX_SHLIBS];$/;"	m	struct:VTLibwrapAttr_struct	access:public
shlibs_num	vampirtrace/vt_libwrap.h	/^  int   shlibs_num;$/;"	m	struct:VTLibwrapAttr_struct	access:public
shmalloc	shmem.h	/^OSHMEM_DECLSPEC  void* shmalloc(size_t size);$/;"	p	signature:(size_t size)
shmem-compat.h	shmem-compat.h	1;"	F
shmem.h	mpp/shmem.h	1;"	F
shmem.h	shmem.h	1;"	F
shmem_addr_accessible	shmem.h	/^OSHMEM_DECLSPEC int shmem_addr_accessible(void *addr, int pe);$/;"	p	signature:(void *addr, int pe)
shmem_barrier	shmem.h	/^OSHMEM_DECLSPEC  void shmem_barrier(int PE_start, int logPE_stride, int PE_size, long *pSync);$/;"	p	signature:(int PE_start, int logPE_stride, int PE_size, long *pSync)
shmem_barrier_all	shmem.h	/^OSHMEM_DECLSPEC  void shmem_barrier_all(void);$/;"	p	signature:(void)
shmem_broadcast	shmem.h	/^OSHMEM_DECLSPEC void shmem_broadcast(void *target, const void *source, size_t nlong, int PE_root, int PE_start, int logPE_stride, int PE_size, long *pSync);$/;"	p	signature:(void *target, const void *source, size_t nlong, int PE_root, int PE_start, int logPE_stride, int PE_size, long *pSync)
shmem_broadcast32	shmem.h	/^OSHMEM_DECLSPEC void shmem_broadcast32(void *target, const void *source, size_t nlong, int PE_root, int PE_start, int logPE_stride, int PE_size, long *pSync);$/;"	p	signature:(void *target, const void *source, size_t nlong, int PE_root, int PE_start, int logPE_stride, int PE_size, long *pSync)
shmem_broadcast64	shmem.h	/^OSHMEM_DECLSPEC void shmem_broadcast64(void *target, const void *source, size_t nlong, int PE_root, int PE_start, int logPE_stride, int PE_size, long *pSync);$/;"	p	signature:(void *target, const void *source, size_t nlong, int PE_root, int PE_start, int logPE_stride, int PE_size, long *pSync)
shmem_char_g	shmem.h	/^OSHMEM_DECLSPEC  char shmem_char_g(char* addr, int pe);$/;"	p	signature:(char* addr, int pe)
shmem_char_g	shmemx.h	/^OSHMEM_DECLSPEC  char shmem_char_g(char* addr, int pe);$/;"	p	signature:(char* addr, int pe)
shmem_char_get	shmem.h	/^OSHMEM_DECLSPEC  void shmem_char_get(char *target, const char *source, size_t len, int pe);$/;"	p	signature:(char *target, const char *source, size_t len, int pe)
shmem_char_p	shmemx.h	/^OSHMEM_DECLSPEC  void shmem_char_p(char* addr, char value, int pe);$/;"	p	signature:(char* addr, char value, int pe)
shmem_char_put	shmem.h	/^OSHMEM_DECLSPEC  void shmem_char_put(char *target, const char *source, size_t len, int pe);$/;"	p	signature:(char *target, const char *source, size_t len, int pe)
shmem_clear_cache_inv	shmem.h	/^OSHMEM_DECLSPEC void shmem_clear_cache_inv(void);$/;"	p	signature:(void)
shmem_clear_cache_line_inv	shmem.h	/^OSHMEM_DECLSPEC void shmem_clear_cache_line_inv(void* target);$/;"	p	signature:(void* target)
shmem_clear_lock	shmem.h	/^OSHMEM_DECLSPEC void shmem_clear_lock(long *lock);$/;"	p	signature:(long *lock)
shmem_collect32	shmem.h	/^OSHMEM_DECLSPEC void shmem_collect32(void *target, const void *source, size_t nlong, int PE_start, int logPE_stride, int PE_size, long *pSync);$/;"	p	signature:(void *target, const void *source, size_t nlong, int PE_start, int logPE_stride, int PE_size, long *pSync)
shmem_collect64	shmem.h	/^OSHMEM_DECLSPEC void shmem_collect64(void *target, const void *source, size_t nlong, int PE_start, int logPE_stride, int PE_size, long *pSync);$/;"	p	signature:(void *target, const void *source, size_t nlong, int PE_start, int logPE_stride, int PE_size, long *pSync)
shmem_double_g	shmem.h	/^OSHMEM_DECLSPEC  double shmem_double_g(double* addr, int pe);$/;"	p	signature:(double* addr, int pe)
shmem_double_get	shmem.h	/^OSHMEM_DECLSPEC  void shmem_double_get(double *target, const double *source, size_t len, int pe);$/;"	p	signature:(double *target, const double *source, size_t len, int pe)
shmem_double_iget	shmem.h	/^OSHMEM_DECLSPEC void shmem_double_iget(double* target, const double* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(double* target, const double* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_double_iput	shmem.h	/^OSHMEM_DECLSPEC void shmem_double_iput(double* target, const double* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(double* target, const double* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_double_max_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_double_max_to_all(double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync);$/;"	p	signature:(double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync)
shmem_double_min_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_double_min_to_all(double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync);$/;"	p	signature:(double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync)
shmem_double_p	shmem.h	/^OSHMEM_DECLSPEC  void shmem_double_p(double* addr, double value, int pe);$/;"	p	signature:(double* addr, double value, int pe)
shmem_double_prod_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_double_prod_to_all(double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync);$/;"	p	signature:(double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync)
shmem_double_put	shmem.h	/^OSHMEM_DECLSPEC  void shmem_double_put(double *target, const double *source, size_t len, int pe);$/;"	p	signature:(double *target, const double *source, size_t len, int pe)
shmem_double_sum_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_double_sum_to_all(double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync);$/;"	p	signature:(double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync)
shmem_double_swap	shmem.h	/^OSHMEM_DECLSPEC double shmem_double_swap(double *target, double value, int pe);$/;"	p	signature:(double *target, double value, int pe)
shmem_fcollect32	shmem.h	/^OSHMEM_DECLSPEC void shmem_fcollect32(void *target, const void *source, size_t nlong, int PE_start, int logPE_stride, int PE_size, long *pSync);$/;"	p	signature:(void *target, const void *source, size_t nlong, int PE_start, int logPE_stride, int PE_size, long *pSync)
shmem_fcollect64	shmem.h	/^OSHMEM_DECLSPEC void shmem_fcollect64(void *target, const void *source, size_t nlong, int PE_start, int logPE_stride, int PE_size, long *pSync);$/;"	p	signature:(void *target, const void *source, size_t nlong, int PE_start, int logPE_stride, int PE_size, long *pSync)
shmem_fence	shmem.h	/^OSHMEM_DECLSPEC  void shmem_fence(void);$/;"	p	signature:(void)
shmem_float_g	shmem.h	/^OSHMEM_DECLSPEC  float shmem_float_g(float* addr, int pe);$/;"	p	signature:(float* addr, int pe)
shmem_float_get	shmem.h	/^OSHMEM_DECLSPEC  void shmem_float_get(float *target, const float *source, size_t len, int pe);$/;"	p	signature:(float *target, const float *source, size_t len, int pe)
shmem_float_iget	shmem.h	/^OSHMEM_DECLSPEC void shmem_float_iget(float* target, const float* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(float* target, const float* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_float_iput	shmem.h	/^OSHMEM_DECLSPEC void shmem_float_iput(float* target, const float* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(float* target, const float* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_float_max_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_float_max_to_all(float *target, float *source, int nreduce, int PE_start, int logPE_stride, int PE_size, float *pWrk, long *pSync);$/;"	p	signature:(float *target, float *source, int nreduce, int PE_start, int logPE_stride, int PE_size, float *pWrk, long *pSync)
shmem_float_min_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_float_min_to_all(float *target, float *source, int nreduce, int PE_start, int logPE_stride, int PE_size, float *pWrk, long *pSync);$/;"	p	signature:(float *target, float *source, int nreduce, int PE_start, int logPE_stride, int PE_size, float *pWrk, long *pSync)
shmem_float_p	shmem.h	/^OSHMEM_DECLSPEC  void shmem_float_p(float* addr, float value, int pe);$/;"	p	signature:(float* addr, float value, int pe)
shmem_float_prod_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_float_prod_to_all(float *target, float *source, int nreduce, int PE_start, int logPE_stride, int PE_size, float *pWrk, long *pSync);$/;"	p	signature:(float *target, float *source, int nreduce, int PE_start, int logPE_stride, int PE_size, float *pWrk, long *pSync)
shmem_float_put	shmem.h	/^OSHMEM_DECLSPEC  void shmem_float_put(float *target, const float *source, size_t len, int pe);$/;"	p	signature:(float *target, const float *source, size_t len, int pe)
shmem_float_sum_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_float_sum_to_all(float *target, float *source, int nreduce, int PE_start, int logPE_stride, int PE_size, float *pWrk, long *pSync);$/;"	p	signature:(float *target, float *source, int nreduce, int PE_start, int logPE_stride, int PE_size, float *pWrk, long *pSync)
shmem_float_swap	shmem.h	/^OSHMEM_DECLSPEC float shmem_float_swap(float *target, float value, int pe);$/;"	p	signature:(float *target, float value, int pe)
shmem_get	shmem-compat.h	/^OSHMEM_DECLSPEC  void shmem_get(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
shmem_get128	shmem.h	/^OSHMEM_DECLSPEC  void shmem_get128(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
shmem_get16	shmemx.h	/^OSHMEM_DECLSPEC  void shmem_get16(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
shmem_get32	shmem.h	/^OSHMEM_DECLSPEC  void shmem_get32(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
shmem_get64	shmem.h	/^OSHMEM_DECLSPEC  void shmem_get64(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
shmem_getmem	shmem.h	/^OSHMEM_DECLSPEC  void shmem_getmem(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
shmem_iget128	shmem.h	/^OSHMEM_DECLSPEC void shmem_iget128(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_iget16	shmemx.h	/^OSHMEM_DECLSPEC void shmem_iget16(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_iget32	shmem.h	/^OSHMEM_DECLSPEC void shmem_iget32(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_iget64	shmem.h	/^OSHMEM_DECLSPEC void shmem_iget64(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_init	shmem-compat.h	/^OSHMEM_DECLSPEC  void shmem_init(void);$/;"	p	signature:(void)
shmem_int16_and_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int16_and_to_all(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync);$/;"	p	signature:(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync)
shmem_int16_g	shmemx.h	/^OSHMEM_DECLSPEC  int16_t shmem_int16_g(int16_t* addr, int pe);$/;"	p	signature:(int16_t* addr, int pe)
shmem_int16_max_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int16_max_to_all(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync);$/;"	p	signature:(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync)
shmem_int16_min_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int16_min_to_all(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync);$/;"	p	signature:(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync)
shmem_int16_or_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int16_or_to_all(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync);$/;"	p	signature:(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync)
shmem_int16_p	shmemx.h	/^OSHMEM_DECLSPEC  void shmem_int16_p(int16_t* addr, int16_t value, int pe);$/;"	p	signature:(int16_t* addr, int16_t value, int pe)
shmem_int16_prod_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int16_prod_to_all(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync);$/;"	p	signature:(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync)
shmem_int16_sum_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int16_sum_to_all(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync);$/;"	p	signature:(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync)
shmem_int16_wait	shmemx.h	/^OSHMEM_DECLSPEC  void shmem_int16_wait(int16_t *addr, int16_t value);$/;"	p	signature:(int16_t *addr, int16_t value)
shmem_int16_wait_until	shmemx.h	/^OSHMEM_DECLSPEC  void shmem_int16_wait_until(int16_t *addr, int cmp, int16_t value);$/;"	p	signature:(int16_t *addr, int cmp, int16_t value)
shmem_int16_xor_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int16_xor_to_all(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync);$/;"	p	signature:(int16_t *target, int16_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int16_t *pWrk, long *pSync)
shmem_int32_add	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int32_add(int32_t *target, int32_t value, int pe);$/;"	p	signature:(int32_t *target, int32_t value, int pe)
shmem_int32_and_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int32_and_to_all(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync);$/;"	p	signature:(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync)
shmem_int32_cswap	shmemx.h	/^OSHMEM_DECLSPEC int32_t shmem_int32_cswap(int32_t *target, int32_t cond, int32_t value, int pe);$/;"	p	signature:(int32_t *target, int32_t cond, int32_t value, int pe)
shmem_int32_fadd	shmemx.h	/^OSHMEM_DECLSPEC int32_t shmem_int32_fadd(int32_t *target, int32_t value, int pe);$/;"	p	signature:(int32_t *target, int32_t value, int pe)
shmem_int32_finc	shmemx.h	/^OSHMEM_DECLSPEC int32_t shmem_int32_finc(int32_t *target, int pe);$/;"	p	signature:(int32_t *target, int pe)
shmem_int32_g	shmemx.h	/^OSHMEM_DECLSPEC  int32_t shmem_int32_g(int32_t* addr, int pe);$/;"	p	signature:(int32_t* addr, int pe)
shmem_int32_inc	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int32_inc(int32_t *target, int pe);$/;"	p	signature:(int32_t *target, int pe)
shmem_int32_max_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int32_max_to_all(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync);$/;"	p	signature:(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync)
shmem_int32_min_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int32_min_to_all(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync);$/;"	p	signature:(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync)
shmem_int32_or_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int32_or_to_all(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync);$/;"	p	signature:(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync)
shmem_int32_p	shmemx.h	/^OSHMEM_DECLSPEC  void shmem_int32_p(int32_t* addr, int32_t value, int pe);$/;"	p	signature:(int32_t* addr, int32_t value, int pe)
shmem_int32_prod_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int32_prod_to_all(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync);$/;"	p	signature:(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync)
shmem_int32_sum_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int32_sum_to_all(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync);$/;"	p	signature:(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync)
shmem_int32_swap	shmemx.h	/^OSHMEM_DECLSPEC int32_t shmem_int32_swap(int32_t *target, int32_t value, int pe);$/;"	p	signature:(int32_t *target, int32_t value, int pe)
shmem_int32_wait	shmemx.h	/^OSHMEM_DECLSPEC  void shmem_int32_wait(int32_t *addr, int32_t value);$/;"	p	signature:(int32_t *addr, int32_t value)
shmem_int32_wait_until	shmemx.h	/^OSHMEM_DECLSPEC  void shmem_int32_wait_until(int32_t *addr, int cmp, int32_t value);$/;"	p	signature:(int32_t *addr, int cmp, int32_t value)
shmem_int32_xor_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int32_xor_to_all(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync);$/;"	p	signature:(int32_t *target, int32_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int32_t *pWrk, long *pSync)
shmem_int64_add	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int64_add(int64_t *target, int64_t value, int pe);$/;"	p	signature:(int64_t *target, int64_t value, int pe)
shmem_int64_and_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int64_and_to_all(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync);$/;"	p	signature:(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync)
shmem_int64_cswap	shmemx.h	/^OSHMEM_DECLSPEC int64_t shmem_int64_cswap(int64_t *target, int64_t cond, int64_t value, int pe);$/;"	p	signature:(int64_t *target, int64_t cond, int64_t value, int pe)
shmem_int64_fadd	shmemx.h	/^OSHMEM_DECLSPEC int64_t shmem_int64_fadd(int64_t *target, int64_t value, int pe);$/;"	p	signature:(int64_t *target, int64_t value, int pe)
shmem_int64_finc	shmemx.h	/^OSHMEM_DECLSPEC int64_t shmem_int64_finc(int64_t *target, int pe);$/;"	p	signature:(int64_t *target, int pe)
shmem_int64_g	shmemx.h	/^OSHMEM_DECLSPEC  int64_t shmem_int64_g(int64_t* addr, int pe);$/;"	p	signature:(int64_t* addr, int pe)
shmem_int64_inc	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int64_inc(int64_t *target, int pe);$/;"	p	signature:(int64_t *target, int pe)
shmem_int64_max_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int64_max_to_all(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync);$/;"	p	signature:(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync)
shmem_int64_min_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int64_min_to_all(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync);$/;"	p	signature:(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync)
shmem_int64_or_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int64_or_to_all(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync);$/;"	p	signature:(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync)
shmem_int64_p	shmemx.h	/^OSHMEM_DECLSPEC  void shmem_int64_p(int64_t* addr, int64_t value, int pe);$/;"	p	signature:(int64_t* addr, int64_t value, int pe)
shmem_int64_prod_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int64_prod_to_all(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync);$/;"	p	signature:(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync)
shmem_int64_sum_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int64_sum_to_all(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync);$/;"	p	signature:(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync)
shmem_int64_swap	shmemx.h	/^OSHMEM_DECLSPEC int64_t shmem_int64_swap(int64_t *target, int64_t value, int pe);$/;"	p	signature:(int64_t *target, int64_t value, int pe)
shmem_int64_wait	shmemx.h	/^OSHMEM_DECLSPEC  void shmem_int64_wait(int64_t *addr, int64_t value);$/;"	p	signature:(int64_t *addr, int64_t value)
shmem_int64_wait_until	shmemx.h	/^OSHMEM_DECLSPEC  void shmem_int64_wait_until(int64_t *addr, int cmp, int64_t value);$/;"	p	signature:(int64_t *addr, int cmp, int64_t value)
shmem_int64_xor_to_all	shmemx.h	/^OSHMEM_DECLSPEC void shmem_int64_xor_to_all(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync);$/;"	p	signature:(int64_t *target, int64_t *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int64_t *pWrk, long *pSync)
shmem_int_add	shmem.h	/^OSHMEM_DECLSPEC void shmem_int_add(int *target, int value, int pe);$/;"	p	signature:(int *target, int value, int pe)
shmem_int_and_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_int_and_to_all(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync);$/;"	p	signature:(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync)
shmem_int_cswap	shmem.h	/^OSHMEM_DECLSPEC int shmem_int_cswap(int *target, int cond, int value, int pe);$/;"	p	signature:(int *target, int cond, int value, int pe)
shmem_int_fadd	shmem.h	/^OSHMEM_DECLSPEC int shmem_int_fadd(int *target, int value, int pe);$/;"	p	signature:(int *target, int value, int pe)
shmem_int_finc	shmem.h	/^OSHMEM_DECLSPEC int shmem_int_finc(int *target, int pe);$/;"	p	signature:(int *target, int pe)
shmem_int_g	shmem.h	/^OSHMEM_DECLSPEC  int shmem_int_g(int* addr, int pe);$/;"	p	signature:(int* addr, int pe)
shmem_int_get	shmem.h	/^OSHMEM_DECLSPEC  void shmem_int_get(int *target, const int *source, size_t len, int pe);$/;"	p	signature:(int *target, const int *source, size_t len, int pe)
shmem_int_iget	shmem.h	/^OSHMEM_DECLSPEC void shmem_int_iget(int* target, const int* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(int* target, const int* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_int_inc	shmem.h	/^OSHMEM_DECLSPEC void shmem_int_inc(int *target, int pe);$/;"	p	signature:(int *target, int pe)
shmem_int_iput	shmem.h	/^OSHMEM_DECLSPEC void shmem_int_iput(int* target, const int* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(int* target, const int* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_int_max_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_int_max_to_all(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync);$/;"	p	signature:(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync)
shmem_int_min_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_int_min_to_all(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync);$/;"	p	signature:(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync)
shmem_int_or_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_int_or_to_all(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync);$/;"	p	signature:(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync)
shmem_int_p	shmem.h	/^OSHMEM_DECLSPEC  void shmem_int_p(int* addr, int value, int pe);$/;"	p	signature:(int* addr, int value, int pe)
shmem_int_prod_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_int_prod_to_all(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync);$/;"	p	signature:(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync)
shmem_int_put	shmem.h	/^OSHMEM_DECLSPEC  void shmem_int_put(int* target, const int* source, size_t len, int pe);$/;"	p	signature:(int* target, const int* source, size_t len, int pe)
shmem_int_sum_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_int_sum_to_all(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync);$/;"	p	signature:(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync)
shmem_int_swap	shmem.h	/^OSHMEM_DECLSPEC int shmem_int_swap(int *target, int value, int pe);$/;"	p	signature:(int *target, int value, int pe)
shmem_int_wait	shmem.h	/^OSHMEM_DECLSPEC  void shmem_int_wait(int *addr, int value);$/;"	p	signature:(int *addr, int value)
shmem_int_wait_until	shmem.h	/^OSHMEM_DECLSPEC  void shmem_int_wait_until(int *addr, int cmp, int value);$/;"	p	signature:(int *addr, int cmp, int value)
shmem_int_xor_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_int_xor_to_all(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync);$/;"	p	signature:(int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync)
shmem_iput128	shmem.h	/^OSHMEM_DECLSPEC void shmem_iput128(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_iput16	shmemx.h	/^OSHMEM_DECLSPEC void shmem_iput16(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_iput32	shmem.h	/^OSHMEM_DECLSPEC void shmem_iput32(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_iput64	shmem.h	/^OSHMEM_DECLSPEC void shmem_iput64(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(void* target, const void* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_long_add	shmem.h	/^OSHMEM_DECLSPEC void shmem_long_add(long *target, long value, int pe);$/;"	p	signature:(long *target, long value, int pe)
shmem_long_and_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_long_and_to_all(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync);$/;"	p	signature:(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync)
shmem_long_cswap	shmem.h	/^OSHMEM_DECLSPEC long shmem_long_cswap(long *target, long cond, long value, int pe);$/;"	p	signature:(long *target, long cond, long value, int pe)
shmem_long_fadd	shmem.h	/^OSHMEM_DECLSPEC long shmem_long_fadd(long *target, long value, int pe);$/;"	p	signature:(long *target, long value, int pe)
shmem_long_finc	shmem.h	/^OSHMEM_DECLSPEC long shmem_long_finc(long *target, int pe);$/;"	p	signature:(long *target, int pe)
shmem_long_g	shmem.h	/^OSHMEM_DECLSPEC  long shmem_long_g(long* addr, int pe);$/;"	p	signature:(long* addr, int pe)
shmem_long_get	shmem.h	/^OSHMEM_DECLSPEC  void shmem_long_get(long *target, const long *source, size_t len, int pe);$/;"	p	signature:(long *target, const long *source, size_t len, int pe)
shmem_long_iget	shmem.h	/^OSHMEM_DECLSPEC void shmem_long_iget(long* target, const long* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(long* target, const long* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_long_inc	shmem.h	/^OSHMEM_DECLSPEC void shmem_long_inc(long *target, int pe);$/;"	p	signature:(long *target, int pe)
shmem_long_iput	shmem.h	/^OSHMEM_DECLSPEC void shmem_long_iput(long* target, const long* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(long* target, const long* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_long_max_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_long_max_to_all(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync);$/;"	p	signature:(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync)
shmem_long_min_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_long_min_to_all(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync);$/;"	p	signature:(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync)
shmem_long_or_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_long_or_to_all(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync);$/;"	p	signature:(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync)
shmem_long_p	shmem.h	/^OSHMEM_DECLSPEC  void shmem_long_p(long* addr, long value, int pe);$/;"	p	signature:(long* addr, long value, int pe)
shmem_long_prod_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_long_prod_to_all(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync);$/;"	p	signature:(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync)
shmem_long_put	shmem.h	/^OSHMEM_DECLSPEC  void shmem_long_put(long *target, const long *source, size_t len, int pe);$/;"	p	signature:(long *target, const long *source, size_t len, int pe)
shmem_long_sum_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_long_sum_to_all(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync);$/;"	p	signature:(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync)
shmem_long_swap	shmem.h	/^OSHMEM_DECLSPEC long shmem_long_swap(long *target, long value, int pe);$/;"	p	signature:(long *target, long value, int pe)
shmem_long_wait	shmem.h	/^OSHMEM_DECLSPEC  void shmem_long_wait(long *addr, long value);$/;"	p	signature:(long *addr, long value)
shmem_long_wait_until	shmem.h	/^OSHMEM_DECLSPEC  void shmem_long_wait_until(long *addr, int cmp, long value);$/;"	p	signature:(long *addr, int cmp, long value)
shmem_long_xor_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_long_xor_to_all(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync);$/;"	p	signature:(long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync)
shmem_longdouble_g	shmem.h	/^OSHMEM_DECLSPEC  long double shmem_longdouble_g(long double* addr, int pe);$/;"	p	signature:(long double* addr, int pe)
shmem_longdouble_get	shmem.h	/^OSHMEM_DECLSPEC  void shmem_longdouble_get(long double *target, const long double *source, size_t len, int pe);$/;"	p	signature:(long double *target, const long double *source, size_t len, int pe)
shmem_longdouble_iget	shmem.h	/^OSHMEM_DECLSPEC void shmem_longdouble_iget(long double* target, const long double* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(long double* target, const long double* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_longdouble_iput	shmem.h	/^OSHMEM_DECLSPEC void shmem_longdouble_iput(long double* target, const long double* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(long double* target, const long double* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_longdouble_max_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_longdouble_max_to_all(long double *target, long double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long double *pWrk, long *pSync);$/;"	p	signature:(long double *target, long double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long double *pWrk, long *pSync)
shmem_longdouble_min_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_longdouble_min_to_all(long double *target, long double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long double *pWrk, long *pSync);$/;"	p	signature:(long double *target, long double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long double *pWrk, long *pSync)
shmem_longdouble_p	shmem.h	/^OSHMEM_DECLSPEC  void shmem_longdouble_p(long double* addr, long double value, int pe);$/;"	p	signature:(long double* addr, long double value, int pe)
shmem_longdouble_prod_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_longdouble_prod_to_all(long double *target, long double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long double *pWrk, long *pSync);$/;"	p	signature:(long double *target, long double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long double *pWrk, long *pSync)
shmem_longdouble_put	shmem.h	/^OSHMEM_DECLSPEC  void shmem_longdouble_put(long double *target, const long double *source, size_t len, int pe);$/;"	p	signature:(long double *target, const long double *source, size_t len, int pe)
shmem_longdouble_sum_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_longdouble_sum_to_all(long double *target, long double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long double *pWrk, long *pSync);$/;"	p	signature:(long double *target, long double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long double *pWrk, long *pSync)
shmem_longlong_add	shmem.h	/^OSHMEM_DECLSPEC void shmem_longlong_add(long long *target, long long value, int pe);$/;"	p	signature:(long long *target, long long value, int pe)
shmem_longlong_and_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_longlong_and_to_all(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync);$/;"	p	signature:(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync)
shmem_longlong_cswap	shmem.h	/^OSHMEM_DECLSPEC long long shmem_longlong_cswap(long long *target, long long cond, long long value, int pe);$/;"	p	signature:(long long *target, long long cond, long long value, int pe)
shmem_longlong_fadd	shmem.h	/^OSHMEM_DECLSPEC long long shmem_longlong_fadd(long long *target, long long value, int pe);$/;"	p	signature:(long long *target, long long value, int pe)
shmem_longlong_finc	shmem.h	/^OSHMEM_DECLSPEC long long shmem_longlong_finc(long long *target, int pe);$/;"	p	signature:(long long *target, int pe)
shmem_longlong_g	shmem.h	/^OSHMEM_DECLSPEC  long long shmem_longlong_g(long long* addr, int pe);$/;"	p	signature:(long long* addr, int pe)
shmem_longlong_get	shmem.h	/^OSHMEM_DECLSPEC  void shmem_longlong_get(long long *target, const long long *source, size_t len, int pe);$/;"	p	signature:(long long *target, const long long *source, size_t len, int pe)
shmem_longlong_iget	shmem.h	/^OSHMEM_DECLSPEC void shmem_longlong_iget(long long* target, const long long* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(long long* target, const long long* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_longlong_inc	shmem.h	/^OSHMEM_DECLSPEC void shmem_longlong_inc(long long *target, int pe);$/;"	p	signature:(long long *target, int pe)
shmem_longlong_iput	shmem.h	/^OSHMEM_DECLSPEC void shmem_longlong_iput(long long* target, const long long* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(long long* target, const long long* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_longlong_max_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_longlong_max_to_all(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync);$/;"	p	signature:(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync)
shmem_longlong_min_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_longlong_min_to_all(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync);$/;"	p	signature:(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync)
shmem_longlong_or_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_longlong_or_to_all(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync);$/;"	p	signature:(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync)
shmem_longlong_p	shmem.h	/^OSHMEM_DECLSPEC  void shmem_longlong_p(long long* addr, long long value, int pe);$/;"	p	signature:(long long* addr, long long value, int pe)
shmem_longlong_prod_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_longlong_prod_to_all(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync);$/;"	p	signature:(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync)
shmem_longlong_put	shmem.h	/^OSHMEM_DECLSPEC  void shmem_longlong_put(long long *target, const long long *source, size_t len, int pe);$/;"	p	signature:(long long *target, const long long *source, size_t len, int pe)
shmem_longlong_sum_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_longlong_sum_to_all(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync);$/;"	p	signature:(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync)
shmem_longlong_swap	shmem.h	/^OSHMEM_DECLSPEC long long shmem_longlong_swap(long long*target, long long value, int pe);$/;"	p	signature:(long long*target, long long value, int pe)
shmem_longlong_wait	shmem.h	/^OSHMEM_DECLSPEC  void shmem_longlong_wait(long long *addr, long long value);$/;"	p	signature:(long long *addr, long long value)
shmem_longlong_wait_until	shmem.h	/^OSHMEM_DECLSPEC  void shmem_longlong_wait_until(long long *addr, int cmp, long long value);$/;"	p	signature:(long long *addr, int cmp, long long value)
shmem_longlong_xor_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_longlong_xor_to_all(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync);$/;"	p	signature:(long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync)
shmem_my_pe	shmem-compat.h	/^OSHMEM_DECLSPEC  int shmem_my_pe(void);$/;"	p	signature:(void)
shmem_n_pes	shmem-compat.h	/^OSHMEM_DECLSPEC  int shmem_n_pes(void);$/;"	p	signature:(void)
shmem_pe_accessible	shmem.h	/^OSHMEM_DECLSPEC int shmem_pe_accessible(int pe);$/;"	p	signature:(int pe)
shmem_ptr	shmem.h	/^OSHMEM_DECLSPEC  void *shmem_ptr(void *ptr, int pe);$/;"	p	signature:(void *ptr, int pe)
shmem_put	shmem-compat.h	/^OSHMEM_DECLSPEC  void shmem_put(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
shmem_put128	shmem.h	/^OSHMEM_DECLSPEC  void shmem_put128(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
shmem_put16	shmemx.h	/^OSHMEM_DECLSPEC  void shmem_put16(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
shmem_put32	shmem.h	/^OSHMEM_DECLSPEC  void shmem_put32(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
shmem_put64	shmem.h	/^OSHMEM_DECLSPEC  void shmem_put64(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
shmem_putmem	shmem.h	/^OSHMEM_DECLSPEC  void shmem_putmem(void *target, const void *source, size_t len, int pe);$/;"	p	signature:(void *target, const void *source, size_t len, int pe)
shmem_quiet	shmem.h	/^OSHMEM_DECLSPEC  void shmem_quiet(void);$/;"	p	signature:(void)
shmem_set_cache_inv	shmem.h	/^OSHMEM_DECLSPEC void shmem_set_cache_inv(void);$/;"	p	signature:(void)
shmem_set_cache_line_inv	shmem.h	/^OSHMEM_DECLSPEC void shmem_set_cache_line_inv(void* target);$/;"	p	signature:(void* target)
shmem_set_lock	shmem.h	/^OSHMEM_DECLSPEC void shmem_set_lock(long *lock);$/;"	p	signature:(long *lock)
shmem_short_and_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_short_and_to_all(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync);$/;"	p	signature:(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync)
shmem_short_g	shmem.h	/^OSHMEM_DECLSPEC  short shmem_short_g(short* addr, int pe);$/;"	p	signature:(short* addr, int pe)
shmem_short_get	shmem.h	/^OSHMEM_DECLSPEC  void shmem_short_get(short *target, const short *source, size_t len, int pe);$/;"	p	signature:(short *target, const short *source, size_t len, int pe)
shmem_short_iget	shmem.h	/^OSHMEM_DECLSPEC void shmem_short_iget(short* target, const short* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(short* target, const short* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_short_iput	shmem.h	/^OSHMEM_DECLSPEC void shmem_short_iput(short* target, const short* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe);$/;"	p	signature:(short* target, const short* source, ptrdiff_t tst, ptrdiff_t sst,size_t len, int pe)
shmem_short_max_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_short_max_to_all(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync);$/;"	p	signature:(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync)
shmem_short_min_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_short_min_to_all(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync);$/;"	p	signature:(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync)
shmem_short_or_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_short_or_to_all(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync);$/;"	p	signature:(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync)
shmem_short_p	shmem.h	/^OSHMEM_DECLSPEC  void shmem_short_p(short* addr, short value, int pe);$/;"	p	signature:(short* addr, short value, int pe)
shmem_short_prod_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_short_prod_to_all(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync);$/;"	p	signature:(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync)
shmem_short_put	shmem.h	/^OSHMEM_DECLSPEC  void shmem_short_put(short *target, const short *source, size_t len, int pe);$/;"	p	signature:(short *target, const short *source, size_t len, int pe)
shmem_short_sum_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_short_sum_to_all(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync);$/;"	p	signature:(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync)
shmem_short_wait	shmem.h	/^OSHMEM_DECLSPEC  void shmem_short_wait(short *addr, short value);$/;"	p	signature:(short *addr, short value)
shmem_short_wait_until	shmem.h	/^OSHMEM_DECLSPEC  void shmem_short_wait_until(short *addr, int cmp, short value);$/;"	p	signature:(short *addr, int cmp, short value)
shmem_short_xor_to_all	shmem.h	/^OSHMEM_DECLSPEC void shmem_short_xor_to_all(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync);$/;"	p	signature:(short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync)
shmem_swap	shmem.h	/^OSHMEM_DECLSPEC long shmem_swap(long *target, long value, int pe);$/;"	p	signature:(long *target, long value, int pe)
shmem_test_lock	shmem.h	/^OSHMEM_DECLSPEC int shmem_test_lock(long *lock);$/;"	p	signature:(long *lock)
shmem_udcflush	shmem.h	/^OSHMEM_DECLSPEC void shmem_udcflush(void);$/;"	p	signature:(void)
shmem_udcflush_line	shmem.h	/^OSHMEM_DECLSPEC void shmem_udcflush_line(void* target);$/;"	p	signature:(void* target)
shmem_wait	shmem.h	/^OSHMEM_DECLSPEC  void shmem_wait(long *addr, long value);$/;"	p	signature:(long *addr, long value)
shmem_wait_ops	shmem.h	/^enum shmem_wait_ops {$/;"	g
shmem_wait_until	shmem.h	/^OSHMEM_DECLSPEC  void shmem_wait_until(long *addr, int cmp, long value);$/;"	p	signature:(long *addr, int cmp, long value)
shmemalign	shmem.h	/^OSHMEM_DECLSPEC  void* shmemalign(size_t align, size_t size);$/;"	p	signature:(size_t align, size_t size)
shmemx.h	shmemx.h	1;"	F
shrealloc	shmem.h	/^OSHMEM_DECLSPEC  void* shrealloc(void *ptr, size_t size);$/;"	p	signature:(void *ptr, size_t size)
size	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	uint32_t size;                  \/* number of allocated entries --> internal *\/$/;"	m	struct:OTF_KeyValueList_struct	access:public
size	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint32_t size;$/;"	m	struct:struct_OTF_RBuffer	access:public
size	vampirtrace/open-trace-format/OTF_WBuffer.h	/^	uint32_t size;$/;"	m	struct:struct_OTF_WBuffer	access:public
snapsBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^	OTF_RBuffer* snapsBuffer;$/;"	m	struct:struct_OTF_RStream	access:public
snapsBuffer	vampirtrace/open-trace-format/OTF_WStream.h	/^	OTF_WBuffer* snapsBuffer;$/;"	m	struct:struct_OTF_WStream	access:public
start_pes	shmem.h	/^OSHMEM_DECLSPEC  void start_pes(int npes);$/;"	p	signature:(int npes)
statsBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^	OTF_RBuffer* statsBuffer;$/;"	m	struct:struct_OTF_RStream	access:public
statsBuffer	vampirtrace/open-trace-format/OTF_WStream.h	/^	OTF_WBuffer* statsBuffer;$/;"	m	struct:struct_OTF_WStream	access:public
status.h	openmpi/ompi/mpi/cxx/status.h	1;"	F
status_inln.h	openmpi/ompi/mpi/cxx/status_inln.h	1;"	F
struct_OTF_File	vampirtrace/open-trace-format/OTF_File.h	/^struct struct_OTF_File {$/;"	s
struct_OTF_File	vampirtrace/open-trace-format/OTF_FileManager.h	/^struct struct_OTF_File;$/;"	x
struct_OTF_File::externalbuffer	vampirtrace/open-trace-format/OTF_File.h	/^	const char* externalbuffer;$/;"	m	struct:struct_OTF_File	access:public
struct_OTF_File::externallen	vampirtrace/open-trace-format/OTF_File.h	/^	uint64_t externallen;$/;"	m	struct:struct_OTF_File	access:public
struct_OTF_File::externalpos	vampirtrace/open-trace-format/OTF_File.h	/^	uint64_t externalpos;$/;"	m	struct:struct_OTF_File	access:public
struct_OTF_File::file	vampirtrace/open-trace-format/OTF_File.h	/^	FILE* file;$/;"	m	struct:struct_OTF_File	access:public
struct_OTF_File::filename	vampirtrace/open-trace-format/OTF_File.h	/^	char* filename;$/;"	m	struct:struct_OTF_File	access:public
struct_OTF_File::iofsl	vampirtrace/open-trace-format/OTF_File.h	/^	OTF_File_iofsl *iofsl;$/;"	m	struct:struct_OTF_File	access:public
struct_OTF_File::manager	vampirtrace/open-trace-format/OTF_File.h	/^	OTF_FileManager* manager;$/;"	m	struct:struct_OTF_File	access:public
struct_OTF_File::mode	vampirtrace/open-trace-format/OTF_File.h	/^	OTF_FileMode mode;$/;"	m	struct:struct_OTF_File	access:public
struct_OTF_File::pos	vampirtrace/open-trace-format/OTF_File.h	/^	uint64_t pos;$/;"	m	struct:struct_OTF_File	access:public
struct_OTF_File::z	vampirtrace/open-trace-format/OTF_File.h	/^	void* z;$/;"	m	struct:struct_OTF_File	access:public
struct_OTF_File::zbuffer	vampirtrace/open-trace-format/OTF_File.h	/^	unsigned char* zbuffer;$/;"	m	struct:struct_OTF_File	access:public
struct_OTF_File::zbuffer_seek_further	vampirtrace/open-trace-format/OTF_File.h	/^	uint64_t zbuffer_seek_further;$/;"	m	struct:struct_OTF_File	access:public
struct_OTF_File::zbuffersize	vampirtrace/open-trace-format/OTF_File.h	/^	uint32_t zbuffersize;$/;"	m	struct:struct_OTF_File	access:public
struct_OTF_FileManager	vampirtrace/open-trace-format/OTF_FileManager.h	/^struct struct_OTF_FileManager;$/;"	x
struct_OTF_HandlerArray	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^struct struct_OTF_HandlerArray {$/;"	s
struct_OTF_HandlerArray::firsthandlerarg	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^        void** firsthandlerarg;$/;"	m	struct:struct_OTF_HandlerArray	access:public
struct_OTF_HandlerArray::pointer	vampirtrace/open-trace-format/OTF_HandlerArray.h	/^        OTF_FunctionPointer** pointer;$/;"	m	struct:struct_OTF_HandlerArray	access:public
struct_OTF_MapEntry	vampirtrace/open-trace-format/OTF_MasterControl.h	/^struct struct_OTF_MapEntry {$/;"	s
struct_OTF_MapEntry::argument	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t argument;$/;"	m	struct:struct_OTF_MapEntry	access:public
struct_OTF_MapEntry::n	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t n;$/;"	m	struct:struct_OTF_MapEntry	access:public
struct_OTF_MapEntry::s	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t s;$/;"	m	struct:struct_OTF_MapEntry	access:public
struct_OTF_MapEntry::values	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t* values;$/;"	m	struct:struct_OTF_MapEntry	access:public
struct_OTF_MasterControl	vampirtrace/open-trace-format/OTF_MasterControl.h	/^struct struct_OTF_MasterControl {$/;"	s
struct_OTF_MasterControl::manager	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	OTF_FileManager* manager;$/;"	m	struct:struct_OTF_MasterControl	access:public
struct_OTF_MasterControl::map	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	OTF_MapEntry* map;$/;"	m	struct:struct_OTF_MasterControl	access:public
struct_OTF_MasterControl::n	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t n;$/;"	m	struct:struct_OTF_MasterControl	access:public
struct_OTF_MasterControl::rmap	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	OTF_Pair* rmap;$/;"	m	struct:struct_OTF_MasterControl	access:public
struct_OTF_MasterControl::rn	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t rn;$/;"	m	struct:struct_OTF_MasterControl	access:public
struct_OTF_MasterControl::rs	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t rs;$/;"	m	struct:struct_OTF_MasterControl	access:public
struct_OTF_MasterControl::s	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t s;$/;"	m	struct:struct_OTF_MasterControl	access:public
struct_OTF_Pair	vampirtrace/open-trace-format/OTF_MasterControl.h	/^struct struct_OTF_Pair {$/;"	s
struct_OTF_Pair::argument	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t argument;$/;"	m	struct:struct_OTF_Pair	access:public
struct_OTF_Pair::value	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t value;$/;"	m	struct:struct_OTF_Pair	access:public
struct_OTF_RBuffer	vampirtrace/open-trace-format/OTF_RBuffer.h	/^struct struct_OTF_RBuffer {$/;"	s
struct_OTF_RBuffer::array	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint32_t* array;$/;"	m	struct:struct_OTF_RBuffer	access:public
struct_OTF_RBuffer::arraysize	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint32_t arraysize;$/;"	m	struct:struct_OTF_RBuffer	access:public
struct_OTF_RBuffer::buffer	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	char* buffer;$/;"	m	struct:struct_OTF_RBuffer	access:public
struct_OTF_RBuffer::end	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint32_t end;$/;"	m	struct:struct_OTF_RBuffer	access:public
struct_OTF_RBuffer::file	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	OTF_File* file;$/;"	m	struct:struct_OTF_RBuffer	access:public
struct_OTF_RBuffer::filesize	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint64_t filesize;$/;"	m	struct:struct_OTF_RBuffer	access:public
struct_OTF_RBuffer::firstTime	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint64_t firstTime;$/;"	m	struct:struct_OTF_RBuffer	access:public
struct_OTF_RBuffer::jumpsize	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint32_t jumpsize;$/;"	m	struct:struct_OTF_RBuffer	access:public
struct_OTF_RBuffer::lastTime	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint64_t lastTime;$/;"	m	struct:struct_OTF_RBuffer	access:public
struct_OTF_RBuffer::lastnewline	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint32_t lastnewline;$/;"	m	struct:struct_OTF_RBuffer	access:public
struct_OTF_RBuffer::list	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	OTF_KeyValueList* list;$/;"	m	struct:struct_OTF_RBuffer	access:public
struct_OTF_RBuffer::pos	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint32_t pos;$/;"	m	struct:struct_OTF_RBuffer	access:public
struct_OTF_RBuffer::process	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint32_t process;$/;"	m	struct:struct_OTF_RBuffer	access:public
struct_OTF_RBuffer::size	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint32_t size;$/;"	m	struct:struct_OTF_RBuffer	access:public
struct_OTF_RBuffer::time	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint64_t time;$/;"	m	struct:struct_OTF_RBuffer	access:public
struct_OTF_RBuffer::zbuffersize	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint32_t zbuffersize;$/;"	m	struct:struct_OTF_RBuffer	access:public
struct_OTF_RStream	vampirtrace/open-trace-format/OTF_RStream.h	/^struct struct_OTF_RStream {$/;"	s
struct_OTF_RStream::buffersizes	vampirtrace/open-trace-format/OTF_RStream.h	/^	uint32_t buffersizes;$/;"	m	struct:struct_OTF_RStream	access:public
struct_OTF_RStream::defBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^	OTF_RBuffer* defBuffer;$/;"	m	struct:struct_OTF_RStream	access:public
struct_OTF_RStream::eventBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^	OTF_RBuffer* eventBuffer;$/;"	m	struct:struct_OTF_RStream	access:public
struct_OTF_RStream::id	vampirtrace/open-trace-format/OTF_RStream.h	/^	uint32_t id;$/;"	m	struct:struct_OTF_RStream	access:public
struct_OTF_RStream::manager	vampirtrace/open-trace-format/OTF_RStream.h	/^	OTF_FileManager* manager;$/;"	m	struct:struct_OTF_RStream	access:public
struct_OTF_RStream::markerBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^	OTF_RBuffer* markerBuffer;$/;"	m	struct:struct_OTF_RStream	access:public
struct_OTF_RStream::namestub	vampirtrace/open-trace-format/OTF_RStream.h	/^	char* namestub;$/;"	m	struct:struct_OTF_RStream	access:public
struct_OTF_RStream::recordLimit	vampirtrace/open-trace-format/OTF_RStream.h	/^	uint64_t recordLimit;$/;"	m	struct:struct_OTF_RStream	access:public
struct_OTF_RStream::snapsBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^	OTF_RBuffer* snapsBuffer;$/;"	m	struct:struct_OTF_RStream	access:public
struct_OTF_RStream::statsBuffer	vampirtrace/open-trace-format/OTF_RStream.h	/^	OTF_RBuffer* statsBuffer;$/;"	m	struct:struct_OTF_RStream	access:public
struct_OTF_RStream::zbuffersizes	vampirtrace/open-trace-format/OTF_RStream.h	/^	uint32_t zbuffersizes;$/;"	m	struct:struct_OTF_RStream	access:public
struct_OTF_WBuffer	vampirtrace/open-trace-format/OTF_WBuffer.h	/^struct struct_OTF_WBuffer {$/;"	s
struct_OTF_WBuffer::buffer	vampirtrace/open-trace-format/OTF_WBuffer.h	/^	char* buffer;$/;"	m	struct:struct_OTF_WBuffer	access:public
struct_OTF_WBuffer::file	vampirtrace/open-trace-format/OTF_WBuffer.h	/^	OTF_File* file;$/;"	m	struct:struct_OTF_WBuffer	access:public
struct_OTF_WBuffer::pos	vampirtrace/open-trace-format/OTF_WBuffer.h	/^	uint32_t pos;$/;"	m	struct:struct_OTF_WBuffer	access:public
struct_OTF_WBuffer::process	vampirtrace/open-trace-format/OTF_WBuffer.h	/^	uint32_t process;$/;"	m	struct:struct_OTF_WBuffer	access:public
struct_OTF_WBuffer::size	vampirtrace/open-trace-format/OTF_WBuffer.h	/^	uint32_t size;$/;"	m	struct:struct_OTF_WBuffer	access:public
struct_OTF_WBuffer::time	vampirtrace/open-trace-format/OTF_WBuffer.h	/^	uint64_t time;$/;"	m	struct:struct_OTF_WBuffer	access:public
struct_OTF_WBuffer::zbuffersize	vampirtrace/open-trace-format/OTF_WBuffer.h	/^	uint32_t zbuffersize;$/;"	m	struct:struct_OTF_WBuffer	access:public
struct_OTF_WStream	vampirtrace/open-trace-format/OTF_WStream.h	/^struct struct_OTF_WStream {$/;"	s
struct_OTF_WStream::buffersizes	vampirtrace/open-trace-format/OTF_WStream.h	/^	uint32_t buffersizes;$/;"	m	struct:struct_OTF_WStream	access:public
struct_OTF_WStream::compression	vampirtrace/open-trace-format/OTF_WStream.h	/^	OTF_FileCompression compression;$/;"	m	struct:struct_OTF_WStream	access:public
struct_OTF_WStream::defBuffer	vampirtrace/open-trace-format/OTF_WStream.h	/^	OTF_WBuffer* defBuffer;$/;"	m	struct:struct_OTF_WStream	access:public
struct_OTF_WStream::eventBuffer	vampirtrace/open-trace-format/OTF_WStream.h	/^	OTF_WBuffer* eventBuffer;$/;"	m	struct:struct_OTF_WStream	access:public
struct_OTF_WStream::format	vampirtrace/open-trace-format/OTF_WStream.h	/^	uint32_t format;$/;"	m	struct:struct_OTF_WStream	access:public
struct_OTF_WStream::id	vampirtrace/open-trace-format/OTF_WStream.h	/^	uint32_t id;$/;"	m	struct:struct_OTF_WStream	access:public
struct_OTF_WStream::manager	vampirtrace/open-trace-format/OTF_WStream.h	/^	OTF_FileManager* manager;$/;"	m	struct:struct_OTF_WStream	access:public
struct_OTF_WStream::markerBuffer	vampirtrace/open-trace-format/OTF_WStream.h	/^	OTF_WBuffer* markerBuffer;$/;"	m	struct:struct_OTF_WStream	access:public
struct_OTF_WStream::namestub	vampirtrace/open-trace-format/OTF_WStream.h	/^	char* namestub;$/;"	m	struct:struct_OTF_WStream	access:public
struct_OTF_WStream::snapsBuffer	vampirtrace/open-trace-format/OTF_WStream.h	/^	OTF_WBuffer* snapsBuffer;$/;"	m	struct:struct_OTF_WStream	access:public
struct_OTF_WStream::statsBuffer	vampirtrace/open-trace-format/OTF_WStream.h	/^	OTF_WBuffer* statsBuffer;$/;"	m	struct:struct_OTF_WStream	access:public
struct_OTF_WStream::zbuffersizes	vampirtrace/open-trace-format/OTF_WStream.h	/^	uint32_t zbuffersizes;$/;"	m	struct:struct_OTF_WStream	access:public
sub_name	vampirtrace/pomp_lib.h	/^  const char* sub_name;        \/* optional: region name                 *\/$/;"	m	struct:ompregdescr	access:public
synch	vampirtrace/vt_plugin_cntr.h	/^  int32_t synch;$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
things	mpif-sizeof.h	/^! Apparently, this compiler does not support both of those things, so$/;"	v
time	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint64_t time;$/;"	m	struct:struct_OTF_RBuffer	access:public
time	vampirtrace/open-trace-format/OTF_WBuffer.h	/^	uint64_t time;$/;"	m	struct:struct_OTF_WBuffer	access:public
timestamp	vampirtrace/vt_plugin_cntr.h	/^  uint64_t timestamp;$/;"	m	struct:vt_plugin_cntr_timevalue_struct	access:public
topology.h	openmpi/ompi/mpi/cxx/topology.h	1;"	F
topology_inln.h	openmpi/ompi/mpi/cxx/topology_inln.h	1;"	F
type	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_Type type;$/;"	m	struct:OTF_KeyValuePair_struct	access:public
uint16_t	vampirtrace/open-trace-format/OTF_inttypes_unix.h	/^	typedef unsigned short int              uint16_t;$/;"	t
uint16_t	vampirtrace/vt_inttypes.h	/^  typedef unsigned short int        uint16_t;$/;"	t
uint32_t	vampirtrace/open-trace-format/OTF_inttypes_unix.h	/^	typedef unsigned int                    uint32_t;$/;"	t
uint32_t	vampirtrace/vt_inttypes.h	/^  typedef unsigned int              uint32_t;$/;"	t
uint64_t	vampirtrace/open-trace-format/OTF_inttypes_unix.h	/^		typedef unsigned long int       uint64_t;$/;"	t
uint64_t	vampirtrace/open-trace-format/OTF_inttypes_unix.h	/^		typedef unsigned long long int  uint64_t;$/;"	t
uint64_t	vampirtrace/vt_inttypes.h	/^    typedef unsigned long int       uint64_t;$/;"	t
uint64_t	vampirtrace/vt_inttypes.h	/^    typedef unsigned long long int  uint64_t;$/;"	t
uint8_t	vampirtrace/open-trace-format/OTF_inttypes_unix.h	/^	typedef unsigned char                   uint8_t;$/;"	t
uint8_t	vampirtrace/vt_inttypes.h	/^  typedef unsigned char             uint8_t;$/;"	t
unit	vampirtrace/vt_plugin_cntr.h	/^  char * unit;$/;"	m	struct:vt_plugin_cntr_metric_info_struct	access:public
value	vampirtrace/open-trace-format/OTF_KeyValue.h	/^	OTF_Value value;$/;"	m	struct:OTF_KeyValuePair_struct	access:public
value	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t value;$/;"	m	struct:struct_OTF_Pair	access:public
value	vampirtrace/vt_plugin_cntr.h	/^  uint64_t value;$/;"	m	struct:vt_plugin_cntr_timevalue_struct	access:public
values	vampirtrace/open-trace-format/OTF_MasterControl.h	/^	uint32_t* values;$/;"	m	struct:struct_OTF_MapEntry	access:public
vt_inttypes.h	vampirtrace/vt_inttypes.h	1;"	F
vt_libwrap.h	vampirtrace/vt_libwrap.h	1;"	F
vt_libwrap_finalize	vampirtrace/vt_libwrap.h	/^void vt_libwrap_finalize(void);$/;"	p	signature:(void)
vt_libwrap_get_libc_errno	vampirtrace/vt_libwrap.h	/^int vt_libwrap_get_libc_errno(void);$/;"	p	signature:(void)
vt_libwrap_get_libc_handle	vampirtrace/vt_libwrap.h	/^void* vt_libwrap_get_libc_handle(void);$/;"	p	signature:(void)
vt_libwrap_init	vampirtrace/vt_libwrap.h	/^void vt_libwrap_init(void);$/;"	p	signature:(void)
vt_libwrap_set_libc_errno	vampirtrace/vt_libwrap.h	/^void vt_libwrap_set_libc_errno(const int value);$/;"	p	signature:(const int value)
vt_plugin_callback_return	vampirtrace/vt_plugin_cntr.h	/^enum vt_plugin_callback_return {$/;"	g
vt_plugin_cntr.h	vampirtrace/vt_plugin_cntr.h	1;"	F
vt_plugin_cntr_info	vampirtrace/vt_plugin_cntr.h	/^} vt_plugin_cntr_info;$/;"	t	typeref:struct:vt_plugin_cntr_info_struct
vt_plugin_cntr_info_struct	vampirtrace/vt_plugin_cntr.h	/^typedef struct vt_plugin_cntr_info_struct {$/;"	s
vt_plugin_cntr_info_struct::add_counter	vampirtrace/vt_plugin_cntr.h	/^  int32_t (*add_counter)(char * event_name);$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
vt_plugin_cntr_info_struct::disable_counter	vampirtrace/vt_plugin_cntr.h	/^  int32_t (*disable_counter)(int32_t ID);$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
vt_plugin_cntr_info_struct::enable_counter	vampirtrace/vt_plugin_cntr.h	/^  int32_t (*enable_counter)(int32_t ID);$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
vt_plugin_cntr_info_struct::finalize	vampirtrace/vt_plugin_cntr.h	/^  void (*finalize)(void);$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
vt_plugin_cntr_info_struct::get_all_values	vampirtrace/vt_plugin_cntr.h	/^  uint64_t (*get_all_values)(int32_t, vt_plugin_cntr_timevalue **);$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
vt_plugin_cntr_info_struct::get_current_value	vampirtrace/vt_plugin_cntr.h	/^  uint64_t (*get_current_value)(int32_t ID);$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
vt_plugin_cntr_info_struct::get_event_info	vampirtrace/vt_plugin_cntr.h	/^  vt_plugin_cntr_metric_info * (*get_event_info)(char *);$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
vt_plugin_cntr_info_struct::init	vampirtrace/vt_plugin_cntr.h	/^  int32_t(*init)(void);$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
vt_plugin_cntr_info_struct::is_thread_registered	vampirtrace/vt_plugin_cntr.h	/^  int32_t (*is_thread_registered)(void);$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
vt_plugin_cntr_info_struct::reserved	vampirtrace/vt_plugin_cntr.h	/^  uint64_t reserved[100];$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
vt_plugin_cntr_info_struct::run_per	vampirtrace/vt_plugin_cntr.h	/^  int32_t run_per;$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
vt_plugin_cntr_info_struct::set_callback_function	vampirtrace/vt_plugin_cntr.h	/^  int32_t (*set_callback_function)(void *, int32_t,$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
vt_plugin_cntr_info_struct::set_pform_wtime_function	vampirtrace/vt_plugin_cntr.h	/^  void (*set_pform_wtime_function)(uint64_t(*pform_wtime)(void));$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
vt_plugin_cntr_info_struct::synch	vampirtrace/vt_plugin_cntr.h	/^  int32_t synch;$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
vt_plugin_cntr_info_struct::vt_plugin_cntr_version	vampirtrace/vt_plugin_cntr.h	/^  uint32_t vt_plugin_cntr_version;$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
vt_plugin_cntr_metric_info	vampirtrace/vt_plugin_cntr.h	/^} vt_plugin_cntr_metric_info;$/;"	t	typeref:struct:vt_plugin_cntr_metric_info_struct
vt_plugin_cntr_metric_info_struct	vampirtrace/vt_plugin_cntr.h	/^typedef struct vt_plugin_cntr_metric_info_struct {$/;"	s
vt_plugin_cntr_metric_info_struct::cntr_property	vampirtrace/vt_plugin_cntr.h	/^  uint32_t cntr_property;$/;"	m	struct:vt_plugin_cntr_metric_info_struct	access:public
vt_plugin_cntr_metric_info_struct::name	vampirtrace/vt_plugin_cntr.h	/^  char * name;$/;"	m	struct:vt_plugin_cntr_metric_info_struct	access:public
vt_plugin_cntr_metric_info_struct::unit	vampirtrace/vt_plugin_cntr.h	/^  char * unit;$/;"	m	struct:vt_plugin_cntr_metric_info_struct	access:public
vt_plugin_cntr_per	vampirtrace/vt_plugin_cntr.h	/^enum vt_plugin_cntr_per {$/;"	g
vt_plugin_cntr_synch	vampirtrace/vt_plugin_cntr.h	/^enum vt_plugin_cntr_synch {$/;"	g
vt_plugin_cntr_timevalue	vampirtrace/vt_plugin_cntr.h	/^} vt_plugin_cntr_timevalue;$/;"	t	typeref:struct:vt_plugin_cntr_timevalue_struct
vt_plugin_cntr_timevalue_struct	vampirtrace/vt_plugin_cntr.h	/^typedef struct vt_plugin_cntr_timevalue_struct {$/;"	s
vt_plugin_cntr_timevalue_struct::timestamp	vampirtrace/vt_plugin_cntr.h	/^  uint64_t timestamp;$/;"	m	struct:vt_plugin_cntr_timevalue_struct	access:public
vt_plugin_cntr_timevalue_struct::value	vampirtrace/vt_plugin_cntr.h	/^  uint64_t value;$/;"	m	struct:vt_plugin_cntr_timevalue_struct	access:public
vt_plugin_cntr_version	vampirtrace/vt_plugin_cntr.h	/^  uint32_t vt_plugin_cntr_version;$/;"	m	struct:vt_plugin_cntr_info_struct	access:public
vt_tracer_spec__	vampirtrace/vt_user_region.h	/^  char vt_tracer_spec__(unsigned int);$/;"	p	signature:(unsigned int)
vt_tracer_spec__	vampirtrace/vt_user_region.h	/^  int vt_tracer_spec__(const char*);$/;"	p	signature:(const char*)
vt_user.h	vampirtrace/vt_user.h	1;"	F
vt_user_comment.h	vampirtrace/vt_user_comment.h	1;"	F
vt_user_control.h	vampirtrace/vt_user_control.h	1;"	F
vt_user_count.h	vampirtrace/vt_user_count.h	1;"	F
vt_user_marker.h	vampirtrace/vt_user_marker.h	1;"	F
vt_user_message.h	vampirtrace/vt_user_message.h	1;"	F
vt_user_region.h	vampirtrace/vt_user_region.h	1;"	F
vt_wrap_pthread.h	vampirtrace/vt_wrap_pthread.h	1;"	F
wait_for_init	vampirtrace/vt_libwrap.h	/^  char  wait_for_init;$/;"	m	struct:VTLibwrapAttr_struct	access:public
win.h	openmpi/ompi/mpi/cxx/win.h	1;"	F
win_inln.h	openmpi/ompi/mpi/cxx/win_inln.h	1;"	F
z	vampirtrace/open-trace-format/OTF_File.h	/^	void* z;$/;"	m	struct:struct_OTF_File	access:public
zbuffer	vampirtrace/open-trace-format/OTF_File.h	/^	unsigned char* zbuffer;$/;"	m	struct:struct_OTF_File	access:public
zbuffer_seek_further	vampirtrace/open-trace-format/OTF_File.h	/^	uint64_t zbuffer_seek_further;$/;"	m	struct:struct_OTF_File	access:public
zbuffersize	vampirtrace/open-trace-format/OTF_File.h	/^	uint32_t zbuffersize;$/;"	m	struct:struct_OTF_File	access:public
zbuffersize	vampirtrace/open-trace-format/OTF_RBuffer.h	/^	uint32_t zbuffersize;$/;"	m	struct:struct_OTF_RBuffer	access:public
zbuffersize	vampirtrace/open-trace-format/OTF_WBuffer.h	/^	uint32_t zbuffersize;$/;"	m	struct:struct_OTF_WBuffer	access:public
zbuffersizes	vampirtrace/open-trace-format/OTF_RStream.h	/^	uint32_t zbuffersizes;$/;"	m	struct:struct_OTF_RStream	access:public
zbuffersizes	vampirtrace/open-trace-format/OTF_WStream.h	/^	uint32_t zbuffersizes;$/;"	m	struct:struct_OTF_WStream	access:public
zoidfs_initialized	vampirtrace/open-trace-format/OTF_File.h	/^extern uint8_t zoidfs_initialized;$/;"	x
~Comm_Null	openmpi/ompi/mpi/cxx/comm.h	/^  virtual inline ~Comm_Null() { }$/;"	f	class:Comm_Null	access:public	signature:()
~Datatype	openmpi/ompi/mpi/cxx/datatype.h	/^  inline virtual ~Datatype() {}$/;"	f	class:Datatype	access:public	signature:()
~Errhandler	openmpi/ompi/mpi/cxx/errhandler.h	/^  inline virtual ~Errhandler() { }$/;"	f	class:Errhandler	access:public	signature:()
~Exception	openmpi/ompi/mpi/cxx/exception.h	/^  inline ~Exception() {$/;"	f	class:Exception	access:public	signature:()
~File	openmpi/ompi/mpi/cxx/file.h	/^  virtual ~File() { }$/;"	f	class:File	access:public	signature:()
~Grequest	openmpi/ompi/mpi/cxx/request.h	/^    virtual ~Grequest() {}$/;"	f	class:Grequest	access:public	signature:()
~Group	openmpi/ompi/mpi/cxx/group.h	/^  inline virtual ~Group() {}$/;"	f	class:Group	access:public	signature:()
~Info	openmpi/ompi/mpi/cxx/info.h	/^  virtual ~Info() {}$/;"	f	class:Info	access:public	signature:()
~Op	openmpi/ompi/mpi/cxx/op.h	/^  virtual ~Op();$/;"	p	class:Op	access:public	signature:()
~Op	openmpi/ompi/mpi/cxx/op_inln.h	/^MPI::Op::~Op() $/;"	f	class:MPI::Op	signature:()
~Prequest	openmpi/ompi/mpi/cxx/request.h	/^  virtual ~Prequest() { }$/;"	f	class:Prequest	access:public	signature:()
~Request	openmpi/ompi/mpi/cxx/request.h	/^  virtual ~Request() {}$/;"	f	class:Request	access:public	signature:()
~Status	openmpi/ompi/mpi/cxx/status.h	/^  virtual ~Status() {}$/;"	f	class:Status	access:public	signature:()
~VT_Tracer	vampirtrace/vt_user_region.h	/^  inline VT_Tracer<1>::~VT_Tracer() { VT_User_end2__(i); }$/;"	f	class:VT_Tracer	signature:()
~VT_Tracer	vampirtrace/vt_user_region.h	/^  template<> inline VT_Tracer<sizeof(int)>::~VT_Tracer() { VT_User_end__(n); }$/;"	f	class:VT_Tracer	signature:()
~Win	openmpi/ompi/mpi/cxx/win.h	/^  virtual ~Win() { }$/;"	f	class:Win	access:public	signature:()
